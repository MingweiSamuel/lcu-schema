{
  "events": {
    "AgentResourceEvent": "",
    "OnClientFlash": "Fired when we need to flash riot client",
    "OnClientFocus": "Fired when we need focus on mac riot client",
    "OnClientMinimize": "Fired when we need to minimize riot client",
    "OnJsonApiEvent": "Fired when a resource is changed.",
    "OnJsonApiEvent_agent_v1_requests": "",
    "OnJsonApiEvent_agent_v1_session": "",
    "OnJsonApiEvent_external-message-handler_v1_patch-request": "",
    "OnJsonApiEvent_patch-proxy_v1_active-updates": "",
    "OnJsonApiEvent_patch-proxy_v1_patch-states": "",
    "OnJsonApiEvent_plugin-manager_v1_status": "",
    "OnJsonApiEvent_process-control_v1_process": "",
    "OnJsonApiEvent_product-launcher_v1_launching_from_xbgp": "",
    "OnJsonApiEvent_publishing-content_v1_news-feed": "",
    "OnJsonApiEvent_publishing-content_v1_promo": "",
    "OnJsonApiEvent_rc-auth_v1_xbgp": "",
    "OnJsonApiEvent_restriction_v1_launchRestrictedProducts": "",
    "OnJsonApiEvent_restriction_v1_launchRestrictions": "",
    "OnJsonApiEvent_restriction_v1_ready": "",
    "OnJsonApiEvent_riot-client-app-command_v1_uri-handler": "",
    "OnJsonApiEvent_riot-client-lifecycle-state_v1_state": "",
    "OnJsonApiEvent_riot-client-lifecycle_v1_league-region-election": "",
    "OnJsonApiEvent_riot-client-lifecycle_v1_product-context": "",
    "OnJsonApiEvent_riot-client-lifecycle_v1_ux-command": "",
    "OnJsonApiEvent_riotclient_affinity": "",
    "OnJsonApiEvent_riotclient_zoom-scale": "",
    "OnJsonApiEvent_riotclientapp_v1_isXbgpRunning": "",
    "OnJsonApiEvent_riotclientapp_v1_new-args": "",
    "OnJsonApiEvent_rnet-lifecycle_v1_league-region-election": "",
    "OnJsonApiEvent_rnet-lifecycle_v1_product-context": "",
    "OnJsonApiEvent_rnet-lifecycle_v1_product-context-phase": "",
    "OnJsonApiEvent_rnet-lifecycle_v2_ux-command": "",
    "OnJsonApiEvent_rnet-pft_v1_surveys": "",
    "OnJsonApiEvent_rnet-product-registry_v1_background-patching": "",
    "OnJsonApiEvent_rnet-product-registry_v1_install-states": "",
    "OnJsonApiEvent_rnet-product-registry_v1_move-install-states": "",
    "OnJsonApiEvent_rnet-product-registry_v4_active-updates": "",
    "OnJsonApiEvent_rnet-product-registry_v4_available-product-locales": "",
    "OnJsonApiEvent_rnet-product-registry_v4_install-settings": "",
    "OnJsonApiEvent_rnet-product-registry_v4_patch-states": "",
    "OnJsonApiEvent_rnet-product-registry_v4_player-products-state": "",
    "OnJsonApiEvent_rnet-product-registry_v4_priority-patch-requests": "",
    "OnJsonApiEvent_rnet-product-registry_v4_products": "",
    "OnJsonApiEvent_rnet-product-registry_v4_public-products-state": "",
    "OnJsonApiEvent_rnet-self-update_v1_status": "",
    "OnJsonApiEvent_startup-config_v1_registry-config": "",
    "OnJsonApiEvent_vanguard_v1_status": "",
    "OnLcdsEvent": "Fired when a message is received over the LCDS connection.",
    "OnRegionLocaleChanged": "",
    "OnServiceProxyAsyncEvent": "Fired when an async service proxy message is received.",
    "OnServiceProxyMethodEvent": "Fired when a method-based service proxy message is received.",
    "OnServiceProxyUuidEvent": "Fired when a uuid-based service proxy message is received."
  },
  "functions": {
    "DeleteAgentV1RequestsThirdPartyDependencyByRequestId": "Cancel a third party dependency job",
    "DeleteAgentV1Session": "Stop the agent",
    "DeleteAppCommandV1AuthStatus": "Deletes the stored authentication status",
    "DeleteAppCommandV1FocusRequest": "Delete the current app focus request, if one exists",
    "DeleteAppleAccountV1Authorization": "Delete authorization status for Apple",
    "DeleteChatV2Me": "Delete multi-game presence of a specific product",
    "DeleteChatV3Blocked": "Unblock a player",
    "DeleteChatV3Errors": "Delete a specific error",
    "DeleteChatV3Friendrequests": "Remove or decline friend request",
    "DeleteChatV3Friends": "Remove friend",
    "DeleteChatV3Groups": "Delete a friend group",
    "DeleteChatV3Me": "Delete multi-game presence of a specific product",
    "DeleteChatV4Blocked": "Unblock a player",
    "DeleteChatV4Friendrequests": "Remove or decline friend request",
    "DeleteChatV4Friends": "Remove friend",
    "DeleteChatV4Groups": "Delete a friend group",
    "DeleteChatV5Conversations": "Delete or leave a conversation",
    "DeleteChatV5Friendrequests": "Remove or decline friend request",
    "DeleteChatV5Messages": "Clear conversation message history",
    "DeleteChatV6Conversations": "Delete or leave a conversation",
    "DeleteChatV6ConversationsActive": "Clear active conversation",
    "DeleteChatV6Friendrequests": "Remove or decline friend request",
    "DeleteChatV6Messages": "Clear conversation message history",
    "DeleteChatV7Conversations": "Delete or leave a conversation",
    "DeleteChatV7ConversationsActive": "Clear active conversation",
    "DeleteChatboxV1ChatboxesById": "",
    "DeleteChatboxV1ChatboxesByIdChannelsByChannelName": "",
    "DeleteClientConfigV1Authorization": "Removes the authorization. Triggers revocation of player configuration.",
    "DeleteClientConfigV2EntitlementsToken": "Deletes the entitlements token, if set. Triggers revocation of player configuration.",
    "DeleteClientFeatureFlagsV1DebugMockMode": "Leaves mock mode, and deletes mock data.",
    "DeleteClientFeatureFlagsV1DebugOverridesFlagsByNamespaceByFlag": "Removes an override for a feature flag.",
    "DeleteCookieJarV1Cookies": "Delete existing cookies.",
    "DeleteEulaV1ProductContext": "Resets the current product context.",
    "DeleteExternalMessageHandlerV1PatchRequest": "Delete patch request, which suggests that the request is already handled",
    "DeleteFacebookAccountV1Authorization": "Delete authorization status for Facebook",
    "DeleteGaRestrictionV1DebugCallerIdMockId": "Stops mocking the caller ID for Swagger calls",
    "DeleteGaRestrictionV1DebugPenaltyNotificationsData": "Delete all penalty notifications for all products.",
    "DeleteGaRestrictionV1DebugPenaltyNotificationsDataByMessageId": "Delete the penalty notification for a specific message ID. Note that you'll still be able to see the message until your next relog.",
    "DeleteGaRestrictionV1DebugTime": "Deletes the current mocked time, so that we use the real time again.",
    "DeleteGaWarningV1DebugCallerIdMockId": "Stops mocking the caller ID for Swagger calls",
    "DeleteGaWarningV1WarningsAck": "Acknowledges all warnings for the current game.",
    "DeleteGaWarningV1WarningsAckById": "Acknowledges a specific GA player warning.",
    "DeleteGameSessionV1DebugCallerIdMockId": "Stops mocking the caller ID for Swagger calls",
    "DeleteGameSessionV1SessionsBySessionId": "Requests to disconnect the player from the session.",
    "DeleteGamecenterAccountV1Authorization": "Delete authorization status of Game Center",
    "DeleteGoogleAccountV1Authorization": "Delete the current Google authorization session.",
    "DeleteInfoRadiatorV1CustomHeartbeatMetricByName": "Delete a custom heartbeat metric, if it exists",
    "DeleteMailboxV1DebugCallerIdMockId": "Stops mocking the caller ID for Swagger calls",
    "DeleteMobilePushV1FilterByApplicationByFilterId": "Delete specific filter/unmute conversation, after this call conversation will again receive push notifications",
    "DeleteNintendoAccountV2Authorization": "Deletes the current Nintendo authorization session",
    "DeletePatchProxyV1PatchJobsAll": "Delete all patch jobs from the scheduler. This will stop patch in progress.",
    "DeletePatchProxyV1PatchJobsProductsByProductIdPatchlinesByPatchlineId": "Delete patch job from the scheduler. This will stop patch in progress.",
    "DeletePatchV1InstallsByInstallId": "Delete the install resource",
    "DeletePatchV1InstallsByInstallIdRequestsPatch": "Delete patch request for install",
    "DeletePatchV1InstallsByInstallIdRequestsPreview": "Delete preview request for install",
    "DeletePatchV1InstallsByInstallIdRequestsRepair": "Delete the repair request, interrupting any ongoing repair operations.",
    "DeletePatchV1InstallsByInstallIdRequestsSeed": "Delete seed request for install",
    "DeletePlatformUiV1Fre": "Disable FRE",
    "DeletePlayRestrictionsV1DebugCallerIdMockId": "Stops mocking the caller ID for Swagger calls",
    "DeletePlayerPreferencesV1DebugCallerIdMockId": "Stops mocking the caller ID for Swagger calls",
    "DeletePlayerSessionLifecycleV1Session": "Delete the current lifecycle session",
    "DeletePlaystationAccountV2Authorization": "Deletes the current Playstation authorization session",
    "DeletePrimeGamingV1Login": "Logout from Amazon",
    "DeletePrivateSettingsV1Settings": "Clear all private settings",
    "DeleteProcessControlV1ProcessClientRestarting": "Removes state that client is restarting - can quit now",
    "DeleteProductIntegrationDepsV1AppRepairApplyRequestsProductsByProductIdPatchlinesByPatchlineId": "Removes a apply request.",
    "DeleteProductIntegrationDepsV1AppUpdateApplyRequestsProductsByProductIdPatchlinesByPatchlineId": "Removes a apply request.",
    "DeleteProductIntegrationV1AppRepairApply": "Use this to cancel a game repair that was previously requested.",
    "DeleteProductIntegrationV1DebugAppRepairApply": "Debug endpoint to cancel a repair by session id",
    "DeleteProductLauncherV1DefaultProduct": "Closes the launched default product.",
    "DeleteProductLauncherV1PartnerProduct": "Closes the launched partner product.",
    "DeleteProductLauncherV1ProductsByProductIdPatchlinesByPatchlineId": "Closes the launched product-patchline.",
    "DeleteProductLauncherV1ProductsByProductIdPatchlinesByPatchlineIdRogueProcessByProcessNameByProcessId": "Closes an allowed rogue process associated with a product.",
    "DeleteProductMetadataV1DebugMockMode": "Leaves mock mode, and deletes mock data.",
    "DeleteProductSessionV1SessionsBySessionId": "[Only intended to be called by product launchers, like Riot Client.] Handles deleting a session.",
    "DeleteRiotClientLifecycleV1ProductContext": "Deletes the existing product context, if it exists.",
    "DeleteRiotClientLifecycleV1UxCommand": "Deletes the current UX command so that the default client UX app no longer needs to process it",
    "DeleteRiotMessagingServiceV1Connect": "Schedule a disconnect request from RMS.",
    "DeleteRiotMessagingServiceV1Entitlements": "Delete session entitlements token",
    "DeleteRiotMessagingServiceV1Session": "Kill the current session, if any.",
    "DeleteRiotMessagingServiceV1Socket": "Schedule a socket kill request. For debug purposes only.",
    "DeleteRiotclientAffinity": "Deletes the current runtime affinity of the application.",
    "DeleteRiotclientSplash": "Hide the splash screen.",
    "DeleteRiotclientV1AuthTokensByAuthToken": "Unregister an existing auth token.",
    "DeleteRnetLifecycleV1ProductContext": "Deletes the existing product context, if it exists.",
    "DeleteRnetLifecycleV2UxCommand": "Deletes the current UX command so that the default client UX app no longer needs to process it",
    "DeleteRnetProductRegistryV4PatchRequestsProductsByProductIdPatchlinesByPatchlineId": "Delete patch request for patchline. This will stop any patch in progress.",
    "DeleteRnetProductRegistryV4PriorityPatchRequestsProductsByProductIdPatchlinesByPatchlineId": "Stops a priority patch operation for a given product and patchline, if in progress.",
    "DeleteRnetProductRegistryV4SessionPatchLockProductsByProductIdPatchlineByPatchlineId": "Releases a shared session patch lock for the product-patchline",
    "DeleteRsoAuthV1AuthHintsHint": "Dismisses the current auth hint",
    "DeleteRsoAuthV1Authorization": "Revoke existing tokens, logging the user out.",
    "DeleteRsoAuthV1AuthorizationUserinfo": "Delete the player userinfo",
    "DeleteRsoAuthV1Session": "Destroy the login session.",
    "DeleteRsoAuthV1UserinfoByClientId": "This endpoint is not available until the OpenID configuration is retrieved.",
    "DeleteRsoAuthV2AuthorizationsByClientId": "Remove the local instance of the authorization for the client-id.",
    "DeleteRsoAuthV2Config": "Reset the RSO endpoint configuration.",
    "DeleteRsoAuthenticatorV1Authentication": "Delete the current authentication session.",
    "DeleteRsoAuthenticatorV1AuthenticationLinkStatus": "Delete the current web linking code.",
    "DeleteRsoMobileUiV1RegionElection": "Programmatically dismiss the Region Election UI. Note that this endpoit returns immediately, but the resource is finalized synchronously.",
    "DeleteStartupConfigV1RegistryConfig": "Delete the registry config for Riot Client on startup which will disable launching riot client on start up",
    "DeleteTelemetryV2MetadataBySchemaPrefixByMetadataEntityByPropertyName": "Deletes a property in the metadata automatically applied to a type of analytics platform event",
    "DeleteVoiceChatV1BlockListUsers": "Removes a list of users from the voice provider block list",
    "DeleteVoiceChatV2Sessions": "Leave all joined sessions",
    "DeleteVoiceChatV2SessionsById": "Leave a session",
    "DeleteVoiceChatV3SessionsByProductName": "Leave all joined sessions",
    "DeleteVoiceChatV3SessionsByProductNameById": "Leave a session",
    "DeleteVoiceChatV4SessionsByProductName": "Leave all joined sessions",
    "DeleteVoiceChatV4SessionsByProductNameById": "Leave a session",
    "DeleteXboxAccountV2Authorization": "Deletes the current Xbox authorization session",
    "Exit": "Closes the connection.",
    "GetAccountsSecurityV1Access": "Returns the action need to be done and outbound URL for it",
    "GetAgeRestrictionV1AgeRestrictionProductsByProductId": "Returns the age-restriction state for the productId",
    "GetAgentV1Requests": "Get the list of pending and active requests being handled by the agent",
    "GetAgentV1RequestsThirdPartyDependencyByRequestId": "Get the current status for a third party dependency job",
    "GetAgentV1Session": "Get the running state of the agent",
    "GetAntiAddictionV1ProductsByProductIdPoliciesByPolicyTypeAntiAddictionState": "Returns an anti-addiction state by productId and policy",
    "GetAppCommandV1AuthStatus": "Returns the authentication status",
    "GetAppCommandV1FocusRequest": "Get the current app focus request, if one exists",
    "GetAppleAccountV1Authorization": "Retrieve authorization from the Sign In with Apple Account",
    "GetChatV1Debug": "get debug config",
    "GetChatV1DeviceSettings": "Get the current values of the device settings related to chat.",
    "GetChatV1Session": "get chat session state",
    "GetChatV1Settings": "Get the account settings related to chat",
    "GetChatV2SessionState": "get chat product session state",
    "GetChatV3Blocked": "Get blocked players",
    "GetChatV3Errors": "Get a specific error",
    "GetChatV3Friendrequests": "Get friend requests",
    "GetChatV3Friends": "Get friends",
    "GetChatV3Groups": "Get groups",
    "GetChatV4Blocked": "Get blocked players",
    "GetChatV4ConversationsByCidParticipants": "Get the participants in a conversation",
    "GetChatV4ConversationsByCidParticipantsByPid": "Get specific participant in a conversation",
    "GetChatV4Friendrequests": "Get friend requests",
    "GetChatV4Friends": "Get friends",
    "GetChatV4Groups": "Get groups",
    "GetChatV4Presences": "Get multi-game presences",
    "GetChatV5Conversations": "Get a conversation by cid",
    "GetChatV5Friendrequests": "Get friend requests",
    "GetChatV5Messages": "Get conversation messages",
    "GetChatV5MessagesByDomain": "Get messages by domain (optional query args: cid &/or mid)",
    "GetChatV5Participants": "Get specific participant in a conversation",
    "GetChatV5ParticipantsByDomain": "Get conversations by domain (optional query arg: cid)",
    "GetChatV6Conversations": "Get a conversation by cid",
    "GetChatV6ConversationsActive": "Get active conversation",
    "GetChatV6ConversationsByDomain": "Get conversations by domain (optional query arg: cid)",
    "GetChatV6Friendrequests": "Get friend requests",
    "GetChatV6Messages": "Get conversation messages",
    "GetChatV6MessagesByDomain": "Get messages by domain (optional query args: cid &/or mid)",
    "GetChatV7Conversations": "Get a conversation by cid",
    "GetChatV7ConversationsActive": "Get active conversation",
    "GetChatV7ConversationsByDomain": "Get conversations by domain (optional query arg: cid)",
    "GetChatboxV1ChatboxesByIdBroadcasts": "Get all broadcasts for the specified chatbox",
    "GetChatboxV1ChatboxesByIdBroadcastsByChannelName": "Get all broadcasts for the specified chatbox",
    "GetChatboxV1ChatboxesByIdChannels": "Get all channels for the specified chatbox",
    "GetChatboxV1ChatboxesByIdMessages": "Get all messages for the specified chatbox",
    "GetChatboxV1ChatboxesByIdMessagesChannelsByChannelName": "Get all messages of the specified channel for the specified chatbox",
    "GetChatboxV1ChatboxesByIdMessagesWhispersByPuuid": "Get whisper messages for the specified chatbox",
    "GetChatboxV1ChatboxesByIdParticipants": "Get all participants for the specified chatbox",
    "GetChatboxV1ChatboxesByIdParticipantsWhispers": "Get all participants in whisper channels with friends (for the specified chatbox)",
    "GetChatboxV1Friends": "Get all friends of the user",
    "GetChatboxV1Ready": "",
    "GetClientConfigV1Config": "Returns the configuration for the application. If config is not already cached locally, will make a blocking external request.",
    "GetClientConfigV1ConfigByName": "Returns the single configuration value. If config is not already cached locally, will make a blocking external request.",
    "GetClientConfigV1StatusByType": "Returns the status for the given config type which primarily indicates if the config type is ready for use.",
    "GetClientConfigV1Url": "Returns the URL of the external service",
    "GetClientConfigV2ConfigByName": "Non-blocking request for a specific configuration field.",
    "GetClientConfigV2NamespaceByNamespace": "Non-blocking request for public+player configurations in a namespace.",
    "GetClientConfigV2NamespaceByNamespacePlayer": "Non-blocking request for 'player' configurations in a namespace.",
    "GetClientConfigV2NamespaceByNamespacePublic": "Non-blocking request for 'public' configurations in a namespace.",
    "GetClientFeatureFlagsV1DebugAllSubscribedFlags": "Returns all the feature flags that are currently subscribed.",
    "GetClientFeatureFlagsV1DebugMockData": "Retrieves the current set of mock data for the plugin.",
    "GetClientFeatureFlagsV1DebugMockMode": "Returns whether the plugin is in mock mode or not.",
    "GetClientFeatureFlagsV1DebugOverridesFlags": "Retrieves the values of all overridden flags.",
    "GetClientFeatureFlagsV1FlagsByNamespaceByFlag": "Retrieves the value of a specific feature flag.",
    "GetCookieJarV1Cookies": "Get all cookies.",
    "GetDataStoreV1InstallSettingsByPath": "Get the data for the specified key from the install settings.",
    "GetDataStoreV1Paths": "Get the data store paths.",
    "GetDataStoreV1PrivateSettingsByPath": "Get the data for the specified key from the private settings.",
    "GetDataStoreV1ProductSettingsProductsByProductIdPatchlinesByPatchlineId": "Get all settings for the specified product.",
    "GetDataStoreV1ProductSettingsProductsByProductIdPatchlinesByPatchlineIdByPath": "Get the data for the specified key from the settings for the specified product.",
    "GetDataStoreV1SystemSettingsByPath": "Get the setting for the specified key. This API is provided for host applications.",
    "GetEntitlementsServiceV1Token": "Get the entitlements token from the service",
    "GetEntitlementsV1Token": "Get V1 entitlements token, which contains the RSO access token.",
    "GetEntitlementsV2Token": "Get V2 Entitlements token, which contains the default RSO authorization.",
    "GetEulaV1Agreement": "Returns an object containing metadata about the most recent published EULA, and a field, 'acceptance', indicating whether the user has accepted this agreement or not. (The 'acceptance' field is accessible separately via the /acceptance endpoint.\n\nWhen the 'acceptance' field is 'WaitingForAllServiceData', we don't have the data for the latest EULA, nor its acceptance state, and all other fields are invalid.",
    "GetEulaV1AgreementAcceptance": "Returns the acceptance state of the most recent EULA for the current user. Possible values are:\n\n- WaitingForAllServiceData: The user is signed out, we have yet to retrieve client-config, or we are otherwise waiting for data to determine if the user has accepted the latest agreement.\n- AcceptanceRequired: The user has never accepted a EULA, or has not accepted the most recent version.\n- Accepted: The user has accepted the most recent EULA.",
    "GetEulaV1AgreementContent": "Returns the content of the current version EULA.",
    "GetEulaV1ExternalLegalLinks": "Returns the web URLs for Terms of Service and Privacy Noticeaccording to the most appropriate locale for the agreement you are bound to",
    "GetEulaV1PrivacyPolicy": "Returns the current privacy policy data.",
    "GetEulaV1PrivacyPolicyContent": "Returns the content of the current privacy policy.",
    "GetEulaV1ProductContext": "Gets the current product context.",
    "GetExternalMessageHandlerV1PatchRequest": "Get patch request",
    "GetFacebookAccountV1Authorization": "Retrieve authorization from the Sign In with Facebook Account",
    "GetGaRestrictionV1DebugCallerIdMockId": "Checks the caller ID in use when APIs are called from Swagger",
    "GetGaRestrictionV1DebugPenaltyNotificationsData": "Returns the raw data for the cached Penalty Notifications that this plugin received. This intended for debugging only.",
    "GetGaRestrictionV1DebugTime": "Check what the plugin is using as the current time. If the time is being mocked, uses the mock. Otherwise uses the real current time. Uses milliseconds since epoch.",
    "GetGaRestrictionV1PenaltyNotifications": "Provides a list of penalty notifications to show to the player for the callerId.",
    "GetGaRestrictionV1UnreadPenaltyNotifications": "Provides a list of unread penalty notifications to show to the player for the callerId.",
    "GetGaWarningV1DebugCallerIdMockId": "Checks the caller ID in use when APIs are called from Swagger",
    "GetGaWarningV1Warnings": "Provides a list of unacknowledged localized game-agnostic warnings to show the player.",
    "GetGameSessionV1Clusters": "Gets a list of all available clusters. Cluster IDs arrive asynchronously and may not be immediately avaiable. The logic of selecting the optimal cluster for a player is up to the game team.",
    "GetGameSessionV1DebugCallerIdMockId": "Checks the caller ID in use when APIs are called from Swagger",
    "GetGameSessionV1SessionsBySessionId": "Gets the status of the specified session.",
    "GetGamecenterAccountV1Authorization": "Retrieve authorization for the Game Center Account",
    "GetGoogleAccountV1Authorization": "Gets the current Google authorization status.",
    "GetKrAccountConfigV1Config": "The current plugin configuration.",
    "GetKrAccountPromotionV1Session": "Get KR account session token for KR Account Promotion flow",
    "GetLoyaltyV1LoyaltyResource": "Returns loyalty resource including pcbId if player's playing from pcbang or not found exception",
    "GetMailboxV1CheckNewMail": "Returns if the mailbox has new mail",
    "GetMailboxV1CheckNewProductMailByProductId": "Returns if the mailbox has new mail",
    "GetMailboxV1DebugCallerIdMockId": "Checks the caller ID in use when APIs are called from Swagger",
    "GetMailboxV1Enabled": "Returns whether or not the mailbox feature is enabled for this environment",
    "GetMailboxV1Ready": "Returns whether or not the mailbox feature is enabled and ready to use for this environment",
    "GetMobileProductRegistryV1BuildNumber": "[Deprecated] Get the current game build number.",
    "GetMobileProductRegistryV1IsGameObsolete": "[Deprecated] Get if the current game build is obsolete.",
    "GetMobileProductRegistryV1ValidGameVersions": "Get the valid game versions",
    "GetMobilePushV1FilterByApplicationByFilterId": "Fetch specific filter data for logged in user",
    "GetMobilePushV1FiltersByApplication": "Fetch all filters for logged in user",
    "GetNameCheckV1Validate": "Verify user input name.",
    "GetNintendoAccountV1PlayerNickname": "Gets the player nickname of the Nintendo Account for the player logged in the Nintendo Switch",
    "GetNintendoAccountV2Authorization": "Gets current Nintendo authorization status",
    "GetPatchProxyV1ActiveUpdates": "Get list of active updates",
    "GetPatchProxyV1PatchJobs": "Get all patch job information (sequence, productId, patchlineId) from the scheduler.",
    "GetPatchProxyV1PatchStatesProductsByProductIdPatchlinesByPatchlineId": "Get patch status for patchline",
    "GetPatchV1Configuration": "Retrieve the configuration",
    "GetPatchV1Installs": "Get list of installs on disk",
    "GetPatchV1InstallsByInstallId": "Get detailed information about an install, including current requests and status.",
    "GetPatchV1InstallsByInstallIdStatus": "Retrieve the current patch, preview and seed statuses of an install resource",
    "GetPatchV1InstallsByInstallIdStatusPatch": "Retrieve the current patch status of an install.",
    "GetPatchV1InstallsByInstallIdStatusPreview": "Retrieve the current preview status of an install.",
    "GetPatchV1InstallsByInstallIdStatusRepair": "Retrieve the current repair status of an install.",
    "GetPatchV1InstallsByInstallIdStatusSeed": "Retrieve the current seed status of an install.",
    "GetPayMobileV1ProductListResult": "Available products notification",
    "GetPayMobileV1PurchaseResult": "Purchase notification",
    "GetPermissionsV1Request": "[WIP] Gets values for all requested permissions.",
    "GetPlatformLoginV1Config": "Returns the plugin config and enabled status",
    "GetPlatformLoginV1Status": "Returns the current login state of the client",
    "GetPlatformSocialV1BlockList": "Retrieves the currently-authenticated player's list of blocked users on the current platform as a list of Riot PUUIDs",
    "GetPlatformSocialV1VoicePermission": "Returns if the current player has permissions from the platform to use voice chat and if not, why that is the case.",
    "GetPlatformUiV1Enabled": "Returns true if platform-ui is enabled",
    "GetPlatformUiV1Fre": "Get FRE status",
    "GetPlatformUiV1SdkInstanceId": "Returns sdk instance id to be used with platform-ui views, necessary when running multiple instances of the SDK",
    "GetPlatformUiV1Status": "Returns current status of UI",
    "GetPlayRestrictionsV1DebugCallerIdMockId": "Checks the caller ID in use when APIs are called from Swagger",
    "GetPlayRestrictionsV1Restrictions": "Get the current play restrictions",
    "GetPlayerAccountAliasesV1Active": "Returns the current active game name for the player.",
    "GetPlayerAccountAliasesV1Aliases": "Gets a list of all aliases for the player.",
    "GetPlayerAccountAliasesV1DisplayName": "Returns the current active, sanitized, game name and tag for the player.",
    "GetPlayerAccountAliasesV1Lookup": "Lookup a list of aliases with the provided gameName and optional tagLine.",
    "GetPlayerAccountAliasesV1Required": "Check if a player is required to set their name.",
    "GetPlayerAccountConfigV1Config": "The current plugin configuration.",
    "GetPlayerAccountLoginHistoryV1DebugCache": "",
    "GetPlayerAccountPromotionV1Eligibility": "Return the latest cached eligibility check.",
    "GetPlayerAccountPromotionV1Fields": "Get a list of fields the player can update.",
    "GetPlayerAccountRegionsV1Eligibility": "Check if a player is eligible for regions selection.",
    "GetPlayerAccountVngV1StatusByProductId": "Check cache to see if a player must register with the Vietnamese government; otherwise, check with VNG (via the Player Account Service).",
    "GetPlayerAccountVngV1StatusReady": "Whether VNG status endpoints are ready to handle requests (RSO access token exists)",
    "GetPlayerAffinityConfigV1Config": "The current plugin configuration.",
    "GetPlayerAffinityConfigV1Status": "The current plugin readiness.",
    "GetPlayerAffinityProductV1TokenByProduct": "Get the cached product affinity token.",
    "GetPlayerAffinityProductV2CachedAffinityByProduct": "Get the cached product affinity.",
    "GetPlayerAffinityProductV2TokenByProduct": "Get the player product affinity token.",
    "GetPlayerAffinityServiceV2CachedAffinityByService": "Get the cached service affinity.",
    "GetPlayerPreferencesV1DataByType": "Get decompressed and decoded player preferences information from a specified type from the Player Preferences service as string",
    "GetPlayerPreferencesV1DataJsonByType": "Get decompressed and decoded JSON player preferences information from a specified type from the Player Preferences service",
    "GetPlayerPreferencesV1DataJsonProductIdByProductIdTypeByType": "Get decompressed and decoded JSON player preferences information from a specified type from the Player Preferences service",
    "GetPlayerPreferencesV1DebugCallerIdMockId": "Checks the caller ID in use when APIs are called from Swagger",
    "GetPlayerPreferencesV1Ready": "True if the plugin is ready to be used",
    "GetPlayerReportingV1ReporterFeedback": "Provides a list of unacknowledged localized reporter feedback messages to show the player.",
    "GetPlayerReportingV1Status": "For Integration test & debugging use only.",
    "GetPlayerSessionLifecycleV1Session": "Get the login info of the player. Subscribe to this endpoint then make a POST to be notified when player has been logged in",
    "GetPlaystationAccountV1AuthorizationConsent": "Authorization consent status for PlayStation",
    "GetPlaystationAccountV1PlayerNickname": "Gets the player nickname of the Playstation Account for the player logged in the Playstation device",
    "GetPlaystationAccountV1PlayerNicknameWithoutConsent": "Gets the player nickname of the Playstation Account for the player logged in the Playstation device without checking for consent authorization",
    "GetPlaystationAccountV1User": "Retrieve Playstation profile and PSN account info",
    "GetPlaystationAccountV2Authorization": "Gets current Playstation authorization status",
    "GetPluginManagerV1Status": "Get the status of the plugin manager.",
    "GetPluginManagerV2Descriptions": "Get all plugin descriptions.",
    "GetPluginManagerV2DescriptionsByPlugin": "Get a plugin description.",
    "GetPluginManagerV2Plugins": "Get diagnostic information for all plugins.",
    "GetPluginManagerV2PluginsByPlugin": "Get diagnostic information for a single plugin.",
    "GetPrimeGamingV1Login": "Get the Amazon login status",
    "GetPrimeGamingV1Supported": "Check whether Prime Gaming is supported on the current platform",
    "GetPrivacyV1Tracking": "Retrieves privacy tracking settings and state.",
    "GetPrivateSettingsV1SettingsByUseridByKey": "For facilitating testing. Plugins should access private-settings via config key `private.user.<userid>.<key>`.",
    "GetPrivateSettingsV1TokenByUserid": "Only valid after a token has been restored or reset via PUT. Subscribe (or call) to this endpoint to receive updates on modifications to the private-settings for the given `userId`. Host applications should include this token with platform-specific data saves for the `userId`.",
    "GetProcessControlV1Process": "Returns information about the process-control.",
    "GetProcessControlV1ProcessClientDidRestart": "return true if client has restarted",
    "GetProcessControlV1ProcessClientRestarting": "Returns true if client is currently restarting, false otherwise",
    "GetProductIntegrationDepsV1AppRepairApplyRequestsProductsByProductIdPatchlinesByPatchlineId": "Returns the game repair request for the matching product/patchline",
    "GetProductIntegrationDepsV1AppUpdateApplyRequestsProductsByProductIdPatchlinesByPatchlineId": "Returns the game update request for the matching product/patchline",
    "GetProductIntegrationDepsV1AppUpdateStatusesProductsByProductIdPatchlinesByPatchlineId": "Get the current app update status for a given product and patchline",
    "GetProductIntegrationV1AppUpdateStatus": "Indicates the state of the primary patchline (or App Store app) for the running game.",
    "GetProductIntegrationV1DebugAppUpdateStatuses": "Debug endpoint to get a list of all the app update statuses",
    "GetProductIntegrationV1DebugAppUpdateStatusesBySessionId": "Debug endpoint to get an update status by session id",
    "GetProductIntegrationV1DetachedSessions": "Finds standalone external product sessions from other closed or active instances of this application",
    "GetProductIntegrationV1Locale": "Returns the locale the product should be running with. Prioritizes the product locale setting, followed by the SDK locale, and falling back to `en_US` if all else fails.",
    "GetProductIntegrationV1LocaleProductsByProductIdPatchlinesByPatchlineId": "Returns the locale of the product setting if in Standalone mode, or else returns the locale of the product/patchline setting in Riot Client",
    "GetProductIntegrationV1SignoutPermission": "Indicates if a product is allowed to request signout from the Riot Platform for all running products",
    "GetProductLauncherV1LaunchingFromXbgp": "return a boolean value if we should show the xbox linking modal which shows in the install and play flows",
    "GetProductLocalizationV1Data": "Returns loc plugin data - for triaging issues with bad or missing loc data",
    "GetProductLocalizationV1ProductsByProductIdPatchlinesByPatchlineIdTranslationsByLocale": "Returns translations for a specified patchline and locale or fetches them if they are not yet fetched",
    "GetProductLocalizationV1ProductsByProductIdTranslationsByLocale": "Returns translations for a specified product and locale or fetches them if they are not yet fetched",
    "GetProductMetadataV1Cookies": "Retrieves all cookies necessary to access any URI associated with any patchline.",
    "GetProductMetadataV1DebugMockDataBySource": "Retrieves the current set of mock data for the plugin.",
    "GetProductMetadataV1DebugMockMode": "Returns whether the plugin is in mock mode or not.",
    "GetProductMetadataV1DefinitionsProducts": "Retrieve brief definitions of all entitled products.",
    "GetProductMetadataV1DefinitionsProductsByProductId": "Retrieve a brief definition of a specific product.",
    "GetProductMetadataV1ProductsByProductIdPatchlinesByPatchlineIdSecondaryPatchlines": "Retrieves a list of secondary patchlines.",
    "GetProductMetadataV1ProductsByProductIdPatchlinesByPatchlineIdSecondaryPatchlinesBySecondaryPatchlineId": "Retrieves a secondary patchline within a patchline.",
    "GetProductMetadataV1PublishStatesByConfigType": "Retrieves the publish state of products of config type (public or player).",
    "GetProductMetadataV2Products": "Retrieves a full list of all entitled products and patchlines.",
    "GetProductMetadataV2ProductsByProductId": "Retrieves a single product and all its entitled patchlines.",
    "GetProductMetadataV2ProductsByProductIdPatchlinesByPatchlineId": "Retrieves a single patchline.",
    "GetProductMetadataV2ProductsByProductIdPlayerAffinityToken": "Retrieves player affinity token for a single product.",
    "GetProductMetadataV2RegionLocale": "Get the current region and locale.",
    "GetProductSessionV1DataPath": "Returns the standard data folder for your application",
    "GetProductSessionV1DataPathByPatchlineName": "Returns the standard logs folder for a given full patchline name.",
    "GetProductSessionV1ExternalSessions": "Get all sessions across products external to Riot Client. e.g. just games and not the UX product.",
    "GetProductSessionV1ExternalSessionsBySessionId": "Get the session for a specific session ID for a product external to Riot Client. e.g. just games and not the UX product.",
    "GetProductSessionV1HeartbeatBySessionId": "Deprecated. Please use POST /product-session/v2/heartbeat.",
    "GetProductSessionV1HostSession": "Fetches the session of the 'host app', if it exists for this platform.",
    "GetProductSessionV1HostSessionId": "Fetches the session ID of the 'host app', if it exists for this platform.",
    "GetProductSessionV1LogsPath": "Returns the standard logs folder for your application",
    "GetProductSessionV1LogsPathByPatchlineName": "Returns the standard logs folder for a given full patchline name.",
    "GetProductSessionV1SessionHeartbeatsBySessionId": "[Only intended to be called by product launchers, like Riot Client.] Get the heartbeat for a specific session ID.",
    "GetProductSessionV1Sessions": "Get all sessions across products.",
    "GetProductSessionV1SessionsBySessionId": "[Only intended to be called by product launchers, like Riot Client.] Get the session for a specific session ID.",
    "GetProductUpdateScannerV1ScanAndPatchNextScheduled": "Returns date-time of next scheduled scanning",
    "GetPublishingContentV1NewsFeed": "Returns the news feed content for the product details page for the productId",
    "GetPublishingContentV1PromoByProductId": "Returns the promotional publishing content for the product details page for the productId",
    "GetRcAuthV1XbgpLoginStatus": "Get the login status for player related to xbox game pass",
    "GetRestrictionV1LaunchRestrictedProducts": "Returns all product ids the player is launch restricted for",
    "GetRestrictionV1LaunchRestrictions": "Returns all launch restrictions for the logged in player",
    "GetRestrictionV1Ready": "Returns true when the plugin is ready. Consumers are expected to wait until the plugin is ready to request restrictions",
    "GetRiotClientAppCommandV1UriHandler": "Returns 204 if a URI handler is registered for this client, and 404 otherwise",
    "GetRiotClientAuthV1Authorization": "The player's RSO tokens",
    "GetRiotClientAuthV1HomeBaseCountry": "The player's home base country",
    "GetRiotClientAuthV1LoginCountry": "The player's login country",
    "GetRiotClientAuthV1RsoClient": "Fetch the SDK's RSO client details.",
    "GetRiotClientAuthV1Userinfo": "Public claims about the player",
    "GetRiotClientLifecycleStateV1StateByState": "Retrieve the contents a named state, along with last-acked serial numbers.",
    "GetRiotClientLifecycleStateV1StateByStateByParamSubscriberBySubscriber": "Retrieve the contents a named state, along with the last-acked serial number for a particular subscriber.",
    "GetRiotClientLifecycleStateV1StateByStateSubscriberBySubscriber": "Retrieve the contents a named state, along with the last-acked serial number for a particular subscriber.",
    "GetRiotClientLifecycleV1LeagueRegionElection": "Returns a structure containing the current state of League account election for the logged in account.",
    "GetRiotClientLifecycleV1ProductContext": "Returns the product context.",
    "GetRiotClientLifecycleV1ProductContextPhase": "Returns the product context phase.",
    "GetRiotClientLifecycleV1UxCommand": "Returns the current UX command that the default client UX app needs to process",
    "GetRiotLoginV1Config": "Returns the plugin config and enabled status",
    "GetRiotLoginV1Status": "Returns the current login state of the client",
    "GetRiotMessagingServiceV1MessageByA": "Util endpoint that responds with any cached messages for the resource based on component a",
    "GetRiotMessagingServiceV1MessageByAByB": "Util endpoint that responds with any cached messages for the aggregate resource based on components a:b",
    "GetRiotMessagingServiceV1MessageByAByBByC": "Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c",
    "GetRiotMessagingServiceV1MessageByAByBByCByD": "Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c:d",
    "GetRiotMessagingServiceV1MessageByAByBByCByDByE": "Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c:d:e",
    "GetRiotMessagingServiceV1MessageByAByBByCByDByEByF": "Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c:d:e:f",
    "GetRiotMessagingServiceV1MessagesByPath": "Subscription endpoint to receive async notifications of push messages with the given resource path.",
    "GetRiotMessagingServiceV1OutOfSync": "This is subscribe-only endpoint. Notification on this resource is triggered if RMS session is out of sync.",
    "GetRiotMessagingServiceV1Session": "Return the current session, if any.",
    "GetRiotMessagingServiceV1State": "Return all state",
    "GetRiotMessagingServiceV1User": "Returns the PUUID that this plugin is currently authenticated for",
    "GetRiotStatusV1ProductsByProductIdPatchlinesByPatchlineIdDeploymentsByDeployment": "Returns raw JSON service status information for a specific game service cluster",
    "GetRiotStatusV1Riotclient": "Returns raw JSON service status information for issues affecting multiple games",
    "GetRiotclientAffinity": "Get the current runtime affinity of the application.",
    "GetRiotclientAppName": "Application name without file extension",
    "GetRiotclientAppPort": "Get the TCP port number that the remoting server is listening on.",
    "GetRiotclientAuthToken": "Return the auth token used by the remoting server",
    "GetRiotclientBuildNumber": "Numeric build number for this application",
    "GetRiotclientCommandLineArgs": "Get the command line parameters for the application",
    "GetRiotclientGetRegionLocale": "Get the current region and locale.",
    "GetRiotclientMachineId": "Base64 encoded uuid identifying the user's machine",
    "GetRiotclientProductLocalesProductsByProductIdPatchlinesByPatchlineId": "Gets the locale of the product with the specified product and patchline id",
    "GetRiotclientRegionLocale": "Get the current region and locale.",
    "GetRiotclientSecondaryArgs": "Get the command line parameters that occur after the '--' delimiter",
    "GetRiotclientSessionId": "UUID identifying a user interaction session. This value is created when the user session begins (i.e. mobile game open, Riot Client starts). Multiple instances of the SDK may share the same session ID if they were launched by the same Riot Client user session.",
    "GetRiotclientSystemInfoV1BasicInfo": "Get basic system information: OS, memory, processor speed, and number of physical cores",
    "GetRiotclientTrace": "Retrieves a completed scheduler trace.",
    "GetRiotclientV1AppInfo": "Information about the application hosting the SDK",
    "GetRiotclientV1PlatformUser": "Information about the currently active platform user",
    "GetRiotclientZoomScale": "Gets the last known posted zoom-scale value.",
    "GetRiotclientappV1CommandLineArgs": "Returns the current list of command line arguments that are intended for Riot Client, that is, excluding secondary arguments that are intended for launched applications. The /riotclientapp/v1/new-args resource is updated when new command line arguments are added.",
    "GetRiotclientappV1IsXbgpRunning": "get if xbgp com server is running",
    "GetRiotclientappV1SecondaryArgs": "Returns the list of secondary arguments used for launched applications.",
    "GetRnetLifecycleV1LeagueRegionElection": "Returns a structure containing the current state of League account election for the logged in account.",
    "GetRnetLifecycleV1ProductContext": "Returns the product context",
    "GetRnetLifecycleV1ProductContextPhase": "Returns the phase of the product context",
    "GetRnetLifecycleV2UxCommand": "Returns the current UX command that the default client UX app needs to process",
    "GetRnetPftV1Surveys": "Gets the collection of surveys.",
    "GetRnetPftV1SurveysById": "Gets a specific survey by id.",
    "GetRnetProductRegistryV1BackgroundPatchingState": "Return the current background patching state",
    "GetRnetProductRegistryV1InstallStates": "Retrieves a map of product and patchline install states",
    "GetRnetProductRegistryV1InstallStatesProductsByProductIdPatchlinesByPatchlineId": "Retrieves the install state of the specified product and patchline",
    "GetRnetProductRegistryV1MoveInstallStatesProductsByProductIdPatchlinesByPatchlineId": "Get the status of a move request for a product, if it exists.",
    "GetRnetProductRegistryV4ActiveUpdates": "Get list of active updates",
    "GetRnetProductRegistryV4AvailableProductLocalesProductsByProductIdPatchlinesByPatchlineId": "Retrieves the list of available locales for the given product and patchline. If the patchline is unavailable (i.e. it is a private product, and you are not logged in), the list of available locales will be returned from the .product_settings.yaml file, if it exists.",
    "GetRnetProductRegistryV4InstallSettingsProductsByProductIdPatchlinesByPatchlineId": "Retrieves the settings for the particular product and patchline, stored in the .product_settings.yaml file.",
    "GetRnetProductRegistryV4InstallSettingsProductsByProductIdPatchlinesByPatchlineIdByPath": "Retrieves the settings for the particular product and patchline, stored in the .product_settings.yaml file.",
    "GetRnetProductRegistryV4PatchStatesOutOfDate": "Get list of out of date patchlines in format of list of { productId, patchlineId }",
    "GetRnetProductRegistryV4PatchStatesProductsByProductIdPatchlinesByPatchlineId": "Get patch status for patchline",
    "GetRnetProductRegistryV4PlayerProductsState": "Returns the current state of player products",
    "GetRnetProductRegistryV4PriorityPatchRequestsProductsByProductIdPatchlinesByPatchlineId": "Checks to see if a priority patch is in progress for the given product and patchline. Returns a boolean value.",
    "GetRnetProductRegistryV4Products": "Returns the list of installable games and configurations in hierarchical format",
    "GetRnetProductRegistryV4ProductsByProductIdPatchlinesByPatchlineId": "Returns a patchline by id",
    "GetRnetProductRegistryV4PublicProductsState": "Returns the current state of public products",
    "GetRnetSanitizerV1Status": "Gets the current status of the sanitizer plugin",
    "GetRnetSelfUpdateV1Enabled": "Get if self-update is enabled.",
    "GetRnetSelfUpdateV1Status": "Get the status of the self-update plugin.",
    "GetRsoAuthConfigurationV3AmrValuesSupported": "Returns a list of supported authentication strategies.",
    "GetRsoAuthConfigurationV3ClientId": "Returns the default client ID for this application. Only available once /v3/ready-state is marked as ready.",
    "GetRsoAuthConfigurationV3OpenidConfiguration": "Returns the raw RSO openid configuration. This resource will be notified when the configuration is retrieved initially and when it's updated.",
    "GetRsoAuthConfigurationV3PartnerAuthConfig": "Returns a partner auth config",
    "GetRsoAuthConfigurationV3ReadyState": "Returns the ready state of the rso-auth plugin",
    "GetRsoAuthV1AuthHintsHint": "Returns the current auth hint",
    "GetRsoAuthV1Authorization": "Retrieve a player's authorization status.",
    "GetRsoAuthV1AuthorizationAccessToken": "Retrieve a player's access token.",
    "GetRsoAuthV1AuthorizationError": "Retrieves any error received from RSO during the last authorization attempt.",
    "GetRsoAuthV1AuthorizationIdToken": "Retrieve a player's ID token.",
    "GetRsoAuthV1AuthorizationUserinfo": "Retrieve a player's userinfo.",
    "GetRsoAuthV1LogoutReason": "Returns latest logout reason.",
    "GetRsoAuthV1Session": "Retrieve the current session state.",
    "GetRsoAuthV1SessionPersistence": "Retrieves the persistence value of this session as a `BindingProperty` which can be serialized to local storage.",
    "GetRsoAuthV1StatusMessage": "Get the current RSO status message",
    "GetRsoAuthV1UserinfoByClientId": "Retrieve a player's userinfo using the implicit grant mode managed client-id and access-token.",
    "GetRsoAuthV2AuthorizationsByClientId": "Retrieve the authorization for the client-id.",
    "GetRsoAuthenticatorV1Authentication": "Get the current state of authentication.",
    "GetRsoAuthenticatorV1AuthenticationLinkStatus": "Get the current status of web linking.",
    "GetRsoAuthenticatorV1Config": "Get the current client config",
    "GetRsoMobileUiV1AccountPromotionStatus": "Get the current account promotion UI status",
    "GetRsoMobileUiV1DebugConfigurations": "Introspect the current configuration",
    "GetRsoMobileUiV1DeleteAccountStatus": "Retrieves the current status of the Account Deletion UI initiated via /rso-mobile-ui/v1/delete-account. Most useful for a client to track whether or not an Account Deletion flow was cancelled or completed.",
    "GetRsoMobileUiV1EulaStatus": "",
    "GetRsoMobileUiV1LoginStatus": "Get the current login UI status",
    "GetRsoMobileUiV1LoginStrategies": "",
    "GetRsoMobileUiV1RegionElection": "Fetches the state of the Region Election UI",
    "GetRsoMobileUiV1RegionElectionEligibility": "Check if a player is eligible for region election with UI",
    "GetRsoMobileUiV1RiotIdPromptStatus": "",
    "GetRsoMobileUiV1VngStatus": "",
    "GetRsoMobileUiV2Eula": "",
    "GetRsoMobileUiV2EulaStatus": "",
    "GetScdV1Cookies": "Returns the list of cookies",
    "GetScdV1Enabled": "Returns whether SCD communication is enabled.",
    "GetScdV1EnabledInConfig": "Returns whether SCD communication is enabled in confguration.",
    "GetSocialV1Blocklist": "Returns the consolidated block list combining Riot block list with the platform block lists",
    "GetSocialV1Friends": "When subscribed to this endpoint will notify with the entire friend list on every create/update/delete.",
    "GetSocialV1FriendsPatch": "For subscriptions only. On update and delete will notify with patches (changed elements only) rather than the full list. For a simple GET use the non-patch version of this URL.",
    "GetSocialV1Ready": "",
    "GetStartupConfigV1RegistryConfig": "Get the registry config for Riot Client on startup",
    "GetSwaggerV1ApiDocs": "Retrieves the API documentation",
    "GetSwaggerV2SwaggerJson": "Retrieves the API documentation",
    "GetSwaggerV3OpenapiJson": "Retrieves the API documentation",
    "GetSystemInfoV1Processes": "Returns all pids with cpu and memory usage data",
    "GetTelemetryV1ApplicationStartTime": "Gets the millisecond UNIX timestamp of when the application was started.",
    "GetTelemetryV1Availability": "Returns the availability for each telemetry ingest endpoint. This is not updated dynamically.",
    "GetTencentLauncherV1LoginInfo": "Retrieves the mSDK credentials from the Tencent Launcher",
    "GetTencentLauncherV1UpdateStatus": "Gets the current update status. This will be no-update-available until ACLSDK tells us that there is an update.",
    "GetVanguardV1Status": "Returns the state of the Vanguard installation.",
    "GetVoiceChatV1ActiveProduct": "Get the current active product",
    "GetVoiceChatV1AudioProperties": "Get current audio properties",
    "GetVoiceChatV1BlockListByProviderName": "Get the current Block List of a voice provider. Internal use only",
    "GetVoiceChatV1HeartbeatMetrics": "Retrieve a set of metrics about the voice chat plugin.",
    "GetVoiceChatV1PushToTalk": "Get voice chat push to talk configuration status",
    "GetVoiceChatV2DevicesCapture": "Get the list of available sound capture devices",
    "GetVoiceChatV2DevicesCapturePermission": "Returns true if the user has permission to use the microphone.",
    "GetVoiceChatV2DevicesRender": "Get the list of available sound render devices",
    "GetVoiceChatV2PushToTalkByProductName": "Get voice chat push to talk configuration status",
    "GetVoiceChatV2Sessions": "Get the list of all current voice sessions",
    "GetVoiceChatV2SessionsById": "Get session details",
    "GetVoiceChatV2SessionsBySessionIdParticipantsByParticipantId": "Get participant details",
    "GetVoiceChatV2Settings": "Get current voice chat settings",
    "GetVoiceChatV2State": "Get the connection state",
    "GetVoiceChatV3PushToTalkByProductName": "Get voice chat push to talk configuration state",
    "GetVoiceChatV3PushToTalkByProductNameBySessionId": "Get voice chat push to talk transmit state for a specific channel",
    "GetVoiceChatV3SessionsByProductName": "Get the list of all current voice sessions",
    "GetVoiceChatV3SessionsByProductNameById": "Get session details",
    "GetVoiceChatV3SessionsByProductNameBySessionIdParticipantsByParticipantId": "Get participant details",
    "GetVoiceChatV3SettingsByProductName": "Get current voice chat settings",
    "GetVoiceChatV4SessionsByProductName": "Get the list of all current voice sessions",
    "GetVoiceChatV4SessionsByProductNameById": "Get session details",
    "GetVoiceChatV4SessionsByProductNameBySessionIdParticipantsByParticipantId": "Get participant details",
    "GetXboxAccountV1AuthorizationConsent": "Authorization consent status for Xbox",
    "GetXboxAccountV1PlayerNickname": "Get user's Xbox gamertag",
    "GetXboxAccountV1PlayerNicknameWithoutConsent": "Get user's Xbox gamertag without checking authorization consent",
    "GetXboxAccountV2Authorization": "Gets current Xbox authorization status",
    "Help": "Returns information on available functions and types",
    "PatchChatV1Settings": "Update the account settings related to chat, partial update using only given fields",
    "PatchRnetPftV1SurveysBySurveyIdQuestionsByQuestionId": "Updates the specified question response.",
    "PatchRsoAuthV2AuthorizationsByClientId": "Updates an existing authorization for a client and requests a new authorization.",
    "PostAgentV1ConnectionInfo": "Method for the agent to inform Foundation about how to connect",
    "PostAgentV1RequestsCreateUriHandler": "Create URI handler under Registry to launch from riotclient:// uri",
    "PostAgentV1RequestsPrepareDirectoryPermissions": "Prepare permissions on a collection of directories for use by all users",
    "PostAgentV1RequestsPreparePermissions": "Prepare permissions on a collection of paths for use by all users",
    "PostAgentV1RequestsRegisterWatchPath": "[Mac] Register a watch path, which the agent will check for existence",
    "PostAgentV1RequestsThirdPartyDependency": "Queue a third party dependency for install",
    "PostAgentV1Session": "Start the agent",
    "PostAntiAddictionV1ProductsByProductIdAntiAddictionState": "Test API for triggering anti-addiction state for testing purposes",
    "PostAppleAccountV1Authorization": "Create authorization from the Sign In with Apple Account",
    "PostChatV1Debug": "set debug config",
    "PostChatV1DebugFinalizeInitialize": "debug finalize and initialize",
    "PostChatV1Resume": "Resume operations, connect to the chat service, and perform other operations specified on suspend",
    "PostChatV1SessionConnect": "force to chat to connect & allow reconnects",
    "PostChatV1SessionDebugTerminateByProduct": "Simulate termination of a product to the chat plugin",
    "PostChatV1SessionDisconnect": "force chat to disconnect & disallow reconnects",
    "PostChatV1SessionPlatform": "Update the chat session's League of Legends platform id",
    "PostChatV1Social": "Get game/product social data for building the friend list UI",
    "PostChatV1Suspend": "Suspend operations, disconnect from the chat service, and disallow reconnects",
    "PostChatV2SessionConnect": "force to chat to connect & allow reconnects",
    "PostChatV2SessionDebugTerminateByProduct": "Simulate termination of a product to the chat plugin",
    "PostChatV2SessionDisconnect": "force chat to disconnect & disallow reconnects",
    "PostChatV2SessionPlatform": "Update the chat session's League of Legends platform id",
    "PostChatV3Blocked": "Block a player",
    "PostChatV3Friendrequests": "Add friend request / invite friend",
    "PostChatV3Groups": "Create a friend group",
    "PostChatV3MeDebugJwt": "Simulate updating a game presence with jwt (server authoritative info)",
    "PostChatV4Blocked": "Block a player",
    "PostChatV4Friendrequests": "Add friend request / invite friend",
    "PostChatV4Groups": "Create a friend group",
    "PostChatV5Conversations": "Create or join a conversation",
    "PostChatV5Friendrequests": "Add friend request / invite friend",
    "PostChatV5Messages": "Send a new chat message to a room or individual",
    "PostChatV6Conversations": "Create or join a conversation",
    "PostChatV6ConversationsRead": "Mark conversation as read",
    "PostChatV6Friendrequests": "Add friend request / invite friend",
    "PostChatV6Messages": "Send a new chat message to a room or individual",
    "PostChatV7Conversations": "Create or join a conversation",
    "PostChatV7ConversationsRead": "Mark conversation as read",
    "PostChatboxV1ByIdWhispersByPuuidMessages": "Send a whisper to the specified puuid of the specified chatbox",
    "PostChatboxV1ChatboxesById": "",
    "PostChatboxV1ChatboxesByIdBroadcastsByChannelName": "Send a broadcast to the specified chatbox",
    "PostChatboxV1ChatboxesByIdChannels": "",
    "PostChatboxV1ChatboxesByIdMessages": "Send a message to the default channel of the specified chatbox",
    "PostChatboxV1ChatboxesByIdMessagesChannelsByChannelName": "Send a message to the specified channel of the specified chatbox",
    "PostChatboxV1ChatboxesByIdMessagesRead": "Mark all messages as read in a specified chatbox",
    "PostChatboxV1ChatboxesByIdMessagesWhispersByPuuidRead": "Mark messages as read for a specified whisper channel in a specified chatbox",
    "PostCookieJarV1Cookies": "Set new cookies.",
    "PostDataStoreV1InstallSettingsByPath": "Set the data for the specified key from the install settings.",
    "PostDataStoreV1PrivateSettingsByPath": "Set the data for the specified key from the private settings.",
    "PostDataStoreV1ProductSettingsProductsByProductIdPatchlinesByPatchlineId": "Set all settings for the specified product.",
    "PostDataStoreV1ProductSettingsProductsByProductIdPatchlinesByPatchlineIdByPath": "Set the data for the specified key from the settings for the specified product.",
    "PostDataStoreV1ReloadProductSettingsProductsByProductIdPatchlinesByPatchlineId": "Reload all settings for the specified product.",
    "PostDisambiguationV1MagicLink": "Retrieves the magic disambiguation link for the current auth'd account.",
    "PostEulaV1DebugAgreementForceRequirement": "Forces client into requiring acceptance",
    "PostFacebookAccountV1Authorization": "Create authorization from the Sign In with Facebook Account",
    "PostFirstPartyFulfillmentV1Fulfill": "Initiate a fulfillment attempt",
    "PostGaWarningV1DebugSimulateWarningByCategory": "Simulate sending a game-agnostic warning message to this player with a specific category. Endpoint not available in public builds.",
    "PostGameSessionV1Sessions": "Creates a request for GAPS login queue, bypass queue, and session services.",
    "PostGamecenterAccountV1Authorization": "Create authorization for the Game Center Account",
    "PostGoogleAccountV1Authorization": "Start an authorization request with Google.",
    "PostInfoRadiatorV1TimeSampleByPhaseNameEnd": "Mark the end of the time phase sample and send an event to Analytics Platform conforming to the `riotclient__TimeSample__v4` schema.",
    "PostInfoRadiatorV1TimeSampleByPhaseNameStart": "Track the start time for a time phase sample of interest. Call `/info-radiator/v1/time-sample/{phase}/end` to mark the end of the sample.",
    "PostJwtAuthenticatorV1Issue": "Issue a JWT using the provided JWKS service URL and the provided payload",
    "PostJwtAuthenticatorV1Verify": "Verify a JWT",
    "PostLoyaltyV1DebugSetLoyaltyResourceByPcbId": "Sets a loyalty resource for testing purposes - DEBUG ONLY",
    "PostMailboxV1Mail": "Returns a list of player's mail.",
    "PostMailboxV1MailByProductId": "Fetch mail for a player on behalf of a product.",
    "PostMobileProductRegistryV1BuildNumberByBuild": "[Deprecated] Set the current game build number.",
    "PostMobilePushV1Filter": "Create a filter for specific conversation to skip sending push notifications",
    "PostMobilePushV1Register": "Indicate that a product wants to register with push functionality",
    "PostMobilePushV1SubscribeTopic": "Subscribe to a specific topic",
    "PostNativeUxV1ShowAlert": "Display a native message to the player.",
    "PostNintendoAccountV1Authorization": "Gets authorization from the Nintendo Account of the player logged in the Nintendo Switch",
    "PostNintendoAccountV1NetworkServiceAccountidToken": "Get the Network Service Account ID (NSA) for the player logged in the Nintendo Switch",
    "PostNintendoAccountV2Authorization": "Gets authorization from the Nintendo Account of the player logged in the Nintendo or start authentication with native browser",
    "PostPayMobileV1PurchaseByProductId": "Purchase the given product",
    "PostPayMobileV1RequestExternalProducts": "Retrieve available products for purchase from set of product ids",
    "PostPayMobileV1RequestPricePointProducts": "Retrieve available price point products for purchase",
    "PostPayMobileV1RequestProducts": "Retrieve available products for purchase",
    "PostPayMobileV1SessionResume": "Resume the purchase session",
    "PostPaymentsV1InitializePurchase": "Begin the purchase flow, receiving the URL to a web client.",
    "PostPermissionsV1Request": "[WIP] Request current permission status of a given permission permissionId.",
    "PostPlatformUiV1Fre": "Enable FRE",
    "PostPlayerAccountAliasesPurchaseV1Aliases": "Sets a new purchased set of aliases for the player.",
    "PostPlayerAccountAliasesPurchaseV1Eligibility": "Check if a player is eligible for a free or paid name change.",
    "PostPlayerAccountAliasesV1Aliases": "Sets a new set of aliases for the player.",
    "PostPlayerAccountAliasesV1Eligibility": "Check if a player is eligible for a free name change.",
    "PostPlayerAccountAliasesV1GenerateTagline": "Returns a random tagline that is valid for the player.",
    "PostPlayerAccountAliasesV1Validity": "Checks a name for validity without saving it.",
    "PostPlayerAccountLoginHistoryV1History": "",
    "PostPlayerAccountLookupV1NamesetsForPuuid": "Retrieves the namesets for a single PUUID",
    "PostPlayerAccountLookupV1NamesetsForPuuids": "Retrieves the namesets for each PUUID provided",
    "PostPlayerAccountLookupV1PuuidsForConsoleids": "Retrieves the PUUIDs for each Console ID provided",
    "PostPlayerAccountPromotionV1Eligibility": "Check if a player is eligible for promotion.",
    "PostPlayerAccountPromotionV1Promotion": "Promote an account by providing missing details.",
    "PostPlayerAccountRegionsV1RegionByRegionCode": "assign the given region to player account",
    "PostPlayerAccountServiceV1LoginHistoryHistory": "",
    "PostPlayerAccountVngV1StatusByProductId": "Check with VNG (via the Player Account Service) to see if a player must register with the Vietnamese government.",
    "PostPlayerAccountVngV1WebUrlByProductId": "Create the external web url with the given redirect-uri",
    "PostPlayerAffinityAffinityV1Token": "Get a player affinity token.",
    "PostPlayerAffinityProductV1Token": "Get a player product affinity token, save it to the local cache, and notify subscribers. Retrieve from local cache on error.",
    "PostPlayerAffinityProductV2Token": "Get a player product affinity token, save the affinity to the local cache, and notify subscribers.",
    "PostPlayerAffinityProductV2TokenDebug": "DEBUG: For debugging subscribers. Save a new product affinity token to the local cache and notify subscribers.",
    "PostPlayerAffinityServiceV1Token": "Get a player service affinity token.",
    "PostPlayerAffinityServiceV2Token": "Get a player service affinity token and save the affinity to the local cache.",
    "PostPlayerReportingV1DebugSimulateReporterFeedbackByCategory": "Simulate sending a reporting feedback message to this player with a specific report category.",
    "PostPlayerReportingV1Report": "",
    "PostPlayerReportingV1ReporterFeedbackAck": "Acknowledges all reporter feedbacks.",
    "PostPlayerReportingV1ReporterFeedbackAckById": "Acknowledges a specific reporter feedback. Returns true if we can find a reporter feedback that matches that ID. Returns false if we can't.",
    "PostPlayerReportingV2Report": "",
    "PostPlayerSessionLifecycleV1Session": "Create a session used to retrieve common player authentication information.",
    "PostPlayerSessionLifecycleV1SessionRetry": "Retry the last known internal action causing the current error state.",
    "PostPlaystationAccountV1Authorization": "Gets authorization from the Playstation Network Account of the player logged in the Playstation Network",
    "PostPlaystationAccountV1User": "Tries to sign in a player",
    "PostPlaystationAccountV2Authorization": "Gets authorization from the Playstation Account of the player logged in the Playstation or start authentication with native browser",
    "PostPrimeGamingV1Login": "Initiate Login with Amazon to enable Prime Gaming",
    "PostPrivacyV1TrackingRequestPermission": "Ask the player for permission to track them via telemetry",
    "PostProcessControlV1ProcessClientRestarting": "Sets state that client is restarting - do not quit",
    "PostProcessControlV1ProcessQuit": "Quits the application.",
    "PostProcessControlV1ProcessQuitSwitchBackgroundMode": "Switch to background mode.",
    "PostProcessControlV1ProcessRestart": "Restarts the application.  Does nothing if there is already a waiting delayed restart.  Optionally accepts specific version to restart.",
    "PostProductIntegrationV1SettingsToken": "Generate a token that can be used to configure a standalone instance of the SDK running for a future instance of the given product",
    "PostProductIntegrationV1Signout": "Requests signout from the Riot Platform for all running products, if permitted for requesting product",
    "PostProductLauncherV1DefaultProduct": "Launches the default product. Returns the session ID.",
    "PostProductLauncherV1DefaultProductFlash": "Flash the default product",
    "PostProductLauncherV1DefaultProductFocus": "Brings the window of the default product into focus",
    "PostProductLauncherV1DefaultProductMinimize": "Minimize the default product",
    "PostProductLauncherV1LaunchingFromXbgp": "set if we are in a xbgp play flow that will display the linking modal",
    "PostProductLauncherV1PartnerProduct": "Launches the partner product. Returns the session ID.",
    "PostProductLauncherV1ProductsByProductIdPatchlinesByPatchlineId": "Launch a non-internal product-patchline (e.g. a game). Returns the session ID.",
    "PostProductLocalizationV1Translate": "DEPRECATED - Returns a translation string(s) for given keys, if found, in Riot Client's locale",
    "PostProductLocalizationV2Translate": "Returns a translation string(s) for given keys, if found",
    "PostProductSessionV1HostSession": "Handles creation of a new session for the 'host app'",
    "PostProductSessionV1SessionsBySessionId": "Handles creation of a new session.",
    "PostProductSessionV2Heartbeat": "Periodic heartbeat made by products to update Riot Client with state of gameplay, and to verify connectivity to Riot Client. \n\nSessionId is derived from 'session' HTTP header, or websocket authentication.",
    "PostProductSessionV2HeartbeatBySessionId": "Periodic heartbeat made by products to update Riot Client with state of gameplay, and to verify connectivity to Riot Client. ",
    "PostProductSessionV2HeartbeatInternalBySessionId": "Internal endpoint for updating the heartbeat of an existing session.",
    "PostRcAuthV1XbgpUpdateLoginToken": "Update the player login-token",
    "PostRcInfoRadiatorV1TimeSampleByPhaseNameEnd": "Mark the end of the time phase sample and send an event to Analytics Platform conforming to the `riotclient__TimeSample__v4` schema.",
    "PostRcInfoRadiatorV1TimeSampleByPhaseNameStart": "Track the start time for a time phase sample of interest. Call `/info-radiator/v1/time-sample/{phase}/end` to mark the end of the sample.",
    "PostRiotClientAppCommandV1DebugUseLocalUriHandler": "Sets uri handler to use riotclient-local for testing",
    "PostRiotClientAppCommandV1UriHandler": "Attempts to configure a URI handler for this client, elevating if necessary",
    "PostRiotClientLifecycleV1Hide": "Hide the UX.",
    "PostRiotClientLifecycleV1LeagueRegionElection": "Sets League account election information for the current account -- specifically, 'selectedRegions'.",
    "PostRiotClientLifecycleV1Quit": "Quit Riot Client. If any games are running show the games-running exit-dialog.",
    "PostRiotClientLifecycleV1QuitSwitchBackgroundMode": "Quit Riot Client Full mode and switch to the Background mode. If any games are running show the games-running exit-dialog.",
    "PostRiotClientLifecycleV1Restart": "Restarts Riot Client. If any games are running show the games-running exit-dialog.",
    "PostRiotClientLifecycleV1Show": "Show the UX.",
    "PostRiotMessagingServiceV1Acknowledge": "acknowledge RMS message received",
    "PostRiotMessagingServiceV1Connect": "Schedule a connect request to RMS.",
    "PostRiotMessagingServiceV1Entitlements": "Update session entitlements token",
    "PostRiotMessagingServiceV1Reconnect": "Schedule a reconnect request to RMS. For debug purposes only.",
    "PostRiotMessagingServiceV1SimulateMessage": "Simulate an RMS message. For debug purposes only.",
    "PostRiotMessagingServiceV1SwitchServers": "Schedule a switching server request to RMS. For debug purposes only.",
    "PostRiotMessagingServiceV1TokenRefresh": "Schedule a token refresh request to RMS. For debug purposes only.",
    "PostRiotMessagingServiceV2SimulateMessage": "Simulate an RMS message. For debug purposes only.",
    "PostRiotStatusV1DebugSetRiotclientPatchlineByPatchlineId": "Returns raw JSON service status information for issues affecting multiple games",
    "PostRiotclientAffinity": "Sets the current runtime affinity of the application.",
    "PostRiotclientNewArgs": "Endpoint for passing in new data.",
    "PostRiotclientSetRegionLocale": "Update the region and locale.",
    "PostRiotclientShowLogs": "Open explorer to log files.",
    "PostRiotclientShowSwagger": "Open swagger in the default browser.",
    "PostRiotclientZoomScale": "Handles changing the zoom scale value.",
    "PostRiotclientappV1NewArgs": "Adds new command line arguments for Riot Client.",
    "PostRnetLifecycleV1DefaultProductLaunch": "Launch the currently configured default product.",
    "PostRnetLifecycleV1LeagueRegionElection": "Sets League account election information for the current account -- specifically, 'selectedRegions'.",
    "PostRnetPftV1RequestSurvey": "Post a game event and see if you get a survey.",
    "PostRnetPftV1SurveysByIdClose": "Notifies the backend that the player closed the survey before completing it.",
    "PostRnetPftV1SurveysByIdPopout": "Notifies the backend that the player opened an external survey.",
    "PostRnetPftV1SurveysByIdSubmit": "Submits the given survey to the PFT service.",
    "PostRnetProductRegistryV1AvailableDiskSpace": "Retrieves the available disk space at a specified path. Will return the available disk space in bytes. All paths should use '/' as the delimiter",
    "PostRnetProductRegistryV1DirectorySize": "Retrieves the size of the entire directory of the specified path. Will return the directory size in bytes. All paths should use '/' as the delimiter",
    "PostRnetProductRegistryV4PatchRequestsProductsByProductIdPatchlinesByPatchlineIdCancelDependencies": "Cancels dependency install and mark the patching as cancelled",
    "PostRnetProductRegistryV4PatchRequestsProductsByProductIdPatchlinesByPatchlineIdInstallDependencies": "Installs dependencies for the specified product/patchline combo.",
    "PostRnetProductRegistryV4PatchRequestsProductsByProductIdPatchlinesByPatchlineIdRetryDependencies": "Retry failed dependency installs, if any.",
    "PostRnetSanitizerV1ContainsSanitized": "Determine if the request has a sanitized word",
    "PostRnetSanitizerV1Sanitize": "Sanitize the input text(s)",
    "PostRsoAuthV1AuthHintsHint": "Creates a test auth hint",
    "PostRsoAuthV1AuthorizationGas": "Log the user in with username, password and platformId.",
    "PostRsoAuthV1AuthorizationRefresh": "Force a refresh of the RSO tokens.",
    "PostRsoAuthV1AuthorizationSimulateError": "Set simulated error response code for logging in",
    "PostRsoAuthV1AuthorizationUserinfo": "Retrieve a player's userinfo from RSO.",
    "PostRsoAuthV1DeviceId": "Retrieves device ID configuration.",
    "PostRsoAuthV1KeyRequest": "Generates an authorization key from an existing authorization. An 'authorization key' is a code and code verifier encoded together.",
    "PostRsoAuthV1StatusMessage": "Update the RSO auth status",
    "PostRsoAuthV1UserinfoByClientId": "Refresh a player's userinfo using the implicit grant mode managed client-id and access-token.",
    "PostRsoAuthV1UserinfoRefresh": "This internal endpoint can be used to force a refresh of all current UserInfos.\nThis is an expensive operation and should be only used if necessary.",
    "PostRsoAuthV2Authorizations": "Create a new authorization request, or retrieves authorization for an existing request.",
    "PostRsoAuthV2AuthorizationsByClientId": "Refresh an authorization for a given client",
    "PostRsoAuthV2Config": "Override the default RSO configuration",
    "PostRsoAuthV2PartnerAuth": "Log the user in with any of the accepted partner credentials",
    "PostRsoAuthV3PartnerAuth": "Log the user in with any of the accepted partner credentials",
    "PostRsoAuthenticatorV1AuthenticationApple": "Authenticate a player with apple open id token.",
    "PostRsoAuthenticatorV1AuthenticationCode": "Create a new authentication session with code from a previous federated authentication.",
    "PostRsoAuthenticatorV1AuthenticationFacebook": "Authenticate a player with facebook access token.",
    "PostRsoAuthenticatorV1AuthenticationGamecenter": "Authenticate a player with gamecenter credentials.",
    "PostRsoAuthenticatorV1AuthenticationGoogle": "Authenticate a player with google open id token.",
    "PostRsoAuthenticatorV1AuthenticationMultifactor": "Linking player's social to their multifactor enabled riot account.",
    "PostRsoAuthenticatorV1AuthenticationNintendo": "Authenticate a player with nintendo open id tokens.",
    "PostRsoAuthenticatorV1AuthenticationPlaystation": "Authenticate a player with Playstation id token.",
    "PostRsoAuthenticatorV1AuthenticationRedirect": "Redirect the current authentication to the given url",
    "PostRsoAuthenticatorV1AuthenticationRiotIdentityComplete": "Complete a new Riot Identity authentication session.",
    "PostRsoAuthenticatorV1AuthenticationRiotIdentitySignupComplete": "Complete a new Riot Identity Signup authentication session.",
    "PostRsoAuthenticatorV1AuthenticationRiotIdentitySignupStart": "Start a new Riot Identity Signup authentication session.",
    "PostRsoAuthenticatorV1AuthenticationRiotIdentityStart": "Start a new Riot Identity authentication session.",
    "PostRsoAuthenticatorV1AuthenticationXbox": "Authenticate a player with Xbox xsts token and user hash",
    "PostRsoAuthenticatorV1Login": "Completes authentication given a login token",
    "PostRsoAuthenticatorV1WebAuthenticationUrl": "Provides a url for performing a web based authentication",
    "PostRsoMobileUiV1AccountPromotionInitiate": "",
    "PostRsoMobileUiV1AuthenticationRedirect": "",
    "PostRsoMobileUiV1DebugBrowserRedirect": "",
    "PostRsoMobileUiV1DebugSdk": "",
    "PostRsoMobileUiV1DebugWebviewDecideNavigationPolicy": "",
    "PostRsoMobileUiV1DebugWebviewJavascriptMessage": "",
    "PostRsoMobileUiV1DebugWebviewLaunch": "Debug endpoint to detect page launches",
    "PostRsoMobileUiV1DebugWebviewLoadErrorPage": "",
    "PostRsoMobileUiV1DebugWebviewSimulateOnfinish": "Simulates the callback from the web view closing",
    "PostRsoMobileUiV1DeleteAccount": "Initiates the Account Deletion UI to delete a player's Riot account. Be careful, this functionality is destructive - making it difficult, if not impossible, to recover an account.",
    "PostRsoMobileUiV1EulaInitiate": "",
    "PostRsoMobileUiV1FederatedLogin": "",
    "PostRsoMobileUiV1InternalDisplayErrorPage": "",
    "PostRsoMobileUiV1IosAuthRedirect": "iOS application open url event",
    "PostRsoMobileUiV1LoginInitiate": "",
    "PostRsoMobileUiV1RegionElection": "Initiates the display of the Region Election UI",
    "PostRsoMobileUiV1RiotIdPromptInitiate": "",
    "PostRsoMobileUiV1ShowGameOutOfDate": "Show a native dialog displaying game is out of date and redirecting user to app store",
    "PostRsoMobileUiV1VngProfileByProductId": "",
    "PostRsoMobileUiV1VngRegisterByProductId": "",
    "PostRsoMobileUiV2EulaAgreement": "",
    "PostRsoMobileUiV2EulaInitiate": "",
    "PostScdV1Enabled": "Activates communication to the SCD service.",
    "PostScdV1UrlPatternsTest": "Returns whether a url refers to SCD-protected content",
    "PostSocialV1Initialize": "",
    "PostTelemetryV1CommonDataByKey": "Adds/updates a common data key and value to be sent with every subsequent event.",
    "PostTelemetryV1EventsByEventType": "Adds a new event to be sent to Dradis and/or other analytics/monitoring data sinks. All events will have their eventType prefixed",
    "PostTelemetryV1SingularEventByEventName": "Sends an event to Singular (hits a derivative of the Singular s2s 'event' endpoint).",
    "PostTelemetryV1SingularSession": "Starts a session with Singular (hits the Singular s2s 'launch' endpoint).",
    "PostTelemetryV2MetadataBySchemaPrefixByMetadataEntityByPropertyName": "Sets the metadata to automatically apply to a type of analytics platform event",
    "PostTencentLauncherV1DebugForceLoad": "Force-load the ACLSDK",
    "PostTencentLauncherV1Login": "Initialize RSO login using mSDK credentials from the Tencent Launcher",
    "PostTencentLauncherV1RepairOnShutdown": "Initializes repair on shutdown flow in the ACLOS",
    "PostVanguardV1CheckVanguardService": "Check if Vanguard is running",
    "PostVoiceChatV1BlockListUsers": "Adds a list of users to the voice provider block list",
    "PostVoiceChatV1DebugSimulate": "Simulate provider/player behavior for testing.",
    "PostVoiceChatV1DebugWriteCsrDataToFile": "Write CSR data for a particular channel and product to the provided filepath",
    "PostVoiceChatV1InitializeProviderByProductName": "Eagerly initialize a provider. Needed for device settings to update before a first session is established",
    "PostVoiceChatV1PushToTalkCheckAvailable": "Use to check if we have permissions to start push to talk",
    "PostVoiceChatV2PushToTalkCheckAvailable": "Use to check if we have permissions to start push to talk",
    "PostVoiceChatV2Sessions": "Join a session with game-specific JWT token",
    "PostVoiceChatV3SessionsByProductName": "Join a session with game-specific JWT token",
    "PostVoiceChatV4SessionsByProductName": "Join a session with game-specific JWT token",
    "PostXboxAccountV1Authorization": "Gets authorization from the Xbox Account of the player logged in the Xbox",
    "PostXboxAccountV1User": "Sign in user on Xbox",
    "PostXboxAccountV2Authorization": "Gets authorization from the Xbox Account of the player logged in the Xbox or start authentication with native browser",
    "PutAgeRestrictionV1DebugAgeRestrictionProductsByProductId": "DEBUG: Sets the age-restriction state for the productId",
    "PutAppCommandSubmit": "Used to coerce an application to invoke a registered command.",
    "PutChatV1DeviceSettings": "Update the device settings related to chat",
    "PutChatV1Settings": "Update the account settings related to chat, complete overwrite",
    "PutChatV2Me": "Put/update a multi-game presence for a specific product. This implicitly sets the product's chat session state to `active`.",
    "PutChatV2SessionState": "edit session state for specific product",
    "PutChatV3Friends": "Update a friend",
    "PutChatV3Groups": "Update a friend group",
    "PutChatV3GroupsOrder": "Order the friend groups",
    "PutChatV3Me": "Put/update a multi-game presence for a specific product. This implicitly sets the product's chat session state to `active`.",
    "PutChatV4Friends": "Update a friend",
    "PutChatV4Groups": "Update a friend group",
    "PutChatV4GroupsOrder": "Order the friend groups",
    "PutChatV5Conversations": "Edit conversation",
    "PutChatV5Participants": "edit a player to mute or unmute them, across all conversations",
    "PutChatV6Conversations": "Edit conversation",
    "PutChatV6ConversationsActive": "Set active conversation",
    "PutChatV7Conversations": "Edit conversation",
    "PutChatV7ConversationsActive": "Set active conversation",
    "PutClientConfigV1Authorization": "Updates the authorization information for this plugin. Pushed by the ClientConfigDepInjector. If this is the first authorization of session, triggers an initial fetch of player configuration.",
    "PutClientConfigV1RefreshConfigStatus": "Refresh config status.",
    "PutClientConfigV1Sessions": "Updates the cached sessions.",
    "PutClientConfigV2EntitlementsToken": "Accepts updated entitlements token. Pushed by the ClientConfigDepInjector. Changes in entitlements trigger refresh of player configuration.",
    "PutClientConfigV2NamespaceChanges": "Refresh config status.",
    "PutClientFeatureFlagsV1DebugMockData": "Sets the current set of mock data for the plugin.",
    "PutClientFeatureFlagsV1DebugMockMode": "Enters mock mode, which allows using fake client-config data.",
    "PutClientFeatureFlagsV1DebugOverridesFlagsByNamespaceByFlag": "Forcibly sets the value of a particular feature flag.",
    "PutEulaV1AgreementAcceptance": "Accepts the most recent EULA for the current user.",
    "PutEulaV1AgreementReject": "Rejects the most recent EULA for the current user.",
    "PutEulaV1DebugAgreementShortAgreementContent": "Simulate short agreement content. This is disabled in public builds.",
    "PutEulaV1ProductContext": "Set the current product context.",
    "PutExternalMessageHandlerV1Emulate": "Emulate a message and send it to the event bus:'MessageId': Type of the message. (e.g. install_game, patch_game, launch_game)'MessageData': The message content",
    "PutExternalMessageHandlerV1PatchRequestProductsByProductIdPatchlinesByPatchlineIdPause": "Notify patch request has been paused",
    "PutExternalMessageHandlerV1PatchRequestProductsByProductIdPatchlinesByPatchlineIdResume": "Notify patch request has been resumed",
    "PutGaRestrictionV1DebugCallerIdMockId": "Sets the caller ID to use when calling this plugin from Swagger",
    "PutGaRestrictionV1DebugPenaltyNotificationsDataByMessageId": "Add some arbitrary penalty notification. Uses your current callerId's productId. Note that if you acknowledge or delete this message, the plugin will still attempt to tell Mailbox, which may result in an error log.",
    "PutGaRestrictionV1DebugTimeByMillisSinceEpoch": "Mock the current time. This can help you debug if the plugin automatically deletes messages. Note that we only try to delete messages when we receive or acknowledge messages. Uses milliseconds since epoch.",
    "PutGaRestrictionV1PenaltyNotificationsByMessageId": "Marks a penalty notification as read. Read messages will still be accessible, but they don't need to be immediately displayed to the player.",
    "PutGaWarningV1DebugCallerIdMockId": "Sets the caller ID to use when calling this plugin from Swagger",
    "PutGameSessionV1DebugCallerIdMockId": "Sets the caller ID to use when calling this plugin from Swagger",
    "PutInfoRadiatorV1CustomHeartbeatMetricByName": "Create or update the value of a custom heartbeat metric",
    "PutMailboxV1DebugCallerIdMockId": "Sets the caller ID to use when calling this plugin from Swagger",
    "PutMailboxV1MailState": "Update the state of a message as read or acknowledged",
    "PutPatchProxyV1PatchJobsCancelActive": "Cancel the active job from the scheduler and deprioritize it to the end of the queue.",
    "PutPatchProxyV1PatchJobsProductsByProductIdPatchlinesByPatchlineId": "Add a patch job to the scheduler.",
    "PutPatchProxyV1PatchJobsStart": "Start the patching process in order of the current priority queue.",
    "PutPatchProxyV1PatchJobsStop": "Stop the patching process.",
    "PutPatchProxyV1PriorityPatchJobsProductsByProductIdPatchlinesByPatchlineId": "Starts a priority patch request for a product, which will complete patching before any automatic patching operation.",
    "PutPatchV1Configuration": "Configure plugin settings such as cache size and location",
    "PutPatchV1InstallsByInstallId": "Register a new install",
    "PutPatchV1InstallsByInstallIdRequestsPatch": "Submit patch request for install",
    "PutPatchV1InstallsByInstallIdRequestsPreview": "Submit preview request for install",
    "PutPatchV1InstallsByInstallIdRequestsRepair": "Triggers a repair operation",
    "PutPatchV1InstallsByInstallIdRequestsSeed": "Submit seed request for install",
    "PutPlatformLoginV1Config": "Allows to modify the plugin config (e.g. enable or disable login persistence)",
    "PutPlayRestrictionsV1DebugCallerIdMockId": "Sets the caller ID to use when calling this plugin from Swagger",
    "PutPlayRestrictionsV1Restrictions": "Set the play restrictions for the SDK",
    "PutPlayerAccountLoginHistoryV1DebugCache": "",
    "PutPlayerAffinityShard": "Sets the current",
    "PutPlayerPreferencesV1DataByType": "Puts any string for the specified type into the Player Preferences service",
    "PutPlayerPreferencesV1DataJsonByType": "Puts any valid JSON object for the specified type into the Player Preferences service",
    "PutPlayerPreferencesV1DataJsonProductIdByProductIdTypeByType": "Puts any valid JSON object for the specified type into the Player Preferences service",
    "PutPlayerPreferencesV1DebugCallerIdMockId": "Sets the caller ID to use when calling this plugin from Swagger",
    "PutPlayerSessionLifecycleV1LoginStrategy": "Set a Login Strategy for the current session.",
    "PutPlayerSessionLifecycleV1Session": "Update a session used to retrieve common player authentication information. Remember to pass all of the session config values on update. Use `PUT /player-session-lifecycle/v1/login-strategy` when updating the login strategy.",
    "PutPlaystationAccountV1AuthorizationConsent": "Update authorization consent status for PlayStation",
    "PutPrivateSettingsV1SettingsByUseridByKey": "Update an individual private setting configuration. Upon success, configuration data within `private.user.<userid>.<key>` is updated and platform-specific settings 'save' systems are notified.",
    "PutPrivateSettingsV1TokenByUserid": "Submit settings token after loading last-known saved data for the current device user.\nIf no save data or token exists for user, submit an no token or an empty string to reset private-settings for user.",
    "PutProductIntegrationDepsV1AppRepairApplyRequestsProductsByProductIdPatchlinesByPatchlineId": "Applies a game repair by opening Riot Client and repairing the game (on Desktop).",
    "PutProductIntegrationDepsV1AppUpdateApplyRequestsProductsByProductIdPatchlinesByPatchlineId": "Applies a game update by opening Riot Client and patching the game (on Desktop) or exiting to the App Store (on Mobile).",
    "PutProductIntegrationDepsV1AppUpdateStatusesProductsByProductIdPatchlinesByPatchlineId": "Push the current app update status for a given product and patchline",
    "PutProductIntegrationV1AppRepairApply": "Applies a game repair by opening Riot Client and repairing the game once the game is closed (on Desktop).",
    "PutProductIntegrationV1AppUpdateApply": "Applies a game update by opening Riot Client and patching the game (on Desktop) or exiting to the App Store (on Mobile).",
    "PutProductIntegrationV1DebugAppRepairApply": "Debug endpoint to apply a repair by session id",
    "PutProductIntegrationV1DebugAppUpdateApply": "Debug endpoint to apply an update by session id",
    "PutProductIntegrationV1DebugAppUpdateStatusesBySessionId": "Debug endpoint to update the app's update status by session id",
    "PutProductIntegrationV1Locale": "Applies the locale specified in the body to the product currently running. Locale should be in language_country format. for example, zh_CN or ko_KR",
    "PutProductIntegrationV1LocaleProductsByProductIdPatchlinesByPatchlineId": "Applies the locale specified in the body to the product and patchline provided. Locale should be in language_country format. for example, zh_CN or ko_KR",
    "PutProductLauncherV1ProductsByProductIdPatchlinesByPatchlineId": "Recover a session for a product that is already running, but Riot Client Services doesn't know about since it just started up.",
    "PutProductMetadataV1DebugMockDataBySource": "Sets the current set of mock data for the plugin.",
    "PutProductMetadataV1DebugMockMode": "Enters mock mode, which allows using mock product and patchline data.",
    "PutProductUpdateScannerV1ScanAndPatch": "Scans the patchlines that are entitled to the player and make patch requests",
    "PutProductUpdateScannerV1ScanAndPatchRoutine": "Starts the routine Update Scanner to check for product updates and make patch requests",
    "PutProductUpdateScannerV1ScanAndPatchRoutineResume": "Resumes the routine Update Scanner",
    "PutProductUpdateScannerV1ScanAndPatchRoutineStop": "Stops the routine Update Scanner",
    "PutReferenceV1Echo": "Returns the user input string",
    "PutRiotClientLifecycleStateV1StateByStateByParamSubscriberBySubscriberSerialNumber": "Sets a serial number for a parameterized state.",
    "PutRiotClientLifecycleStateV1StateByStateSubscriberBySubscriberSerialNumber": "Sets a single named serial number.",
    "PutRiotClientLifecycleV1ProductContext": "Sets the product and patchline to launch.",
    "PutRiotClientLifecycleV1UxCommand": "Sets a new UX command that the default client UX app should process",
    "PutRiotLoginV1Config": "Allows to modify the plugin config (e.g. enable or disable login persistence)",
    "PutRiotclientProductLocalesProductsByProductIdPatchlinesByPatchlineId": "Sets the locale of the product with the specified installId",
    "PutRiotclientRegionLocale": "Update the region and locale.",
    "PutRiotclientSplash": "Show the splash screen.",
    "PutRiotclientUxLoadComplete": "Ux notification that it has completed loading the main window.",
    "PutRiotclientV1AuthTokensByAuthToken": "Register an auth token.  This is any alpha-numeric string that will be used as a password with the `riot` user when making requests.",
    "PutRiotclientV1PlatformUser": "Update the currently active platform user",
    "PutRnetLifecycleV1Hide": "Hide the UX.",
    "PutRnetLifecycleV1ProductContext": "Sets the product to launch, following the product context-flow of checking auth, update, and patch state.",
    "PutRnetLifecycleV1Quit": "Quit Riot Client. If any games are running hide Riot Client instead.",
    "PutRnetLifecycleV1Restart": "Restarts Riot Client. If any games are running show the games-running exit-dialog.",
    "PutRnetLifecycleV2UxCommand": "Sets a new UX command that the default client UX app should process",
    "PutRnetProductRegistryV1MoveInstallRequestsProductsByProductIdPatchlinesByPatchlineId": "Request to move the install for a product.",
    "PutRnetProductRegistryV1VerifyInstallProductsByProductIdPatchlinesByPatchlineId": "Verify that a specific product's patchline is installed via patch plugin",
    "PutRnetProductRegistryV4InstallSettingsProductsByProductIdPatchlinesByPatchlineId": "Sets the specified settings for the particular product and patchline, to the .product_settings.yaml file. Settings that are not specified in the body argument are not modified.",
    "PutRnetProductRegistryV4InstallSettingsProductsByProductIdPatchlinesByPatchlineIdByPath": "Sets the specified settings for the particular product and patchline, to the .product_settings.yaml file. Settings that are not specified in the body argument are not modified.",
    "PutRnetProductRegistryV4PatchRequestsProductsByProductIdPatchlinesByPatchlineId": "Submit a request to start patching the patchline.",
    "PutRnetProductRegistryV4PriorityPatchRequestsProductsByProductIdPatchlinesByPatchlineId": "Starts a priority patch request for a product, which will complete patching before any automatic patching operation.",
    "PutRnetProductRegistryV4ProductsByProductIdPatchlinesByPatchlineId": "Updates a patchline resource with these possible properties: 'patching-policy': describes whether a patchline is kept up-to-date automatically by Riot Client (auto), or if the user must choose when to patch the patchline (manual); 'patching-ask-policy': describes whether we should ask the user whether they want to keep the patchline automatically up-to-date after the first launch. This will be 'ask' if the user has never been asked before, and set to 'never' once they have been asked.",
    "PutRnetProductRegistryV4ProductsByProductIdPatchlinesByPatchlineIdRootPath": "Updates product root path and patching resources for the specified product/patchline ID",
    "PutRnetProductRegistryV4ProductsByProductIdPatchlinesByPatchlineIdShortcut": "Create or update the shortcut for a product, optionally at a specific path",
    "PutRnetProductRegistryV4ProductsByProductIdPatchlinesByPatchlineIdUninstallKey": "create or update the uninstall key for a product",
    "PutRnetProductRegistryV4RepairRequestsProductsByProductIdPatchlinesByPatchlineId": "Notify Product Registry that a user has requested to repair a product.",
    "PutRnetProductRegistryV4SessionPatchLockProductsByProductIdPatchlineByPatchlineId": "Acquires a shared session patch lock for the product-patchline",
    "PutRnetSelfUpdateV1Enabled": "Enable or disable self-update. No-ops if permanently disabled (e.g. disabled by command line flags).",
    "PutRnetSelfUpdateV1Repair": "Trigger a repair because there was an error updating.",
    "PutRnetSelfUpdateV1Retry": "Retry self-update because there was an error updating",
    "PutRsoAuthV1SessionCredentials": "Update an authentication session with credentials to login.",
    "PutRsoAuthV1SessionLoginToken": "Update an authentication session with a token from rso-authenticator.",
    "PutRsoAuthV1SessionMultifactor": "Update an authentication session with multifactor input to complete login.",
    "PutRsoAuthV1SessionPersistence": "Takes a `BindingProperty` and restores the session state.",
    "PutRsoAuthV1SessionReauthentication": "Update an authentication session with player password to reauthenticate.",
    "PutRsoAuthV1SessionSignupToken": "Update an authentication session with a token from signup-api.",
    "PutRsoAuthenticatorV1Authentication": "Update the current prompt for authentication.",
    "PutRsoAuthenticatorV1AuthenticationLinkApple": "Link the current authentication with an existing account with apple open id token.",
    "PutRsoAuthenticatorV1AuthenticationLinkCode": "Link the current authentication with a code from a previous federated authentication.",
    "PutRsoAuthenticatorV1AuthenticationLinkFacebook": "Link the current authentication with an existing account with facebook access token.",
    "PutRsoAuthenticatorV1AuthenticationLinkGamecenter": "Link the current authentication with an existing account with gamecenter credentials.",
    "PutRsoAuthenticatorV1AuthenticationLinkGoogle": "Link the current authentication with an existing account with google open id token.",
    "PutRsoAuthenticatorV1AuthenticationLinkNintendo": "Link the current authentication with an existing account with nintendo open id tokens.",
    "PutRsoAuthenticatorV1AuthenticationLinkPlaystation": "Link the current authentication with an existing account with playstation authorization code.",
    "PutRsoAuthenticatorV1AuthenticationLinkResendCode": "Request that a code for linking be resent.",
    "PutRsoAuthenticatorV1AuthenticationLinkRiotIdentity": "Link the current authentication with an existing account with riot identity.",
    "PutRsoAuthenticatorV1AuthenticationLinkRso": "Link the current authentication with an existing RSO account with access and id tokens.",
    "PutRsoAuthenticatorV1AuthenticationLinkXbox": "Link the current authentication with an existing account with xbox tokens.",
    "PutRsoMobileUiV1RegionElection": "Programmatically update the state of the Region Election UI",
    "PutStartupConfigV1RegistryConfig": "Set the registry config for Riot Client on startup",
    "PutSystemInfoV1RoutineResume": "Resumes the routine to pull SystemInfo",
    "PutSystemInfoV1RoutineStart": "Starts the routine to pull SystemInfo and send a warning to riot client if CPU or memory usage is high",
    "PutSystemInfoV1RoutineStop": "Stops the routine to pull SystemInfo",
    "PutSystemTrayV1NativeNotificationShow": "Display a native notification tooltips in the systray",
    "PutTelemetryV1MetricsByName": "Pushes a metric sample to a public collector endpoint.",
    "PutTelemetryV1MetricsConfig": "Updates the configuration for sending metrics to the public collectors.Values are persisted to install settings for this installation.",
    "PutTelemetryV1StructuredLogs": "Handles a new structured log message for pushing to a public Collector-V1 endpoint. Structured log fields must be of the following types: bool, string, float, int, uint",
    "PutTelemetryV2EventsById": "Sends the event to the Analytics Pipeline CollectorV2 endpoint (https://data.riotgames.com). This backend differs from /v1/events as it requires schemas to be registered in the schema repository.",
    "PutTelemetryV2EventsExtendedById": "Sends the event to the Analytics Pipeline CollectorV2 endpoint (https://data.riotgames.com). This backend differs from /v1/events as it requires schemas to be registered in the schema repository.",
    "PutTelemetryV2EventsSchemalessById": "Sends the event directly to New Relic, without sending the data to AP.",
    "PutVanguardV1InstalledProducts": "Intended to provide product arguments to Vanguard installer",
    "PutVanguardV1UpdateProductsByProductId": "Request that Vanguard update, prompting UAC if required.",
    "PutVoiceChatV1PushToTalk": "Set voice chat push to talk configuration",
    "PutVoiceChatV2DevicesCapturePromptForPermission": "Prompts the user for permission to use the microphone, if required.",
    "PutVoiceChatV2PushToTalkByProductName": "Set voice chat push to talk configuration",
    "PutVoiceChatV2Sessions": "Update the properties for all sessions",
    "PutVoiceChatV2SessionsById": "Update the properties for a session",
    "PutVoiceChatV2SessionsBySessionIdParticipantsByParticipantId": "Update local participant details",
    "PutVoiceChatV2Settings": "Update current voice chat settings",
    "PutVoiceChatV3PushToTalkByProductName": "Set voice chat push to talk configuration",
    "PutVoiceChatV3PushToTalkByProductNameBySessionId": "Set voice chat push to talk transmit state for a specific channel",
    "PutVoiceChatV3SessionsByProductName": "Update the properties for all sessions",
    "PutVoiceChatV3SessionsByProductNameById": "Update the properties for a session",
    "PutVoiceChatV3SessionsByProductNameBySessionIdParticipantsByParticipantId": "Update local participant details",
    "PutVoiceChatV3SettingsByProductName": "Update current voice chat settings",
    "PutVoiceChatV4SessionsByProductName": "Update the properties for all sessions",
    "PutVoiceChatV4SessionsByProductNameById": "Update the properties for a session",
    "PutVoiceChatV4SessionsByProductNameBySessionIdParticipantsByParticipantId": "Update local participant details",
    "PutXboxAccountV1AuthorizationConsent": "Update authorization consent status for Xbox",
    "Subscribe": "Subscribes to a given event",
    "Unsubscribe": "Unsubscribes from a given event",
    "WebSocketFormat": "Controls the console output format"
  },
  "types": {
    "AccessToken": "",
    "AccountsSecurityAccountsSecurity": "",
    "AccountsSecurityHomeBaseCountry": "",
    "AccountsSecurityProductSessionSession": "",
    "AgeRestriction": "",
    "AgeRestrictionAgeRestriction": "",
    "AgeRestrictionHomeBaseCountry": "",
    "AgentRequest": "",
    "AgentRequestQueue": "",
    "AgentRequestType": "",
    "AgentResourceEvent": "",
    "AgentResourceEventType": "",
    "AgentSession": "",
    "AliasRequiredResponse": "",
    "AmbassadorErrorResponse": "",
    "AntiAddictionAntiAddictionConfig": "",
    "AntiAddictionAntiAddictionPolicy": "",
    "AntiAddictionAntiAddictionStandaloneConfig": "",
    "AntiAddictionAntiAddictionState": "",
    "AntiAddictionDisplayType": "",
    "AntiAddictionPolicyType": "",
    "AntiAddictionProductSessionSession": "",
    "AppCommandAuthStatus": "",
    "AppCommandAuthStatusState": "",
    "AppCommandAuthorizationResponse": "",
    "AppCommandAuthorizationResponseType": "",
    "AppCommandCommand": "",
    "AppCommandCommandAuthV1": "",
    "AppCommandCommandKind": "",
    "AppCommandCommandVng": "",
    "AppFocusRequest": "",
    "AppInfo": "",
    "AppRepairApplyRequest": "",
    "AppUpdateApplyRequest": "",
    "AppleAccountAppleAuthorizationError": "",
    "AppleAccountAppleAuthorizationOpenConnectId": "",
    "AppleAccountAppleAuthorizationParameters": "",
    "AppleAccountAppleAuthorizationResponse": "",
    "AppleAccountAppleAuthorizationResponseType": "",
    "AppleAccountPluginConfigResponse": "",
    "AppleAccountV1AuthMethodConfig": "",
    "AppleAccountV1DisplayMode": "",
    "AppleAccountV1WebAuthenticationMethod": "",
    "AppleAccountV1WebAuthenticationUrlRequest": "",
    "AuthenticationTypeEnum": "",
    "BindingFullApiHelp": "Describes the exposed native API.",
    "BindingFullArgumentHelp": "Describes a function parameter.",
    "BindingFullEnumValueHelp": "Describes an enumerator.",
    "BindingFullEventHelp": "Describes an event.",
    "BindingFullFieldHelp": "Describes a member of a struct.",
    "BindingFullFunctionHelp": "Describes a function.",
    "BindingFullTypeHelp": "Describes a struct or enum type.",
    "BindingFullTypeIdentifier": "Describes the type of a value.",
    "BindingHelpFormat": "Help format for binding functions and types.",
    "BootstrapProcessRequest": "",
    "ChatAccountChatSettings": "",
    "ChatAccountState": "",
    "ChatActiveConvo": "",
    "ChatApiTelemetry": "",
    "ChatBlockPid": "",
    "ChatBlockedAction": "",
    "ChatBlockedMapResource": "",
    "ChatChatBlockedList": "",
    "ChatChatBlockedPlayer": "",
    "ChatChatFriend": "",
    "ChatChatFriends": "",
    "ChatChatGamePresence": "",
    "ChatChatGamePresenceUpdate": "",
    "ChatChatGroup": "",
    "ChatChatGroupList": "",
    "ChatChatGroupUpdate": "",
    "ChatChatLoginStateTelemetry": "",
    "ChatChatMessage": "",
    "ChatChatMessageList": "",
    "ChatChatParticipant": "",
    "ChatChatParticipants": "",
    "ChatChatPlayer": "",
    "ChatChatPlayerParticipants": "",
    "ChatChatSession": "",
    "ChatChatSessionData": "",
    "ChatChatSessionState": "",
    "ChatChatSharedPayload": "",
    "ChatChatWindowSettings": "",
    "ChatCommandTelemetry": "",
    "ChatConfigReadinessEnum": "",
    "ChatConfigStatus": "",
    "ChatConversationCreateJoin": "",
    "ChatConversationCreateJoinFederated": "",
    "ChatConversationEdit": "",
    "ChatConversationInitRecent": "",
    "ChatConversationInitRecentList": "",
    "ChatConversationReadership": "",
    "ChatConversationReadershipList": "",
    "ChatConversationSetActive": "",
    "ChatConvoCid": "",
    "ChatConvoJoin": "",
    "ChatConvoJoinFederated": "",
    "ChatConvoUpdate": "",
    "ChatDebugChatGamePresence": "",
    "ChatDebugConfig": "",
    "ChatDeleteMessage": "",
    "ChatDeviceChatSettings": "",
    "ChatDisconnectTelemetry": "",
    "ChatEntitlementsTokenResource": "",
    "ChatError": "",
    "ChatErrorId": "",
    "ChatErrorList": "",
    "ChatExecutionTime": "",
    "ChatExecutionTimeSummarization": "",
    "ChatExecutionTimes": "",
    "ChatExecutionTimesTelemetry": "",
    "ChatFriendGroup": "",
    "ChatFriendGroupCreate": "",
    "ChatFriendGroupList": "",
    "ChatFriendGroupName": "",
    "ChatFriendGroupOrder": "",
    "ChatFriendGroupSyncList": "",
    "ChatFriendGroupUpdate": "",
    "ChatFriendPid": "",
    "ChatFriendRequest": "",
    "ChatFriendRequestAdd": "",
    "ChatFriendRequestList": "",
    "ChatFriendRequestListPuuid": "",
    "ChatFriendRequestPost": "",
    "ChatFriendRequestPuuid": "",
    "ChatFriendSubscriptionType": "",
    "ChatFriendUpdate": "",
    "ChatFriendUpdateList": "",
    "ChatGroupsFriendGroupSync": "",
    "ChatJWTIssueResource": "",
    "ChatJWTVerifyResource": "",
    "ChatMeasurementType": "",
    "ChatMessage": "",
    "ChatMessageList": "",
    "ChatMessagePost": "",
    "ChatMessageSend": "",
    "ChatMessageType": "",
    "ChatMessagesArchive": "",
    "ChatMessagesFetchArchive": "",
    "ChatMessagesSendChatMessage": "",
    "ChatMultiGamePresence": "",
    "ChatMultiGamePresenceDelete": "",
    "ChatMultiGamePresenceList": "",
    "ChatOptionalMeasurementInformation": "",
    "ChatParticipantEdit": "",
    "ChatPlayRestrictionV1Data": "",
    "ChatPlayRestrictionV1Settings": "",
    "ChatPlayerAffinityInput": "",
    "ChatPlayerAffinityToken": "",
    "ChatPlayerPreferencesResource": "",
    "ChatPresenceDelete": "",
    "ChatPresenceProduct": "",
    "ChatPresencesChatParty": "",
    "ChatPresencesChatPartyMember": "",
    "ChatPresencesPartyMemberRole": "",
    "ChatPresencesPartyStatus": "",
    "ChatPrivacyReceiveBlockedPlayer": "",
    "ChatProductLocTranslateReq": "",
    "ChatProductLocTranslateResp": "",
    "ChatProductLocTranslateResult": "",
    "ChatProductMetadata": "",
    "ChatProductMetadataContentPaths": "",
    "ChatProductSession": "",
    "ChatProductSessionState": "",
    "ChatProtocolPreference": "",
    "ChatReadCollectionData": "",
    "ChatReadPoint": "",
    "ChatRequestPid": "",
    "ChatRequestPuuid": "",
    "ChatRiotLogLevel": "",
    "ChatRsoAccessTokenResource": "",
    "ChatRsoAuthorizationResource": "",
    "ChatRsoIdTokenResource": "",
    "ChatSanitizeRequest": "",
    "ChatSanitizeResponse": "",
    "ChatSanitizerStatus": "",
    "ChatSessionPlatform": "",
    "ChatSessionState": "",
    "ChatSessionSuspendConfig": "",
    "ChatSocialData": "",
    "ChatSocialDataReq": "",
    "ChatSocketClosedCode": "",
    "ChatStanzaResponseTelemetry": "",
    "ChatUIState": "",
    "ChatUIStateConversation": "",
    "ChatUIStateConversationJoin": "",
    "ChatUIStateConversationList": "",
    "ChatUIStateConversationUpdate": "",
    "ChatUpdateChatSettings": "",
    "ChatUpdateProductSession": "",
    "ChatUpdateSanitizerSettings": "",
    "ChatXmppConnectionState": "",
    "ChatXmppConnectionStatus": "",
    "ChatXmppReceivedStanza": "",
    "ChatXmppSendStanza": "",
    "ChatXmppSessionId": "",
    "ChatXmppSettings": "",
    "ChatXmppStatusCheckData": "",
    "ChatboxAccountState": "",
    "ChatboxChatFriend": "",
    "ChatboxChatFriends": "",
    "ChatboxChatParticipant": "",
    "ChatboxChatParticipants": "",
    "ChatboxChatPlayer": "",
    "ChatboxChatPlayerParticipants": "",
    "ChatboxChatSession": "",
    "ChatboxChatboxChannel": "",
    "ChatboxChatboxChannelResource": "",
    "ChatboxChatboxChannels": "",
    "ChatboxChatboxFriend": "",
    "ChatboxChatboxFriends": "",
    "ChatboxChatboxMessage": "",
    "ChatboxChatboxMessageList": "",
    "ChatboxChatboxMessagePost": "",
    "ChatboxConvoCid": "",
    "ChatboxConvoJoinFederated": "",
    "ChatboxJWTIssueResource": "",
    "ChatboxMessage": "",
    "ChatboxMessageType": "",
    "ChatboxMultiGamePresence": "",
    "ChatboxPresencesChatParty": "",
    "ChatboxPresencesChatPartyMember": "",
    "ChatboxPresencesPartyMemberRole": "",
    "ChatboxPresencesPartyStatus": "",
    "ChatboxUIState": "",
    "ChatboxUIStateConversation": "",
    "ChatboxUIStateConversationList": "",
    "ClientConfigBuildInfo": "",
    "ClientConfigClientConfig": "",
    "ClientConfigConfigNamespaceUpdate": "",
    "ClientConfigConfigParams": "",
    "ClientConfigConfigReadinessEnum": "",
    "ClientConfigConfigStatus": "",
    "ClientConfigConfigType": "",
    "ClientConfigDataPaths": "",
    "ClientConfigDepInjectorConfigNamespaceUpdate": "",
    "ClientConfigDepInjectorRiotClientAuthAlias": "",
    "ClientConfigDepInjectorRiotClientAuthAuthorization": "",
    "ClientConfigDepInjectorRiotClientAuthIdClaims": "",
    "ClientConfigDepInjectorRsoAuthAccessToken": "",
    "ClientConfigDepInjectorRsoAuthIdToken": "",
    "ClientConfigDepInjectorSession": "",
    "ClientConfigDepInjectorSessionsUpdate": "",
    "ClientConfigDepInjectorTokenV2": "",
    "ClientConfigDepInjectorUpdateType": "",
    "ClientConfigRiotClientAuthAlias": "",
    "ClientConfigRiotClientAuthAuthorization": "",
    "ClientConfigRiotClientAuthIdClaims": "",
    "ClientConfigRsoAuthAccessToken": "",
    "ClientConfigRsoAuthIdToken": "",
    "ClientConfigSession": "",
    "ClientConfigSessionsUpdate": "",
    "ClientConfigTokenV2": "",
    "ClientConfigUpdateType": "",
    "ClientFeatureFlagsConfigurationSource": "",
    "ClientFeatureFlagsExperimentCohortPair": "",
    "ClientFeatureFlagsFeatureFlagConfiguration": "",
    "CollectorAvailability": "",
    "CombinedPatchState": "",
    "ConfigurationStatus": "",
    "ConnectionInfo": "",
    "CookieJarCookie": "",
    "CreateShortcutsRequest": "",
    "DataPaths": "",
    "DataStorePartnerProduct": "",
    "DisambiguationAccessToken": "",
    "DisambiguationConfigReadinessEnum": "",
    "DisambiguationConfigStatus": "",
    "DisambiguationIdToken": "",
    "DisambiguationRegionLocale": "",
    "DownloadProgress": "",
    "EligibilityCheckResponse": "",
    "EntitlementsRiotClientAuthAlias": "",
    "EntitlementsRiotClientAuthAuthorization": "",
    "EntitlementsRiotClientAuthIdClaims": "",
    "EntitlementsRsoAuthAccessToken": "",
    "EntitlementsRsoAuthIdToken": "",
    "EntitlementsServiceEntitlementsServiceToken": "",
    "EntitlementsToken": "",
    "EntitlementsTokenV2": "",
    "ErrorType": "",
    "EulaAcceptance": "",
    "EulaAgreement": "",
    "EulaAgreementContext": "",
    "EulaAuthorization": "",
    "EulaExternalLegalLinks": "",
    "EulaFinalState": "",
    "EulaIdToken": "",
    "EulaPlayerPreferencesResource": "",
    "EulaPluginTelemetryContext": "",
    "EulaPrivacyPolicy": "",
    "EulaPrivacyPolicyContext": "",
    "EulaProductContext": "",
    "EulaRegionLocale": "",
    "ExtendedEventData": "",
    "ExternalMessageHandlerAppUpdateStatus": "",
    "ExternalMessageHandlerClientProductType": "",
    "ExternalMessageHandlerCombinedPatchState": "",
    "ExternalMessageHandlerConfigType": "",
    "ExternalMessageHandlerConfigurationResource": "",
    "ExternalMessageHandlerConfigurationStatus": "",
    "ExternalMessageHandlerDependency": "",
    "ExternalMessageHandlerDependencyState": "",
    "ExternalMessageHandlerDynamicTagHeuristics": "",
    "ExternalMessageHandlerDynamicTags": "",
    "ExternalMessageHandlerError": "",
    "ExternalMessageHandlerInstall": "",
    "ExternalMessageHandlerLocaleDataResource": "",
    "ExternalMessageHandlerLockedFileInfo": "",
    "ExternalMessageHandlerLoginStatus": "",
    "ExternalMessageHandlerLoginStatusResponse": "",
    "ExternalMessageHandlerManifestProgress": "",
    "ExternalMessageHandlerMessageBody": "",
    "ExternalMessageHandlerMessageData": "",
    "ExternalMessageHandlerMessageId": "",
    "ExternalMessageHandlerPatchRequest": "",
    "ExternalMessageHandlerPatchRequestOptions": "",
    "ExternalMessageHandlerPatchStatus": "",
    "ExternalMessageHandlerPatchStatusState": "",
    "ExternalMessageHandlerPatchType": "",
    "ExternalMessageHandlerPatchingResource": "",
    "ExternalMessageHandlerPatchlineResource": "",
    "ExternalMessageHandlerPhase": "",
    "ExternalMessageHandlerProductAlias": "",
    "ExternalMessageHandlerProductPatchlineResourceV4": "",
    "ExternalMessageHandlerProgress": "",
    "ExternalMessageHandlerRegionDataResource": "",
    "ExternalMessageHandlerRepairCode": "",
    "ExternalMessageHandlerRepairProgress": "",
    "ExternalMessageHandlerSecondaryPatchline": "",
    "ExternalMessageHandlerSecondaryPatchlineResource": "",
    "ExternalMessageHandlerUpdateProgress": "",
    "FacebookAccountAuthorizationClassicLogin": "",
    "FacebookAccountFacebookAuthorizationError": "",
    "FacebookAccountFacebookAuthorizationParameters": "",
    "FacebookAccountFacebookAuthorizationResponse": "",
    "FacebookAccountFacebookAuthorizationResponseType": "",
    "FacebookAccountPluginConfigResponse": "",
    "FacebookAccountV1AuthMethodConfig": "",
    "FacebookAccountV1DisplayMode": "",
    "FacebookAccountV1WebAuthenticationMethod": "",
    "FacebookAccountV1WebAuthenticationUrlRequest": "",
    "FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentReason": "",
    "FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentRequest": "",
    "FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentResponse": "",
    "FirstPartyFulfillmentFirstPartyFulfillmentItemFulfillmentFailureInfo": "",
    "FirstPartyFulfillmentFirstPartyFulfillmentItemFulfillmentSuccessInfo": "",
    "FirstPartyFulfillmentFirstPartyFulfillmentMockApiState": "",
    "FirstPartyFulfillmentFirstPartyFulfillmentRiotPayFulfillmentResponse": "",
    "FirstPartyFulfillmentFirstPartyFulfillmentRiotPayGetAccessTokensResponse": "",
    "FirstPartyFulfillmentFirstPartyFulfillmentRiotPayItemFulfillmentFailureInfo": "",
    "FirstPartyFulfillmentFirstPartyFulfillmentRiotPayItemFulfillmentSuccessInfo": "",
    "FirstPartyFulfillmentFirstPartyFulfillmentTelemetryContext": "",
    "FirstPartyFulfillmentFirstPartyFulfillmentTelemetryFulfillmentItemResult": "",
    "FirstPartyFulfillmentFirstPartyFulfillmentTelemetryFulfillmentResult": "",
    "FoundationEventType": "",
    "GaRestrictionAuthorization": "",
    "GaRestrictionCachedPenaltyNotificationDtoV1": "",
    "GaRestrictionGapsMailboxUpdated": "",
    "GaRestrictionLocalizedPenaltyNotification": "",
    "GaRestrictionLocalizedPenaltyNotificationChatLogEvidenceV1": "",
    "GaRestrictionMail": "",
    "GaRestrictionMailState": "",
    "GaRestrictionMailType": "",
    "GaRestrictionMailboxStatusUpdated": "",
    "GaRestrictionPenaltyNotification": "",
    "GaRestrictionPenaltyNotificationData": "",
    "GaRestrictionPenaltyNotificationDtoV1": "",
    "GaRestrictionPenaltyNotificationEvidenceDtoV1": "",
    "GaRestrictionPenaltyNotificationPlayerAction": "",
    "GaRestrictionPenaltyNotificationPlayerActionEvent": "",
    "GaRestrictionPenaltyNotificationTextChatLogEvidenceV1": "",
    "GaRestrictionPenaltyNotificationVendedPenaltyDtoV1": "",
    "GaRestrictionPenaltyNotificationsByMessageId": "",
    "GaRestrictionPluginCallerId_MockCallerId": "",
    "GaRestrictionPluginCallerId_ProductSession": "",
    "GaRestrictionRegionLocale": "",
    "GaRestrictionRequestMailParameters": "",
    "GaRestrictionUpdateMailStateRequest": "",
    "GaWarningApiAuthorization": "",
    "GaWarningGapsMailboxUpdated": "",
    "GaWarningLocalizedWarningMessage": "",
    "GaWarningMail": "",
    "GaWarningMailState": "",
    "GaWarningMailType": "",
    "GaWarningMailboxStatusUpdated": "",
    "GaWarningPluginCallerId_MockCallerId": "",
    "GaWarningPluginCallerId_ProductSession": "",
    "GaWarningRegionLocale": "",
    "GaWarningRequestMailParameters": "",
    "GaWarningUpdateMailStateRequest": "",
    "GaWarningWarning": "",
    "GaWarningWarningAcknowledgementEvent": "",
    "GaWarningWarningDto": "",
    "GaWarningWarningFoundUnacknowledgedEvent": "",
    "GaWarningWarningResponse": "",
    "GameSessionAccessToken": "",
    "GameSessionAuthError": "",
    "GameSessionAuthHint": "",
    "GameSessionAuthHintType": "",
    "GameSessionAuthenticationTypeEnum": "",
    "GameSessionAuthorization": "",
    "GameSessionAuthorizationCode": "",
    "GameSessionAuthorizationKey": "",
    "GameSessionAuthorizationKeyRequest": "",
    "GameSessionAuthorizationRequest": "",
    "GameSessionAuthorizationRequestTelemetryContext": "",
    "GameSessionAuthorizationResponse": "",
    "GameSessionAuthorizationResponseTelemetryContext": "",
    "GameSessionAuthorizationResponseType": "",
    "GameSessionAuthorizationUpdateRequest": "",
    "GameSessionClientAuthorizationState": "",
    "GameSessionClientAuthorizationTelemetryContext": "",
    "GameSessionClientConfigCluster": "",
    "GameSessionConfigV3AMRValuesSupported": "",
    "GameSessionConfigV3AuthProgress": "",
    "GameSessionConfigV3OpenIdConfiguration": "",
    "GameSessionConfigV3PartnerAuthConfig": "",
    "GameSessionConfigV3ReadyState": "",
    "GameSessionDeviceId": "",
    "GameSessionEntitlementsToken": "",
    "GameSessionGameCenterAuthCredentials": "",
    "GameSessionGameSessionServiceCreateSessionRequestBody": "",
    "GameSessionGameSessionV1ClusterList": "",
    "GameSessionGameSessionV1GameSessionId": "",
    "GameSessionGameSessionV1GameSessionMessage": "",
    "GameSessionGameSessionV1GameSessionRequest": "",
    "GameSessionGameSessionV1GameSessionResponse": "",
    "GameSessionGameSessionV1GameSessionState": "",
    "GameSessionGarenaPartnerCredentials": "",
    "GameSessionGoogleAuthCredentials": "",
    "GameSessionHttpCookie": "",
    "GameSessionHttpCookieJar": "",
    "GameSessionIdToken": "",
    "GameSessionImplicitAuthorization": "",
    "GameSessionImplicitGrantModeTelemetryContext": "",
    "GameSessionLoginAMR": "",
    "GameSessionLoginQueueServiceLoginQueueRequest": "",
    "GameSessionLoginQueueServiceLoginQueueRequestBody": "",
    "GameSessionLoginQueueServiceLoginQueueTokenType": "",
    "GameSessionLoginQueueServiceQueueToken": "",
    "GameSessionLogoutReason": "",
    "GameSessionMSDKQQPartnerCredentials": "",
    "GameSessionMSDKV5PartnerCredentials": "",
    "GameSessionMSDKWeChatPartnerCredentials": "",
    "GameSessionMultifactorDetails": "",
    "GameSessionMultifactorMethod": "",
    "GameSessionPartnerCredentials": "",
    "GameSessionPartnerCredentialsV3": "",
    "GameSessionPluginCallerId_MockCallerId": "",
    "GameSessionPluginCallerId_ProductSession": "",
    "GameSessionPublicClientConfig": "",
    "GameSessionRSOAuthTelemetryContext": "",
    "GameSessionRSOAuthorizationSubmission": "",
    "GameSessionRSOAuthorizationTelemetryContext": "",
    "GameSessionRSOAuthorizationTrustLevel": "",
    "GameSessionRSOCredentialSubmission": "",
    "GameSessionRSOJWTConfig": "",
    "GameSessionRSOOTPSubmission": "",
    "GameSessionRSOPlayerCredentials": "",
    "GameSessionRSOReauthenticationSubmission": "",
    "GameSessionSessionCredentials": "",
    "GameSessionSessionLoginToken": "",
    "GameSessionSessionMultifactor": "",
    "GameSessionSessionReauthentication": "",
    "GameSessionSessionResponse": "",
    "GameSessionSessionResponseType": "",
    "GameSessionSessionSignup": "",
    "GameSessionStatusMessage": "",
    "GameSessionTelemetryEvent": "",
    "GameSessionTencentPartnerCredentials": "",
    "GameSessionTokenContext": "",
    "GameSessionUserInfo": "",
    "GameSessionWeGamePartnerCredentials": "",
    "GamecenterAccountGameCenterAuthorizationError": "",
    "GamecenterAccountGameCenterAuthorizationResponse": "",
    "GamecenterAccountGameCenterAuthorizationResponseType": "",
    "GamecenterAccountGameCenterToken": "",
    "GoogleAccountGoogleAuthorizationError": "",
    "GoogleAccountGoogleAuthorizationParameters": "",
    "GoogleAccountGoogleAuthorizationResponse": "",
    "GoogleAccountGoogleAuthorizationResponseType": "",
    "GoogleAccountPluginConfigResponse": "",
    "GoogleAccountV1AuthMethodConfig": "",
    "GoogleAccountV1DisplayMode": "",
    "GoogleAccountV1WebAuthenticationMethod": "",
    "GoogleAccountV1WebAuthenticationUrlRequest": "",
    "HomeBaseCountry": "",
    "InfoRadiatorAccessToken": "",
    "InfoRadiatorAuthenticationTypeEnum": "",
    "InfoRadiatorAuthorization": "",
    "InfoRadiatorBuildInfo": "",
    "InfoRadiatorPatchlineMetadata": "",
    "InfoRadiatorSession": "",
    "InfoRadiatorSessionResponse": "",
    "InfoRadiatorSessionStartEvent": "",
    "InfoRadiatorSessionStartEvent_AuthState": "",
    "InfoRadiatorSessionStartEvent_EventTrigger": "",
    "InfoRadiatorVoiceChatHeartbeatMetrics": "",
    "InfoRadiatorVoiceChatHeartbeatMetrics_PerProductData": "",
    "InfoRadiatorVoiceChatHeartbeatMetrics_PerProviderData": "",
    "Install": "",
    "InstallProgress": "",
    "InstalledDependency": "",
    "JwtAuthenticatorJWTIssueResource": "",
    "JwtAuthenticatorJWTVerifyResource": "",
    "KrAccountAccessToken": "",
    "KrAccountAccountPromotionSession": "",
    "KrAccountKrAccountApiSession": "",
    "KrAccountKrAccountPluginConfig": "",
    "LaunchConfiguration": "",
    "LeagueRegionElectionResource": "",
    "LifecycleStateAppRepairBinding": "",
    "LifecycleStateAppRepairBindingState": "",
    "LifecycleStateHomeBaseCountry": "",
    "LogSeverityLevels": "",
    "LoginPhase": "",
    "LoginStatus": "",
    "LoginStatusPhase": "",
    "LolInfo": "",
    "LoyaltyV2ExternalProcess": "",
    "LoyaltyV2LoyaltyConfig": "",
    "LoyaltyV2LoyaltyStandaloneConfig": "",
    "LoyaltyV2PCBangInfo": "",
    "LoyaltyV2Session": "",
    "MailboxAccessToken": "",
    "MailboxAffinityV1AffinityInput": "",
    "MailboxAffinityV2AffinityProductInput": "",
    "MailboxAlias": "",
    "MailboxApiAlias": "",
    "MailboxApiAuthorization": "",
    "MailboxApiClientDetails": "",
    "MailboxApiHomeBaseCountry": "",
    "MailboxApiIdClaims": "",
    "MailboxApiLoginCountry": "",
    "MailboxApiUserInfo": "",
    "MailboxApiUserInfoLol": "",
    "MailboxApiUserInfoSummoner": "",
    "MailboxAuthorization": "",
    "MailboxGapsMailboxUpdated": "",
    "MailboxIdClaims": "",
    "MailboxIdToken": "",
    "MailboxMail": "",
    "MailboxMailState": "",
    "MailboxMailType": "",
    "MailboxMailboxStatusUpdated": "",
    "MailboxPlayerAffinityCachedProductAffinity": "",
    "MailboxPlayerAffinityCachedServiceAffinity": "",
    "MailboxPlayerAffinityDataSource": "",
    "MailboxPlayerAffinityPluginConfig": "",
    "MailboxPlayerAffinityPluginStatus": "",
    "MailboxPlayerAffinityProductToken": "",
    "MailboxPlayerAffinityServiceToken": "",
    "MailboxPlayerAffinityShardInfo": "",
    "MailboxPlayerAffinityToken": "",
    "MailboxPlayerAffinityTokenProduct": "",
    "MailboxPluginCallerId_MockCallerId": "",
    "MailboxPluginCallerId_ProductSession": "",
    "MailboxProductAffinityInput": "",
    "MailboxRequestMailParameters": "",
    "MailboxRsoAuthAccessToken": "",
    "MailboxRsoAuthAuthorizationRequest": "",
    "MailboxRsoAuthAuthorizationResponse": "",
    "MailboxRsoAuthAuthorizationResponseType": "",
    "MailboxRsoAuthAuthorizationTrustLevel": "",
    "MailboxRsoAuthIdToken": "",
    "MailboxRsoAuthImplicitAuthorization": "",
    "MailboxRsoAuthReadyState": "",
    "MailboxRsoAuthUserInfo": "",
    "MailboxServiceAffinityInput": "",
    "MailboxUpdateMailStateRequest": "",
    "MiddlewareManagerPhase": "",
    "MiddlewareManagerState": "",
    "MobileProductRegistryAppUpdateStatus": "",
    "MobileProductRegistryConfigType": "",
    "MobileProductRegistryGameVersion": "",
    "MobileProductRegistryPatchlineMetadata": "",
    "MobileProductRegistrySession": "",
    "MobilePushMobilePushCreateFilter": "",
    "MobilePushMobilePushRegisterPush": "",
    "MobilePushMobilePushServicePayload": "",
    "MobilePushMobilePushSubscribeToTopic": "",
    "MobilePushRsoAuthAccessToken": "",
    "NameCheckNameValidationResult": "",
    "NintendoAccountAuthorization": "",
    "NintendoAccountAuthorizationParameters": "",
    "NintendoAccountAuthorizationResponse": "",
    "NintendoAccountErrorCode": "",
    "NintendoAccountGetNetworkServiceAccountParameters": "",
    "NintendoAccountNetworkServiceAccount": "",
    "NintendoAccountNetworkServiceAccountResponse": "",
    "NintendoAccountOnlinePlatform": "",
    "NintendoAccountPlatformUser": "",
    "NintendoAccountPluginConfigResponse": "",
    "NintendoAccountV1AuthMethodConfig": "",
    "NintendoAccountV1DisplayMode": "",
    "NintendoAccountV1WebAuthenticationMethod": "",
    "NintendoAccountV1WebAuthenticationUrlRequest": "",
    "NintendoAccountV2AuthorizationError": "",
    "NintendoAccountV2AuthorizationParameters": "",
    "NintendoAccountV2AuthorizationResponse": "",
    "NintendoAccountV2AuthorizationResponseType": "",
    "NintendoAccountV2AuthorizationToken": "",
    "OnlinePlatform": "",
    "PatchConfiguration": "",
    "PatchCookie": "",
    "PatchCookies": "",
    "PatchEntitlementsToken": "",
    "PatchError": "",
    "PatchErrorCode": "",
    "PatchInstall": "",
    "PatchInstallParams": "",
    "PatchLockedFileInfo": "",
    "PatchManifestProgress": "",
    "PatchPatchRequest": "",
    "PatchPatchStatus": "",
    "PatchPatchStatusState": "",
    "PatchPhase": "",
    "PatchPreviewDiff": "",
    "PatchPreviewRequest": "",
    "PatchPreviewStatus": "",
    "PatchPreviewStatusState": "",
    "PatchProgress": "",
    "PatchProxyAppUpdateStatus": "",
    "PatchProxyClientProductType": "",
    "PatchProxyCombinedPatchState": "",
    "PatchProxyConfigType": "",
    "PatchProxyConfigurationResource": "",
    "PatchProxyConfigurationStatus": "",
    "PatchProxyContentCookies": "",
    "PatchProxyCookie": "",
    "PatchProxyCreateShortcutsRequest": "",
    "PatchProxyDataPaths": "",
    "PatchProxyDependency": "",
    "PatchProxyDependencyState": "",
    "PatchProxyDynamicTagHeuristics": "",
    "PatchProxyDynamicTags": "",
    "PatchProxyError": "",
    "PatchProxyEventType": "",
    "PatchProxyHomeBaseCountry": "",
    "PatchProxyInstall": "",
    "PatchProxyInstallParams": "",
    "PatchProxyJobInfo": "",
    "PatchProxyJobStatus": "",
    "PatchProxyJobType": "",
    "PatchProxyLocaleDataResource": "",
    "PatchProxyLockedFileInfo": "",
    "PatchProxyManifestProgress": "",
    "PatchProxyPatchProxyProduct": "",
    "PatchProxyPatchProxyRequest": "",
    "PatchProxyPatchRequestOptions": "",
    "PatchProxyPatchStatus": "",
    "PatchProxyPatchStatusState": "",
    "PatchProxyPatchingResource": "",
    "PatchProxyPatchlineResource": "",
    "PatchProxyPhase": "",
    "PatchProxyPrepareDirectoryPermissionsRequest": "",
    "PatchProxyProductAlias": "",
    "PatchProxyProductPatchlineKey": "",
    "PatchProxyProductPatchlineResourceV4": "",
    "PatchProxyProductRegistryPatchline": "",
    "PatchProxyProductRegistryProduct": "",
    "PatchProxyProductSession": "",
    "PatchProxyProgress": "",
    "PatchProxyRegionDataResource": "",
    "PatchProxyRegisterWatchPathsRequest": "",
    "PatchProxyRepairCode": "",
    "PatchProxyRepairProgress": "",
    "PatchProxyScdCookie": "",
    "PatchProxyScdCookies": "",
    "PatchProxySecondaryPatchline": "",
    "PatchProxySecondaryPatchlineResource": "",
    "PatchProxyUpdateProgress": "",
    "PatchRegionLocale": "",
    "PatchRepairFileInfo": "",
    "PatchRepairFileInfoState": "",
    "PatchRepairProgress": "",
    "PatchRepairRequest": "",
    "PatchRepairStatus": "",
    "PatchRepairStatusState": "",
    "PatchRequests": "",
    "PatchSeedRequest": "",
    "PatchSeedStatus": "",
    "PatchSeedStatusState": "",
    "PatchStatus": "",
    "PatchUpdateProgress": "",
    "PatchingResource": "",
    "PayMobileCompletedPricePointPurchaseResponse": "",
    "PayMobileInitializePurchaseResponse": "",
    "PayMobileMobileStoreStatus": "",
    "PayMobilePricePoint": "",
    "PayMobileProduct": "",
    "PayMobileProductListResult": "",
    "PayMobileProductListStatus": "",
    "PayMobileProductSession": "",
    "PayMobilePurchaseResult": "",
    "PayMobilePurchaseStatus": "",
    "PayMobilePurchaseTransaction": "",
    "PayMobileSubmitPurchaseResult": "",
    "PayMobileSubmitPurchaseResultDetails": "",
    "PayMobileSubmitPurchaseResultStatus": "",
    "PayMobileTelemetryContext": "",
    "PayMobileTelemetryResult": "",
    "PaymentsIdToken": "",
    "PaymentsInitializedPurchase": "",
    "PaymentsLoginInfo": "",
    "PaymentsReadyState": "",
    "PaymentsUserInfo": "",
    "PermissionsPermissionDetails": "",
    "PermissionsPermissionsRequestParameters": "",
    "PermissionsPermissionsResponse": "",
    "PermissionsPlatformSocialVoicePermission": "",
    "PermissionsPlatformSocialVoicePermissionDetails": "",
    "PlatformLoginAuthenticationMethod": "",
    "PlatformLoginAuthorizationRequest": "",
    "PlatformLoginAuthorizationResponse": "",
    "PlatformLoginAuthorizationResponseType": "",
    "PlatformLoginLoginPersistenceConfig": "",
    "PlatformLoginLoginPhase": "",
    "PlatformLoginLoginResult": "",
    "PlatformLoginLoginStatus": "",
    "PlatformLoginLoginTypeEnum": "",
    "PlatformLoginOnlinePlatform": "",
    "PlatformLoginOutcome": "",
    "PlatformLoginPlatformUser": "",
    "PlatformLoginRSOAuthorizationTrustLevel": "",
    "PlatformLoginRSOSignOnAttemptEvent": "",
    "PlatformLoginReadyState": "",
    "PlatformLoginSessionResponse": "",
    "PlatformLoginSessionResponseType": "",
    "PlatformLoginStoredSessionState": "",
    "PlatformSocialLookupV1GameNameTaglinePASResponse": "",
    "PlatformSocialLookupV1GamerNameAndTagline": "",
    "PlatformSocialLookupV1NamesetsForPuuidPASResponse": "",
    "PlatformSocialLookupV1NamesetsForPuuidRequest": "",
    "PlatformSocialLookupV1NamesetsForPuuidResponse": "",
    "PlatformSocialLookupV1NamesetsForPuuidsRequest": "",
    "PlatformSocialLookupV1NamesetsForPuuidsResponse": "",
    "PlatformSocialLookupV1PlaystationNameset": "",
    "PlatformSocialLookupV1PuuidAndProvider": "",
    "PlatformSocialLookupV1PuuidsForConsoleIdsRequest": "",
    "PlatformSocialLookupV1PuuidsForConsoleIdsResponse": "",
    "PlatformSocialLookupV1SwitchNameset": "",
    "PlatformSocialLookupV1XboxNameset": "",
    "PlatformSocialPlatformSocialBlockList": "",
    "PlatformSocialPlatformSocialBlockedUser": "",
    "PlatformSocialPlatformSocialMockApiState": "",
    "PlatformSocialPlatformSocialVoicePermission": "",
    "PlatformSocialPlatformSocialVoicePermissionDetails": "",
    "PlatformUiAccessToken": "",
    "PlatformUiAliasesV1Alias": "",
    "PlatformUiAliasesV1AliasInput": "",
    "PlatformUiAliasesV1AliasList": "",
    "PlatformUiAliasesV1AliasValidationReason": "",
    "PlatformUiAliasesV1RequiredResponse": "",
    "PlatformUiAliasesV1StatusResponse": "",
    "PlatformUiAppleAuthorizationError": "",
    "PlatformUiAppleAuthorizationOpenConnectId": "",
    "PlatformUiAppleAuthorizationParameters": "",
    "PlatformUiAppleAuthorizationResponse": "",
    "PlatformUiAppleAuthorizationResponseType": "",
    "PlatformUiAuthenticateMultifactorInput": "",
    "PlatformUiAuthenticationResponse": "",
    "PlatformUiAuthenticationTypeEnum": "",
    "PlatformUiAuthorizationClassicLogin": "",
    "PlatformUiCaptcha": "",
    "PlatformUiCaptchaType": "",
    "PlatformUiConfigV3AuthProgress": "",
    "PlatformUiConfigV3ReadyState": "",
    "PlatformUiEligibilityResponse": "",
    "PlatformUiFREStatus": "",
    "PlatformUiFacebookAuthorizationError": "",
    "PlatformUiFacebookAuthorizationParameters": "",
    "PlatformUiFacebookAuthorizationResponse": "",
    "PlatformUiFacebookAuthorizationResponseType": "",
    "PlatformUiGameCenterAuthorizationError": "",
    "PlatformUiGameCenterAuthorizationResponse": "",
    "PlatformUiGameCenterAuthorizationResponseType": "",
    "PlatformUiGameCenterToken": "",
    "PlatformUiGamepassResponseDetails": "",
    "PlatformUiGamepassStatus": "",
    "PlatformUiGenerateTaglineInput": "",
    "PlatformUiGenerateTaglineResponse": "",
    "PlatformUiGoogleAuthorizationError": "",
    "PlatformUiGoogleAuthorizationParameters": "",
    "PlatformUiGoogleAuthorizationResponse": "",
    "PlatformUiGoogleAuthorizationResponseType": "",
    "PlatformUiHCaptcha": "",
    "PlatformUiHealupResponseDetails": "",
    "PlatformUiIdToken": "",
    "PlatformUiInitiateLoginSessionRequest": "",
    "PlatformUiKRIdVerificationResponseDetails": "",
    "PlatformUiLoginStrategyType": "",
    "PlatformUiMultifactorDetails": "",
    "PlatformUiMultifactorInput": "",
    "PlatformUiMultifactorMethod": "",
    "PlatformUiMultifactorResponseDetails": "",
    "PlatformUiNintendoAccountV2AuthorizationError": "",
    "PlatformUiNintendoAccountV2AuthorizationParameters": "",
    "PlatformUiNintendoAccountV2AuthorizationResponse": "",
    "PlatformUiNintendoAccountV2AuthorizationResponseType": "",
    "PlatformUiNintendoAccountV2AuthorizationToken": "",
    "PlatformUiOnlinePlatform": "",
    "PlatformUiPlatformUIError": "",
    "PlatformUiPlatformUIState": "",
    "PlatformUiPlatformUser": "",
    "PlatformUiPlayerSessionState": "",
    "PlatformUiPlayerSessionStateType": "",
    "PlatformUiPlaystationAccountV2AuthorizationError": "",
    "PlatformUiPlaystationAccountV2AuthorizationNativeCode": "",
    "PlatformUiPlaystationAccountV2AuthorizationParameters": "",
    "PlatformUiPlaystationAccountV2AuthorizationResponse": "",
    "PlatformUiPlaystationAccountV2AuthorizationResponseType": "",
    "PlatformUiPluginConfigResponse": "",
    "PlatformUiRSOMobileUIAuthorizationTrustLevel": "",
    "PlatformUiRSOMobileUIEULAUIV2Status": "",
    "PlatformUiRSOMobileUIEULAUIV2StatusType": "",
    "PlatformUiRSOMobileUILoginInitiateRequest": "",
    "PlatformUiRSOMobileUILoginStatus": "",
    "PlatformUiRSOMobileUILoginStatusType": "",
    "PlatformUiRSOMobileUILoginStrategyInfo": "",
    "PlatformUiRSOMobileUILoginStrategyType": "",
    "PlatformUiRSOMobileUIRegionElectionV1InitiateRequest": "",
    "PlatformUiRSOMobileUIRegionElectionV1RegionElection": "",
    "PlatformUiRSOMobileUIRegionsV1RegionAssignmentResponseMessage": "",
    "PlatformUiRSOMobileUIRiotIdPromptV1InitiateRequest": "",
    "PlatformUiRSOMobileUIRiotIdPromptV1RiotIDPrompt": "",
    "PlatformUiRSOMobileUIRiotIdPromptV1RiotIDPromptReason": "",
    "PlatformUiRSOMobileUIVngV1RegistrationUIStatus": "",
    "PlatformUiRSOMobileUIVngV1RegistrationUIStatusType": "",
    "PlatformUiResponseType": "",
    "PlatformUiRiotIdentityAuthCompleteInput": "",
    "PlatformUiRiotIdentityAuthStartInput": "",
    "PlatformUiSessionResponse": "",
    "PlatformUiSessionResponseType": "",
    "PlatformUiSignupCodeLinking": "",
    "PlatformUiSignupLinkDetails": "",
    "PlatformUiSignupResponseDetails": "",
    "PlatformUiSuccessResponseDetails": "",
    "PlatformUiSuggestedAction": "",
    "PlatformUiUpdateLoginStrategyRequest": "",
    "PlatformUiUserInfo": "",
    "PlatformUiV1AuthMethodConfig": "",
    "PlatformUiV2AuthorizationError": "",
    "PlatformUiV2AuthorizationParameters": "",
    "PlatformUiV2AuthorizationResponse": "",
    "PlatformUiV2AuthorizationResponseType": "",
    "PlatformUiV2AuthorizationToken": "",
    "PlatformUiViewStatus": "",
    "PlatformUiWebLinkingStatus": "",
    "PlatformUiWebLinkingStatusResponse": "",
    "PlatformUiXboxSelectUserParameters": "",
    "PlatformUiXboxSignInOptions": "",
    "PlatformUicode": "",
    "PlatformUierrorState": "",
    "PlatformUistatus": "",
    "PlatformUser": "",
    "PlayRestrictionsPlayRestrictionV1Data": "",
    "PlayRestrictionsPlayRestrictionV1Settings": "",
    "PlayRestrictionsPluginCallerId_MockCallerId": "",
    "PlayRestrictionsPluginCallerId_ProductSession": "",
    "PlayerAccountAccessToken": "",
    "PlayerAccountAliasesV1Alias": "",
    "PlayerAccountAliasesV1AliasInput": "",
    "PlayerAccountAliasesV1AliasList": "",
    "PlayerAccountAliasesV1AliasLookup": "",
    "PlayerAccountAliasesV1AliasLookupResponse": "",
    "PlayerAccountAliasesV1AliasValidationReason": "",
    "PlayerAccountAliasesV1PurchaseAliasInput": "",
    "PlayerAccountAliasesV1PurchaseEligibilityInput": "",
    "PlayerAccountAliasesV1PurchaseEligibilityResponse": "",
    "PlayerAccountAliasesV1RequiredResponse": "",
    "PlayerAccountAliasesV1StatusResponse": "",
    "PlayerAccountAuthHint": "",
    "PlayerAccountAuthHintType": "",
    "PlayerAccountAuthorization": "",
    "PlayerAccountAuthorizationUpdateRequest": "",
    "PlayerAccountConfigV3ReadyState": "",
    "PlayerAccountEligibilityResponse": "",
    "PlayerAccountGameNameAndTagLine": "",
    "PlayerAccountGenerateTaglineInput": "",
    "PlayerAccountGenerateTaglineResponse": "",
    "PlayerAccountIdToken": "",
    "PlayerAccountLookupV1GameNameTaglinePASResponse": "",
    "PlayerAccountLookupV1GamerNameAndTagline": "",
    "PlayerAccountLookupV1NamesetsForPuuidPASResponse": "",
    "PlayerAccountLookupV1NamesetsForPuuidRequest": "",
    "PlayerAccountLookupV1NamesetsForPuuidResponse": "",
    "PlayerAccountLookupV1NamesetsForPuuidsRequest": "",
    "PlayerAccountLookupV1NamesetsForPuuidsResponse": "",
    "PlayerAccountLookupV1PlaystationNameset": "",
    "PlayerAccountLookupV1PuuidAndProvider": "",
    "PlayerAccountLookupV1PuuidsForConsoleIdsRequest": "",
    "PlayerAccountLookupV1PuuidsForConsoleIdsResponse": "",
    "PlayerAccountLookupV1SwitchNameset": "",
    "PlayerAccountLookupV1XboxNameset": "",
    "PlayerAccountOnlinePlatform": "",
    "PlayerAccountPlatformUser": "",
    "PlayerAccountPlayerAccountPluginConfig": "",
    "PlayerAccountPluginConfigResponse": "",
    "PlayerAccountPromotionV1AccountDetails": "",
    "PlayerAccountPromotionV1AccountPromotionResponse": "",
    "PlayerAccountPromotionV1AccountPromotionValidationFailures": "",
    "PlayerAccountPromotionV1BlockListResponse": "",
    "PlayerAccountPromotionV1BlockedPuuid": "",
    "PlayerAccountPromotionV1EligibilityCheckResponse": "",
    "PlayerAccountPromotionV1UpdateableFieldsResponse": "",
    "PlayerAccountRSOAuthorizationTrustLevel": "",
    "PlayerAccountRegionLocale": "",
    "PlayerAccountRegionsV1EligibilityCheckResponse": "",
    "PlayerAccountRegionsV1RegionAssignmentResponse": "",
    "PlayerAccountRegionsV1RegionAssignmentResponseMessage": "",
    "PlayerAccountSanitizeRequest": "",
    "PlayerAccountSanitizeResponse": "",
    "PlayerAccountServiceV1LoginLocationInfo": "",
    "PlayerAccountServiceV1PlayerLoginLocationHistory": "",
    "PlayerAccountServiceV1PlayersLoginLocationHistory": "",
    "PlayerAccountServiceV1RequestedPlayersLoginLocationHistory": "",
    "PlayerAccountUserFieldChangeDetails": "",
    "PlayerAccountUserFieldChangeMessage": "",
    "PlayerAccountUserInfo": "",
    "PlayerAccountV1AuthMethodConfig": "",
    "PlayerAccountV1LoginLocationInfo": "",
    "PlayerAccountV1PlayerLoginLocationHistory": "",
    "PlayerAccountV1PlayersLoginLocationHistory": "",
    "PlayerAccountV1RequestedPlayersLoginLocationHistory": "",
    "PlayerAccountVngV1HomeBaseCountry": "",
    "PlayerAccountVngV1RegionLocale": "",
    "PlayerAccountVngV1StatusResponse": "",
    "PlayerAccountVngV1WebUrlRequest": "",
    "PlayerAccountVngV1WebUrlResponse": "",
    "PlayerAffinityAccessToken": "",
    "PlayerAffinityAffinityV1AffinityInput": "",
    "PlayerAffinityAffinityV2AffinityProductInput": "",
    "PlayerAffinityAlias": "",
    "PlayerAffinityAuthorization": "",
    "PlayerAffinityDataSource": "",
    "PlayerAffinityIdClaims": "",
    "PlayerAffinityIdToken": "",
    "PlayerAffinityPlayerAffinityCachedProductAffinity": "",
    "PlayerAffinityPlayerAffinityCachedServiceAffinity": "",
    "PlayerAffinityPlayerAffinityDataSource": "",
    "PlayerAffinityPlayerAffinityPluginConfig": "",
    "PlayerAffinityPlayerAffinityPluginStatus": "",
    "PlayerAffinityPlayerAffinityProductToken": "",
    "PlayerAffinityPlayerAffinityServiceToken": "",
    "PlayerAffinityPlayerAffinityShardInfo": "",
    "PlayerAffinityPlayerAffinityToken": "",
    "PlayerAffinityPlayerAffinityTokenProduct": "",
    "PlayerAffinityProductAffinityInput": "",
    "PlayerAffinityProductToken": "",
    "PlayerAffinityServiceAffinityInput": "",
    "PlayerPreferencesAccessToken": "",
    "PlayerPreferencesAffinityV1AffinityInput": "",
    "PlayerPreferencesAffinityV2AffinityProductInput": "",
    "PlayerPreferencesAlias": "",
    "PlayerPreferencesAuthorization": "",
    "PlayerPreferencesIdClaims": "",
    "PlayerPreferencesIdToken": "",
    "PlayerPreferencesPlayerAffinityCachedProductAffinity": "",
    "PlayerPreferencesPlayerAffinityCachedServiceAffinity": "",
    "PlayerPreferencesPlayerAffinityDataSource": "",
    "PlayerPreferencesPlayerAffinityPluginConfig": "",
    "PlayerPreferencesPlayerAffinityPluginStatus": "",
    "PlayerPreferencesPlayerAffinityProductToken": "",
    "PlayerPreferencesPlayerAffinityServiceToken": "",
    "PlayerPreferencesPlayerAffinityShardInfo": "",
    "PlayerPreferencesPlayerAffinityToken": "",
    "PlayerPreferencesPlayerAffinityTokenProduct": "",
    "PlayerPreferencesPlayerPreferencesData": "",
    "PlayerPreferencesPluginCallerId_MockCallerId": "",
    "PlayerPreferencesPluginCallerId_ProductSession": "",
    "PlayerPreferencesProductAffinityInput": "",
    "PlayerPreferencesRegionLocale": "",
    "PlayerPreferencesServiceAffinityInput": "",
    "PlayerProductsState": "",
    "PlayerReportingAuthorization": "",
    "PlayerReportingGapsMailboxUpdated": "",
    "PlayerReportingLocalizedReporterFeedbackMessage": "",
    "PlayerReportingMail": "",
    "PlayerReportingMailState": "",
    "PlayerReportingMailType": "",
    "PlayerReportingMailboxStatusUpdated": "",
    "PlayerReportingPlayerAffinityInput": "",
    "PlayerReportingPlayerAffinityStatus": "",
    "PlayerReportingPlayerAffinityToken": "",
    "PlayerReportingPlayerReport": "",
    "PlayerReportingPlayerReportV2": "",
    "PlayerReportingRegionLocale": "",
    "PlayerReportingReporterFeedback": "",
    "PlayerReportingReporterFeedbackAcknowledgedEvent": "",
    "PlayerReportingReporterFeedbackDto": "",
    "PlayerReportingReporterFeedbackReceivedEvent": "",
    "PlayerReportingRequestMailParameters": "",
    "PlayerReportingUpdateMailStateRequest": "",
    "PlayerSessionLifecycleAcceptance": "",
    "PlayerSessionLifecycleAccessToken": "",
    "PlayerSessionLifecycleAppleAuthorizationError": "",
    "PlayerSessionLifecycleAppleAuthorizationOpenConnectId": "",
    "PlayerSessionLifecycleAppleAuthorizationParameters": "",
    "PlayerSessionLifecycleAppleAuthorizationResponse": "",
    "PlayerSessionLifecycleAppleAuthorizationResponseType": "",
    "PlayerSessionLifecycleAuthMethodConfig": "",
    "PlayerSessionLifecycleAuthResponseDetails": "",
    "PlayerSessionLifecycleAuthenticateGameCenterInput": "",
    "PlayerSessionLifecycleAuthenticateNintendoInput": "",
    "PlayerSessionLifecycleAuthenticatePlaystationInput": "",
    "PlayerSessionLifecycleAuthenticateXboxInput": "",
    "PlayerSessionLifecycleAuthenticationResponse": "",
    "PlayerSessionLifecycleAuthenticationTypeEnum": "",
    "PlayerSessionLifecycleAuthorizationClassicLogin": "",
    "PlayerSessionLifecycleAuthorizationRequest": "",
    "PlayerSessionLifecycleAuthorizationResponse": "",
    "PlayerSessionLifecycleAuthorizationResponseType": "",
    "PlayerSessionLifecycleEntitlementsToken": "",
    "PlayerSessionLifecycleFacebookAuthorizationError": "",
    "PlayerSessionLifecycleFacebookAuthorizationParameters": "",
    "PlayerSessionLifecycleFacebookAuthorizationResponse": "",
    "PlayerSessionLifecycleFacebookAuthorizationResponseType": "",
    "PlayerSessionLifecycleGameCenterAuthorizationError": "",
    "PlayerSessionLifecycleGameCenterAuthorizationResponse": "",
    "PlayerSessionLifecycleGameCenterAuthorizationResponseType": "",
    "PlayerSessionLifecycleGameCenterInput": "",
    "PlayerSessionLifecycleGameCenterToken": "",
    "PlayerSessionLifecycleGamepassResponseDetails": "",
    "PlayerSessionLifecycleGamepassStatus": "",
    "PlayerSessionLifecycleGoogleAuthorizationError": "",
    "PlayerSessionLifecycleGoogleAuthorizationParameters": "",
    "PlayerSessionLifecycleGoogleAuthorizationResponse": "",
    "PlayerSessionLifecycleGoogleAuthorizationResponseType": "",
    "PlayerSessionLifecycleHealupResponseDetails": "",
    "PlayerSessionLifecycleIdToken": "",
    "PlayerSessionLifecycleImplicitAuthorization": "",
    "PlayerSessionLifecycleInitiateLoginSessionRequest": "",
    "PlayerSessionLifecycleKRIdVerificationResponseDetails": "",
    "PlayerSessionLifecycleLoginPersistenceConfig": "",
    "PlayerSessionLifecycleLoginPhase": "",
    "PlayerSessionLifecycleLoginStatus": "",
    "PlayerSessionLifecycleLoginStrategyType": "",
    "PlayerSessionLifecycleMultifactorDetails": "",
    "PlayerSessionLifecycleMultifactorMethod": "",
    "PlayerSessionLifecycleMultifactorResponseDetails": "",
    "PlayerSessionLifecycleNintendoAccountAuthorization": "",
    "PlayerSessionLifecycleNintendoAccountAuthorizationParameters": "",
    "PlayerSessionLifecycleNintendoAccountAuthorizationResponse": "",
    "PlayerSessionLifecycleNintendoAccountErrorCode": "",
    "PlayerSessionLifecycleNintendoAccountGetNetworkServiceAccountParameters": "",
    "PlayerSessionLifecycleNintendoAccountNetworkServiceAccount": "",
    "PlayerSessionLifecycleNintendoAccountNetworkServiceAccountResponse": "",
    "PlayerSessionLifecycleNintendoAccountV2AuthorizationError": "",
    "PlayerSessionLifecycleNintendoAccountV2AuthorizationParameters": "",
    "PlayerSessionLifecycleNintendoAccountV2AuthorizationResponse": "",
    "PlayerSessionLifecycleNintendoAccountV2AuthorizationResponseType": "",
    "PlayerSessionLifecycleNintendoAccountV2AuthorizationToken": "",
    "PlayerSessionLifecycleNintendoInput": "",
    "PlayerSessionLifecycleOnlinePlatform": "",
    "PlayerSessionLifecyclePlatformLoginPersistenceConfig": "",
    "PlayerSessionLifecyclePlatformLoginPhase": "",
    "PlayerSessionLifecyclePlatformLoginStatus": "",
    "PlayerSessionLifecyclePlatformUser": "",
    "PlayerSessionLifecyclePlayerAccountVngV1StatusResponse": "",
    "PlayerSessionLifecyclePlayerSessionState": "",
    "PlayerSessionLifecyclePlayerSessionStateType": "",
    "PlayerSessionLifecyclePlaystationAccountAuthorization": "",
    "PlayerSessionLifecyclePlaystationAccountAuthorizationParameters": "",
    "PlayerSessionLifecyclePlaystationAccountAuthorizationResponse": "",
    "PlayerSessionLifecyclePlaystationAccountErrorCode": "",
    "PlayerSessionLifecyclePlaystationAccountV2AuthorizationError": "",
    "PlayerSessionLifecyclePlaystationAccountV2AuthorizationNativeCode": "",
    "PlayerSessionLifecyclePlaystationAccountV2AuthorizationParameters": "",
    "PlayerSessionLifecyclePlaystationAccountV2AuthorizationResponse": "",
    "PlayerSessionLifecyclePlaystationAccountV2AuthorizationResponseType": "",
    "PlayerSessionLifecyclePlaystationInput": "",
    "PlayerSessionLifecyclePluginConfigResponse": "",
    "PlayerSessionLifecycleRSOAuthorizationTrustLevel": "",
    "PlayerSessionLifecycleReadyState": "",
    "PlayerSessionLifecycleRegionElectionV1EligibilityResponse": "",
    "PlayerSessionLifecycleResponseType": "",
    "PlayerSessionLifecycleSessionLoginToken": "",
    "PlayerSessionLifecycleSessionResponse": "",
    "PlayerSessionLifecycleSessionResponseType": "",
    "PlayerSessionLifecycleSessionState": "",
    "PlayerSessionLifecycleSignupLinkDetails": "",
    "PlayerSessionLifecycleSignupResponseDetails": "",
    "PlayerSessionLifecycleSuccessResponseDetails": "",
    "PlayerSessionLifecycleSuggestedAction": "",
    "PlayerSessionLifecycleUpdateLoginStrategyRequest": "",
    "PlayerSessionLifecycleUserInfo": "",
    "PlayerSessionLifecycleV1AuthenticateCodeInput": "",
    "PlayerSessionLifecycleV1AuthenticateFacebookInput": "",
    "PlayerSessionLifecycleV1AuthenticateOpenIdConnectInput": "",
    "PlayerSessionLifecycleV1FacebookInput": "",
    "PlayerSessionLifecycleV1OpenIdConnectInput": "",
    "PlayerSessionLifecycleV2AuthorizationError": "",
    "PlayerSessionLifecycleV2AuthorizationParameters": "",
    "PlayerSessionLifecycleV2AuthorizationResponse": "",
    "PlayerSessionLifecycleV2AuthorizationResponseType": "",
    "PlayerSessionLifecycleV2AuthorizationToken": "",
    "PlayerSessionLifecycleWebLinkingStatus": "",
    "PlayerSessionLifecycleWebLinkingStatusResponse": "",
    "PlayerSessionLifecycleXboxAccountAuthorization": "",
    "PlayerSessionLifecycleXboxAccountAuthorizationParameters": "",
    "PlayerSessionLifecycleXboxAccountAuthorizationResponse": "",
    "PlayerSessionLifecycleXboxAccountErrorCode": "",
    "PlayerSessionLifecycleXboxInput": "",
    "PlaystationAccountAuthorization": "",
    "PlaystationAccountAuthorizationParameters": "",
    "PlaystationAccountAuthorizationResponse": "",
    "PlaystationAccountErrorCode": "",
    "PlaystationAccountOnlinePlatform": "",
    "PlaystationAccountPlatformUser": "",
    "PlaystationAccountPluginConfigResponse": "",
    "PlaystationAccountUser": "",
    "PlaystationAccountV1AuthMethodConfig": "",
    "PlaystationAccountV1DisplayMode": "",
    "PlaystationAccountV1WebAuthenticationMethod": "",
    "PlaystationAccountV1WebAuthenticationUrlRequest": "",
    "PlaystationAccountV2AuthorizationError": "",
    "PlaystationAccountV2AuthorizationNativeCode": "",
    "PlaystationAccountV2AuthorizationParameters": "",
    "PlaystationAccountV2AuthorizationResponse": "",
    "PlaystationAccountV2AuthorizationResponseType": "",
    "PluginDescriptionResource": "",
    "PluginLcdsEvent": "",
    "PluginLcdsResponse": "",
    "PluginManagerResource": "",
    "PluginManagerState": "",
    "PluginMetadataResource": "",
    "PluginRegionLocaleChangedEvent": "",
    "PluginResource": "",
    "PluginResourceContract": "",
    "PluginResourceEvent": "",
    "PluginResourceEventType": "",
    "PluginServiceError": "",
    "PluginServiceProxyResponse": "",
    "PluginState": "",
    "PluginThreadingModel": "",
    "PreparePermissionsRequest": "",
    "PrimeGamingPrimeGamingLoginResponse": "",
    "PrimeGamingPrimeGamingLoginStatus": "",
    "PrimeGamingPrimeGamingSupportStatus": "",
    "PrivacyPrivacySettings": "",
    "PrivacyTrackingPermissionRequestState": "",
    "ProcessControlProcess": "",
    "ProductIntegrationAppRepairApplyRequest": "",
    "ProductIntegrationAppUpdateApplyRequest": "",
    "ProductIntegrationAppUpdateStatus": "",
    "ProductIntegrationAppUpdateStatusFile": "",
    "ProductIntegrationDebugAppUpdateStatus": "",
    "ProductIntegrationDepsAppRepairApplyRequest": "",
    "ProductIntegrationDepsAppUpdateApplyRequest": "",
    "ProductIntegrationDepsAppUpdateStatus": "",
    "ProductIntegrationDepsRepairCode": "",
    "ProductIntegrationDetachedSession": "",
    "ProductIntegrationHeartbeatFile": "",
    "ProductIntegrationLocaleDataResource": "",
    "ProductIntegrationLocaleUpdate": "",
    "ProductIntegrationPatchlineMetadata": "",
    "ProductIntegrationProductIntegrationAppRepairBody": "",
    "ProductIntegrationProductIntegrationAppUpdateStatus": "",
    "ProductIntegrationProductSession": "",
    "ProductIntegrationRepairCode": "",
    "ProductIntegrationSettingsToken": "",
    "ProductIntegrationSettingsTokenRequest": "",
    "ProductIntegrationSignoutPermission": "",
    "ProductLauncherAgeRestriction": "",
    "ProductLauncherBuildInfo": "",
    "ProductLauncherDataStoreDataPaths": "",
    "ProductLauncherDataStoreDefaultProduct": "",
    "ProductLauncherDataStorePartnerProduct": "",
    "ProductLauncherDetachedSession": "",
    "ProductLauncherLaunchConfiguration": "",
    "ProductLauncherLoginStatus": "",
    "ProductLauncherLoginStatusResponse": "",
    "ProductLauncherPatchlineResource": "",
    "ProductLauncherProductPatchlineResource": "",
    "ProductLauncherRogueProcessResult": "",
    "ProductLauncherSession": "",
    "ProductLauncherSessionHeartbeat": "",
    "ProductLauncherVngStatusResponse": "",
    "ProductLocalizationConfigType": "",
    "ProductLocalizationContentCookies": "",
    "ProductLocalizationCookie": "",
    "ProductLocalizationPatchlineMetadata": "",
    "ProductLocalizationProductLocalizationData": "",
    "ProductLocalizationProductMetadata": "",
    "ProductLocalizationProductMetadataMap": "",
    "ProductLocalizationTranslateRequest": "",
    "ProductLocalizationTranslateResponse": "",
    "ProductLocalizationTranslateResult": "",
    "ProductLocalizationTranslationsData": "",
    "ProductMetadataAppStoreUpdateInfo": "",
    "ProductMetadataClientProductType": "",
    "ProductMetadataConfigType": "",
    "ProductMetadataConfigurationStatus": "",
    "ProductMetadataContentCookies": "",
    "ProductMetadataCookie": "",
    "ProductMetadataCookieVector": "",
    "ProductMetadataDebugClientConfigSource": "",
    "ProductMetadataDependency": "",
    "ProductMetadataDynamicTagHeuristics": "",
    "ProductMetadataDynamicTags": "",
    "ProductMetadataInstallId": "",
    "ProductMetadataLocaleDataResource": "",
    "ProductMetadataLoginCountry": "",
    "ProductMetadataPatchComponentMetadata": "",
    "ProductMetadataPatchSetMetadata": "",
    "ProductMetadataPatchlineConfigurationMetadata": "",
    "ProductMetadataPatchlineMetadata": "",
    "ProductMetadataPlayerAffinityDataSource": "",
    "ProductMetadataPlayerAffinityPluginStatus": "",
    "ProductMetadataPlayerAffinityProductToken": "",
    "ProductMetadataProductAlias": "",
    "ProductMetadataProductDefinition": "",
    "ProductMetadataProductDefinitionMap": "",
    "ProductMetadataProductMetadata": "",
    "ProductMetadataProductMetadataMap": "",
    "ProductMetadataPublishState": "",
    "ProductMetadataRegionDataResource": "",
    "ProductMetadataRegionLocale": "",
    "ProductMetadataScdCookie": "",
    "ProductMetadataScdCookieVector": "",
    "ProductMetadataScdEnabled": "",
    "ProductMetadataSecondaryPatchlineMap": "",
    "ProductMetadataSecondaryPatchlineMetadata": "",
    "ProductMetadataShardsDataResource": "",
    "ProductPatchline": "",
    "ProductPatchlineInfo": "",
    "ProductRegistryContentCookies": "",
    "ProductRegistryCookie": "",
    "ProductRegistryPatchline": "",
    "ProductRegistryProduct": "",
    "ProductRegistryProductPatchline": "",
    "ProductSession": "",
    "ProductSessionHeartbeatInfo": "",
    "ProductSessionLaunchConfiguration": "",
    "ProductSessionProductPhase": "",
    "ProductSessionSession": "",
    "ProductSessionSessionHeartbeat": "",
    "ProductSessionTerminationReason": "",
    "ProductUpdateScannerAuthorization": "",
    "ProductUpdateScannerConfigType": "",
    "ProductUpdateScannerPatchlineInfo": "",
    "ProductUpdateScannerProductRegistryPatchline": "",
    "ProductUpdateScannerProductRegistryProduct": "",
    "ProductUpdateScannerProductSession": "",
    "PublicProductsState": "",
    "PublishingContentData": "",
    "PublishingContentLinks": "",
    "PublishingContentMetadata": "",
    "PublishingContentMultigameContentGroup": "",
    "PublishingContentNewsFeed": "",
    "PublishingContentNewsFeedRequest": "",
    "PublishingContentNewsItem": "",
    "PublishingContentNewsItemAction": "",
    "PublishingContentNewsItemCategory": "",
    "PublishingContentNewsItemCms": "",
    "PublishingContentNewsItemFeatureImage": "",
    "PublishingContentNewsItemProduct": "",
    "PublishingContentNewsItemRenderOptions": "",
    "RcAuthAuthenticationTypeEnum": "",
    "RcAuthAuthorization": "",
    "RcAuthAuthorizationRequest": "",
    "RcAuthAuthorizationResponse": "",
    "RcAuthAuthorizationResponseType": "",
    "RcAuthGamepassResponseDetails": "",
    "RcAuthGamepassStatus": "",
    "RcAuthLoginRequest": "",
    "RcAuthLoginResponse": "",
    "RcAuthLoginStatus": "",
    "RcAuthLoginStatusResponse": "",
    "RcAuthRSOAuthorizationTrustLevel": "",
    "RcAuthRegionLocale": "",
    "RcAuthRsoAuthenticatorAuthResponse": "",
    "RcAuthSessionResponse": "",
    "RcAuthSessionResponseType": "",
    "RcAuthSuccessResponseDetails": "",
    "RcAuthV1XboxInput": "",
    "RcAuthV1XboxLogin": "",
    "RcInfoRadiatorAuthorization": "",
    "RcInfoRadiatorHomeBaseCountry": "",
    "RcInfoRadiatorLoginCountry": "",
    "RcInfoRadiatorRegionLocale": "",
    "ReferenceEchoRequest": "",
    "ReferenceEchoResponse": "",
    "RegionAssignmentResponse": "",
    "RegionLocale": "",
    "RegisterWatchPathRequest": "",
    "RemotingHelpFormat": "Help format for remoting functions and types.",
    "RemotingPrivilege": "Well-known privilege levels for bindable functions.",
    "RemotingSerializedFormat": "Serialization format for remoting requests and results.",
    "RepairCode": "",
    "RestrictionLaunchRestrictions": "",
    "RestrictionRestrictions": "",
    "RestrictionrestrictionData": "",
    "RiotClientAuthApiAlias": "",
    "RiotClientAuthApiAuthorization": "",
    "RiotClientAuthApiClientDetails": "",
    "RiotClientAuthApiHomeBaseCountry": "",
    "RiotClientAuthApiIdClaims": "",
    "RiotClientAuthApiLoginCountry": "",
    "RiotClientAuthApiUserInfo": "",
    "RiotClientAuthApiUserInfoLol": "",
    "RiotClientAuthApiUserInfoSummoner": "",
    "RiotClientAuthRsoAuthAccessToken": "",
    "RiotClientAuthRsoAuthAuthorizationRequest": "",
    "RiotClientAuthRsoAuthAuthorizationResponse": "",
    "RiotClientAuthRsoAuthAuthorizationResponseType": "",
    "RiotClientAuthRsoAuthAuthorizationTrustLevel": "",
    "RiotClientAuthRsoAuthIdToken": "",
    "RiotClientAuthRsoAuthImplicitAuthorization": "",
    "RiotClientAuthRsoAuthReadyState": "",
    "RiotClientAuthRsoAuthUserInfo": "",
    "RiotClientLifecycleStateBoundState": "",
    "RiotClientLifecycleStatePlayerAffinityProductToken": "",
    "RiotClientLifecycleStateRegionLocale": "",
    "RiotLoginAuthenticationMethod": "",
    "RiotLoginAuthorizationRequest": "",
    "RiotLoginAuthorizationResponse": "",
    "RiotLoginAuthorizationResponseType": "",
    "RiotLoginLoginPersistenceConfig": "",
    "RiotLoginLoginPhase": "",
    "RiotLoginLoginResult": "",
    "RiotLoginLoginStatus": "",
    "RiotLoginLoginTypeEnum": "",
    "RiotLoginOutcome": "",
    "RiotLoginPlatformUser": "",
    "RiotLoginProduct": "",
    "RiotLoginRSOAuthorizationTrustLevel": "",
    "RiotLoginRSOSignOnAttemptEvent": "",
    "RiotLoginReadyState": "",
    "RiotLoginSessionResponse": "",
    "RiotLoginSessionResponseType": "",
    "RiotLoginStoredSessionState": "",
    "RiotMessagingServiceAccessToken": "",
    "RiotMessagingServiceAcknowledgeBody": "",
    "RiotMessagingServiceEntitlementsToken": "",
    "RiotMessagingServiceMessage": "",
    "RiotMessagingServicePlayerServiceAffinityInput": "",
    "RiotMessagingServicePlayerServiceAffinityToken": "",
    "RiotMessagingServiceSession": "",
    "RiotMessagingServiceState": "",
    "RiotMessagingServiceTokenType": "",
    "RiotStatusBuildInfo": "",
    "RiotStatusConfigType": "",
    "RiotStatusCookie": "",
    "RiotStatusPatchlineMetadata": "",
    "RiotStatusProductMetadata": "",
    "RiotStatusProductMetadataMap": "",
    "RmsMessage": "",
    "RnetLifecycleLeagueRegionElectionResource": "",
    "RnetLifecycleProductContext": "",
    "RnetLifecycleRegionAssignmentResponse": "",
    "RnetLifecycleUxCommand": "",
    "RnetPftExternalSurveyData": "",
    "RnetPftInternalSurveyData": "",
    "RnetPftSurvey": "",
    "RnetPftSurveyAction": "",
    "RnetPftSurveyActionType": "",
    "RnetPftSurveyQuestion": "",
    "RnetPftSurveyQuestionType": "",
    "RnetPftSurveyRequest": "",
    "RnetPftSurveyRequestResult": "",
    "RnetPftSurveyType": "",
    "RnetProductRegistryAppImmediateRepairRequest": "",
    "RnetProductRegistryAppRepairApplyRequest": "",
    "RnetProductRegistryAppUpdateApplyRequest": "",
    "RnetProductRegistryAppUpdateStatus": "",
    "RnetProductRegistryAuthorization": "",
    "RnetProductRegistryAvailableDiskSpaceRequest": "",
    "RnetProductRegistryBackgroundPatchingState": "",
    "RnetProductRegistryClientProductType": "",
    "RnetProductRegistryCombinedPatchState": "",
    "RnetProductRegistryConfigType": "",
    "RnetProductRegistryConfigurationResource": "",
    "RnetProductRegistryConfigurationStatus": "",
    "RnetProductRegistryCookie": "",
    "RnetProductRegistryCookies": "",
    "RnetProductRegistryCreateShortcutsRequest": "",
    "RnetProductRegistryDependency": "",
    "RnetProductRegistryDependencyState": "",
    "RnetProductRegistryDirectorySizeRequest": "",
    "RnetProductRegistryDynamicTagHeuristics": "",
    "RnetProductRegistryDynamicTags": "",
    "RnetProductRegistryError": "",
    "RnetProductRegistryHomeBaseCountry": "",
    "RnetProductRegistryInstall": "",
    "RnetProductRegistryInstallState": "",
    "RnetProductRegistryLifecycleStateAppRepairBinding": "",
    "RnetProductRegistryLifecycleStateAppRepairBindingState": "",
    "RnetProductRegistryLifecycleStateHomeBaseCountry": "",
    "RnetProductRegistryLifecycleStatePlayerAffinityProductToken": "",
    "RnetProductRegistryLifecycleStateRegionLocale": "",
    "RnetProductRegistryLocaleDataResource": "",
    "RnetProductRegistryLockedFileInfo": "",
    "RnetProductRegistryManifestProgress": "",
    "RnetProductRegistryMoveInstallOptions": "",
    "RnetProductRegistryMoveInstallStatus": "",
    "RnetProductRegistryMoveInstallStatusPhase": "",
    "RnetProductRegistryPatchRequest": "",
    "RnetProductRegistryPatchRequestOptions": "",
    "RnetProductRegistryPatchStatus": "",
    "RnetProductRegistryPatchStatusState": "",
    "RnetProductRegistryPatchingResource": "",
    "RnetProductRegistryPatchline": "",
    "RnetProductRegistryPatchlineInfo": "",
    "RnetProductRegistryPatchlineMetadata": "",
    "RnetProductRegistryPatchlineUpdate": "",
    "RnetProductRegistryPhase": "",
    "RnetProductRegistryPlayerAffinityProductToken": "",
    "RnetProductRegistryPlayerProductsState": "",
    "RnetProductRegistryPluginState": "",
    "RnetProductRegistryPrepareDirectoryPermissionsRequest": "",
    "RnetProductRegistryPreviewDiff": "",
    "RnetProductRegistryPreviewRequest": "",
    "RnetProductRegistryPreviewStatus": "",
    "RnetProductRegistryPreviewStatusState": "",
    "RnetProductRegistryProductAlias": "",
    "RnetProductRegistryProductDefinition": "",
    "RnetProductRegistryProductDefinitionMap": "",
    "RnetProductRegistryProductInstallStateResource": "",
    "RnetProductRegistryProductMetadata": "",
    "RnetProductRegistryProductMetadataMap": "",
    "RnetProductRegistryProductPatchlineKey": "",
    "RnetProductRegistryProductPatchlineResourceV4": "",
    "RnetProductRegistryProductSession": "",
    "RnetProductRegistryProductV4": "",
    "RnetProductRegistryProgress": "",
    "RnetProductRegistryPublicProductsState": "",
    "RnetProductRegistryPublishState": "",
    "RnetProductRegistryRegionDataResource": "",
    "RnetProductRegistryRegionLocale": "",
    "RnetProductRegistryRegisterWatchPathsRequest": "",
    "RnetProductRegistryRepairCode": "",
    "RnetProductRegistryRepairProgress": "",
    "RnetProductRegistryScdCookie": "",
    "RnetProductRegistryScdCookies": "",
    "RnetProductRegistrySecondaryPatchline": "",
    "RnetProductRegistrySecondaryPatchlineMetadata": "",
    "RnetProductRegistrySecondaryPatchlineResource": "",
    "RnetProductRegistryShardsDataResource": "",
    "RnetProductRegistryUpToDateStatus": "",
    "RnetProductRegistryUpdateProgress": "",
    "RnetSanitizerContainsSanitizedRequest": "",
    "RnetSanitizerContainsSanitizedResponse": "",
    "RnetSanitizerSanitizeRequest": "",
    "RnetSanitizerSanitizeResponse": "",
    "RnetSanitizerSanitizerStatus": "",
    "RnetSelfUpdateBuildInfo": "",
    "RnetSelfUpdateInstall": "",
    "RnetSelfUpdateManifestProgress": "",
    "RnetSelfUpdatePatchError": "",
    "RnetSelfUpdatePhase": "",
    "RnetSelfUpdateProgress": "",
    "RnetSelfUpdateRelease": "",
    "RnetSelfUpdateReleaseError": "",
    "RnetSelfUpdateReleaseState": "",
    "RnetSelfUpdateSeedProgress": "",
    "RnetSelfUpdateSeedRequest": "",
    "RnetSelfUpdateSeedStatus": "",
    "RnetSelfUpdateSeedStatusState": "",
    "RnetSelfUpdateStatus": "",
    "RsoAuthAccessToken": "",
    "RsoAuthAuthError": "",
    "RsoAuthAuthHint": "",
    "RsoAuthAuthHintType": "",
    "RsoAuthAuthenticationTypeEnum": "",
    "RsoAuthAuthorization": "",
    "RsoAuthAuthorizationCode": "",
    "RsoAuthAuthorizationKey": "",
    "RsoAuthAuthorizationKeyRequest": "",
    "RsoAuthAuthorizationRequest": "",
    "RsoAuthAuthorizationRequestTelemetryContext": "",
    "RsoAuthAuthorizationResponse": "",
    "RsoAuthAuthorizationResponseTelemetryContext": "",
    "RsoAuthAuthorizationResponseType": "",
    "RsoAuthAuthorizationUpdateRequest": "",
    "RsoAuthClientAuthorizationState": "",
    "RsoAuthClientAuthorizationTelemetryContext": "",
    "RsoAuthConfigV3AMRValuesSupported": "",
    "RsoAuthConfigV3AuthProgress": "",
    "RsoAuthConfigV3OpenIdConfiguration": "",
    "RsoAuthConfigV3PartnerAuthConfig": "",
    "RsoAuthConfigV3ReadyState": "",
    "RsoAuthDeviceId": "",
    "RsoAuthEntitlementsToken": "",
    "RsoAuthGameCenterAuthCredentials": "",
    "RsoAuthGarenaPartnerCredentials": "",
    "RsoAuthGoogleAuthCredentials": "",
    "RsoAuthHttpCookie": "",
    "RsoAuthHttpCookieJar": "",
    "RsoAuthIdToken": "",
    "RsoAuthImplicitAuthorization": "",
    "RsoAuthImplicitGrantModeTelemetryContext": "",
    "RsoAuthLoginAMR": "",
    "RsoAuthLogoutReason": "",
    "RsoAuthMSDKQQPartnerCredentials": "",
    "RsoAuthMSDKV5PartnerCredentials": "",
    "RsoAuthMSDKWeChatPartnerCredentials": "",
    "RsoAuthMultifactorDetails": "",
    "RsoAuthMultifactorMethod": "",
    "RsoAuthPartnerCredentials": "",
    "RsoAuthPartnerCredentialsV3": "",
    "RsoAuthPublicClientConfig": "",
    "RsoAuthRSOAuthTelemetryContext": "",
    "RsoAuthRSOAuthorizationSubmission": "",
    "RsoAuthRSOAuthorizationTelemetryContext": "",
    "RsoAuthRSOAuthorizationTrustLevel": "",
    "RsoAuthRSOCredentialSubmission": "",
    "RsoAuthRSOJWTConfig": "",
    "RsoAuthRSOOTPSubmission": "",
    "RsoAuthRSOPlayerCredentials": "",
    "RsoAuthRSOReauthenticationSubmission": "",
    "RsoAuthSessionCredentials": "",
    "RsoAuthSessionLoginToken": "",
    "RsoAuthSessionMultifactor": "",
    "RsoAuthSessionReauthentication": "",
    "RsoAuthSessionResponse": "",
    "RsoAuthSessionResponseType": "",
    "RsoAuthSessionSignup": "",
    "RsoAuthStatusMessage": "",
    "RsoAuthTelemetryEvent": "",
    "RsoAuthTencentPartnerCredentials": "",
    "RsoAuthTokenContext": "",
    "RsoAuthUserInfo": "",
    "RsoAuthWeGamePartnerCredentials": "",
    "RsoAuthenticatorAuthConfigResponse": "",
    "RsoAuthenticatorAuthenticationTypeEnum": "",
    "RsoAuthenticatorHttpCookie": "",
    "RsoAuthenticatorPlatformUser": "",
    "RsoAuthenticatorPluginConfigResponse": "",
    "RsoAuthenticatorRSOAuthorizationTrustLevel": "",
    "RsoAuthenticatorReadyState": "",
    "RsoAuthenticatorRegionLocale": "",
    "RsoAuthenticatorRsoAuthAccessToken": "",
    "RsoAuthenticatorRsoAuthAuthorizationRequest": "",
    "RsoAuthenticatorRsoAuthAuthorizationResponse": "",
    "RsoAuthenticatorRsoAuthAuthorizationResponseType": "",
    "RsoAuthenticatorRsoAuthIdToken": "",
    "RsoAuthenticatorRsoAuthImplicitAuthorization": "",
    "RsoAuthenticatorRsoAuthSessionLoginToken": "",
    "RsoAuthenticatorV1AuthMethodConfig": "",
    "RsoAuthenticatorV1AuthResponseDetails": "",
    "RsoAuthenticatorV1AuthenticateCodeInput": "",
    "RsoAuthenticatorV1AuthenticateFacebookInput": "",
    "RsoAuthenticatorV1AuthenticateGameCenterInput": "",
    "RsoAuthenticatorV1AuthenticateMultifactorInput": "",
    "RsoAuthenticatorV1AuthenticateNintendoInput": "",
    "RsoAuthenticatorV1AuthenticateOpenIdConnectInput": "",
    "RsoAuthenticatorV1AuthenticatePlaystationInput": "",
    "RsoAuthenticatorV1AuthenticateXboxInput": "",
    "RsoAuthenticatorV1AuthenticationRedirectInput": "",
    "RsoAuthenticatorV1AuthenticationRequest": "",
    "RsoAuthenticatorV1AuthenticationResponse": "",
    "RsoAuthenticatorV1AuthenticationRsoInput": "",
    "RsoAuthenticatorV1Captcha": "",
    "RsoAuthenticatorV1CaptchaType": "",
    "RsoAuthenticatorV1CodeExchangeInput": "",
    "RsoAuthenticatorV1DisplayMode": "",
    "RsoAuthenticatorV1FacebookInput": "",
    "RsoAuthenticatorV1GameCenterInput": "",
    "RsoAuthenticatorV1GamepassResponseDetails": "",
    "RsoAuthenticatorV1GamepassStatus": "",
    "RsoAuthenticatorV1HCaptcha": "",
    "RsoAuthenticatorV1HealupResponseDetails": "",
    "RsoAuthenticatorV1KRIdVerificationResponseDetails": "",
    "RsoAuthenticatorV1LoginRequest": "",
    "RsoAuthenticatorV1MultifactorInput": "",
    "RsoAuthenticatorV1MultifactorResponseDetails": "",
    "RsoAuthenticatorV1MultifactorResponseType": "",
    "RsoAuthenticatorV1NintendoInput": "",
    "RsoAuthenticatorV1OpenIdConnectInput": "",
    "RsoAuthenticatorV1PlaystationInput": "",
    "RsoAuthenticatorV1ResendLinkRequest": "",
    "RsoAuthenticatorV1ResponseType": "",
    "RsoAuthenticatorV1RiotIdentityAuthCompleteInput": "",
    "RsoAuthenticatorV1RiotIdentityAuthCompleteRequest": "",
    "RsoAuthenticatorV1RiotIdentityAuthStartInput": "",
    "RsoAuthenticatorV1RiotIdentityInput": "",
    "RsoAuthenticatorV1RiotIdentitySignupCompleteInput": "",
    "RsoAuthenticatorV1RiotIdentitySignupCompleteRequest": "",
    "RsoAuthenticatorV1RiotIdentitySignupCreateInput": "",
    "RsoAuthenticatorV1RiotIdentitySignupStartInput": "",
    "RsoAuthenticatorV1RsoInput": "",
    "RsoAuthenticatorV1SignupCodeLinking": "",
    "RsoAuthenticatorV1SignupLinkDetails": "",
    "RsoAuthenticatorV1SignupLinkRequest": "",
    "RsoAuthenticatorV1SignupResponseDetails": "",
    "RsoAuthenticatorV1SuccessResponseDetails": "",
    "RsoAuthenticatorV1WebAuthenticationMethod": "",
    "RsoAuthenticatorV1WebAuthenticationUrlRequest": "",
    "RsoAuthenticatorV1WebLinkingStatus": "",
    "RsoAuthenticatorV1WebLinkingStatusResponse": "",
    "RsoAuthenticatorV1XboxInput": "",
    "RsoMobileUiAcceptance": "",
    "RsoMobileUiAccountDeletionV1AccountDeletionUIStatus": "",
    "RsoMobileUiAccountDeletionV1AccountDeletionUIStatusType": "",
    "RsoMobileUiAccountDeletionV1HomeBaseCountry": "",
    "RsoMobileUiAccountPromotionStatus": "",
    "RsoMobileUiAccountPromotionStatusType": "",
    "RsoMobileUiAliasValidationReason": "",
    "RsoMobileUiAliasesV1Alias": "",
    "RsoMobileUiAliasesV1AliasInput": "",
    "RsoMobileUiAliasesV1EligibilityResponse": "",
    "RsoMobileUiAliasesV1GenerateTaglineInput": "",
    "RsoMobileUiAliasesV1GenerateTaglineResponse": "",
    "RsoMobileUiAliasesV1StatusResponse": "",
    "RsoMobileUiAuthMethodConfig": "",
    "RsoMobileUiAuthenticationMethod": "",
    "RsoMobileUiAuthenticationRedirectRequest": "",
    "RsoMobileUiConfigReadinessEnum": "",
    "RsoMobileUiConfigStatus": "",
    "RsoMobileUiEULAUIInitiate": "",
    "RsoMobileUiEULAUIStatus": "",
    "RsoMobileUiEULAUIStatusType": "",
    "RsoMobileUiEULAUIV2Agreement": "",
    "RsoMobileUiEULAUIV2Config": "",
    "RsoMobileUiEULAUIV2Status": "",
    "RsoMobileUiEULAUIV2StatusType": "",
    "RsoMobileUiFederatedAuthState": "",
    "RsoMobileUiFederatedAuthStateType": "",
    "RsoMobileUiFederatedLoginRequest": "",
    "RsoMobileUiGameOutOfDateUIInitiate": "",
    "RsoMobileUiIOSEventInfo": "",
    "RsoMobileUiKrAccountPromotionSession": "",
    "RsoMobileUiLoginInitiateRequest": "",
    "RsoMobileUiLoginStatus": "",
    "RsoMobileUiLoginStatusType": "",
    "RsoMobileUiLoginStrategyInfo": "",
    "RsoMobileUiLoginStrategyType": "",
    "RsoMobileUiLoginTypeEnum": "",
    "RsoMobileUiLoginV1Request": "",
    "RsoMobileUiOutcome": "",
    "RsoMobileUiPSLPlayerSessionState": "",
    "RsoMobileUiPlatformUser": "",
    "RsoMobileUiPluginConfigResponse": "",
    "RsoMobileUiProduct": "",
    "RsoMobileUiRSOAuthorizationTrustLevel": "",
    "RsoMobileUiRSOSignOnAttemptEvent": "",
    "RsoMobileUiRegionElectionV1EligibilityResponse": "",
    "RsoMobileUiRegionElectionV1InitiateRequest": "",
    "RsoMobileUiRegionElectionV1RegionElection": "",
    "RsoMobileUiRegionElectionV1UpdateRequest": "",
    "RsoMobileUiRegionsV1EligibilityCheckResponse": "",
    "RsoMobileUiRegionsV1RegionAssignmentResponse": "",
    "RsoMobileUiRegionsV1RegionAssignmentResponseMessage": "",
    "RsoMobileUiRiotIDPromptV1GenerateTaglineRequest": "",
    "RsoMobileUiRiotIDPromptV1GenerateTaglineResponse": "",
    "RsoMobileUiRiotIDPromptV1InitiateRequest": "",
    "RsoMobileUiRiotIDPromptV1RiotIDPrompt": "",
    "RsoMobileUiRiotIDPromptV1RiotIDPromptReason": "",
    "RsoMobileUiRiotIDPromptV1UpdateRequest": "",
    "RsoMobileUiRsoAuthAccessToken": "",
    "RsoMobileUiRsoAuthAuthorizationRequest": "",
    "RsoMobileUiRsoAuthAuthorizationResponse": "",
    "RsoMobileUiRsoAuthAuthorizationResponseType": "",
    "RsoMobileUiRsoAuthIdToken": "",
    "RsoMobileUiRsoAuthImplicitAuthorization": "",
    "RsoMobileUiRsoAuthMultifactorDetails": "",
    "RsoMobileUiRsoAuthMultifactorMethod": "",
    "RsoMobileUiRsoAuthOpenIdConfiguration": "",
    "RsoMobileUiRsoAuthSessionLoginToken": "",
    "RsoMobileUiRsoAuthSessionResponse": "",
    "RsoMobileUiRsoAuthSessionResponseType": "",
    "RsoMobileUiRsoAuthSessionState": "",
    "RsoMobileUiRsoAuthenticatorAuthenticateCodeInput": "",
    "RsoMobileUiRsoAuthenticatorAuthenticateFacebookInput": "",
    "RsoMobileUiRsoAuthenticatorAuthenticateGameCenterInput": "",
    "RsoMobileUiRsoAuthenticatorAuthenticateMultifactorInput": "",
    "RsoMobileUiRsoAuthenticatorAuthenticateOpenIdConnectInput": "",
    "RsoMobileUiRsoAuthenticatorAuthenticateRiotIdentityInput": "",
    "RsoMobileUiRsoAuthenticatorAuthenticationResponse": "",
    "RsoMobileUiRsoAuthenticatorDisplayMode": "",
    "RsoMobileUiRsoAuthenticatorFacebookInput": "",
    "RsoMobileUiRsoAuthenticatorGameCenterInput": "",
    "RsoMobileUiRsoAuthenticatorGamepassResponseDetails": "",
    "RsoMobileUiRsoAuthenticatorGamepassStatus": "",
    "RsoMobileUiRsoAuthenticatorHealupResponseDetails": "",
    "RsoMobileUiRsoAuthenticatorMultifactorInput": "",
    "RsoMobileUiRsoAuthenticatorMultifactorResponseDetails": "",
    "RsoMobileUiRsoAuthenticatorOpenIdConnectInput": "",
    "RsoMobileUiRsoAuthenticatorResponseType": "",
    "RsoMobileUiRsoAuthenticatorRiotIdentityInput": "",
    "RsoMobileUiRsoAuthenticatorSignupLinkDetails": "",
    "RsoMobileUiRsoAuthenticatorSignupResponseDetails": "",
    "RsoMobileUiRsoAuthenticatorSuccessResponseDetails": "",
    "RsoMobileUiRsoAuthenticatorWebAuthenticationMethod": "",
    "RsoMobileUiRsoAuthenticatorWebAuthenticationUrlRequest": "",
    "RsoMobileUiStoredSessionState": "",
    "RsoMobileUiUIAccountPromotionFieldResponse": "",
    "RsoMobileUiUIAccountPromotionResponse": "",
    "RsoMobileUiUIAuthorization": "",
    "RsoMobileUiUIEligibilityCheckResponse": "",
    "RsoMobileUiUIMSDKQQPartnerCredentials": "",
    "RsoMobileUiUIMSDKWeChatPartnerCredentials": "",
    "RsoMobileUiUIPartnerCredentials": "",
    "RsoMobileUiUIWebViewIncomingCloseRequest": "",
    "RsoMobileUiUIWebViewIncomingError": "",
    "RsoMobileUiUIWebViewIncomingResourceRequest": "",
    "RsoMobileUiUIWebViewOutgoingResourceData": "",
    "RsoMobileUiUIWebViewOutgoingResourceNotification": "",
    "RsoMobileUiUIWebViewOutgoingResourceNotificationData": "",
    "RsoMobileUiUIWebViewOutgoingResourceRequest": "",
    "RsoMobileUiVngV1RegistrationUIStatus": "",
    "RsoMobileUiVngV1RegistrationUIStatusType": "",
    "RsoMobileUiVngV1StatusResponse": "",
    "RsoMobileUiWebViewAccountPromotionResponse": "",
    "SGPErrorMessage": "",
    "SGPErrorResponse": "",
    "ScdCookie": "",
    "ScdCookies": "",
    "ScdEntitlementsToken": "",
    "ScdProductSession": "",
    "ScdScdEnabled": "",
    "SocialBlockList": "",
    "SocialBlockedUser": "",
    "SocialErrorCode": "",
    "SocialFriend": "",
    "SocialFriendList": "",
    "SocialLookupV1GameNameTaglinePASResponse": "",
    "SocialLookupV1GamerNameAndTagline": "",
    "SocialLookupV1NamesetsForPuuidPASResponse": "",
    "SocialLookupV1NamesetsForPuuidRequest": "",
    "SocialLookupV1NamesetsForPuuidResponse": "",
    "SocialLookupV1NamesetsForPuuidsRequest": "",
    "SocialLookupV1NamesetsForPuuidsResponse": "",
    "SocialLookupV1PlaystationNameset": "",
    "SocialLookupV1PuuidAndProvider": "",
    "SocialLookupV1PuuidsForConsoleIdsRequest": "",
    "SocialLookupV1PuuidsForConsoleIdsResponse": "",
    "SocialLookupV1SwitchNameset": "",
    "SocialLookupV1XboxNameset": "",
    "SocialOnlinePlatform": "",
    "SocialPlatformUser": "",
    "SocialProductContext": "",
    "SocialUser": "",
    "StructuredLogRequest": "",
    "SystemInfoAuthorization": "",
    "SystemInfoProcessInfo": "",
    "SystemTrayBuildInfo": "",
    "SystemTrayConfigurationStatus": "",
    "SystemTrayContentCookies": "",
    "SystemTrayCookie": "",
    "SystemTrayNotificationData": "",
    "SystemTrayPatcherProductState": "",
    "SystemTrayPatcherProductStateAction": "",
    "SystemTrayPatchingResource": "",
    "SystemTrayPatchline": "",
    "SystemTrayProductContext": "",
    "SystemTrayProductPatchlineResourceV4": "",
    "SystemTrayProductSessionSession": "",
    "SystemTrayProductV4": "",
    "SystemTrayThemeManifest": "",
    "SystemTrayUxCommand": "",
    "TencentLauncherAccessToken": "",
    "TencentLauncherAuthError": "",
    "TencentLauncherAuthHint": "",
    "TencentLauncherAuthHintType": "",
    "TencentLauncherAuthenticationTypeEnum": "",
    "TencentLauncherAuthorization": "",
    "TencentLauncherAuthorizationCode": "",
    "TencentLauncherAuthorizationKey": "",
    "TencentLauncherAuthorizationKeyRequest": "",
    "TencentLauncherAuthorizationRequest": "",
    "TencentLauncherAuthorizationRequestTelemetryContext": "",
    "TencentLauncherAuthorizationResponse": "",
    "TencentLauncherAuthorizationResponseTelemetryContext": "",
    "TencentLauncherAuthorizationResponseType": "",
    "TencentLauncherAuthorizationUpdateRequest": "",
    "TencentLauncherClientAuthorizationState": "",
    "TencentLauncherClientAuthorizationTelemetryContext": "",
    "TencentLauncherConfigV3AMRValuesSupported": "",
    "TencentLauncherConfigV3AuthProgress": "",
    "TencentLauncherConfigV3OpenIdConfiguration": "",
    "TencentLauncherConfigV3PartnerAuthConfig": "",
    "TencentLauncherConfigV3ReadyState": "",
    "TencentLauncherDeviceId": "",
    "TencentLauncherEntitlementsToken": "",
    "TencentLauncherGameCenterAuthCredentials": "",
    "TencentLauncherGarenaPartnerCredentials": "",
    "TencentLauncherGoogleAuthCredentials": "",
    "TencentLauncherHttpCookie": "",
    "TencentLauncherHttpCookieJar": "",
    "TencentLauncherIdToken": "",
    "TencentLauncherImplicitAuthorization": "",
    "TencentLauncherImplicitGrantModeTelemetryContext": "",
    "TencentLauncherLoginAMR": "",
    "TencentLauncherLogoutReason": "",
    "TencentLauncherMSDKQQPartnerCredentials": "",
    "TencentLauncherMSDKV5PartnerCredentials": "",
    "TencentLauncherMSDKWeChatPartnerCredentials": "",
    "TencentLauncherMultifactorDetails": "",
    "TencentLauncherMultifactorMethod": "",
    "TencentLauncherPartnerCredentials": "",
    "TencentLauncherPartnerCredentialsV3": "",
    "TencentLauncherProductIntegrationAppUpdateStatus": "",
    "TencentLauncherProductSessionHeartbeatInfo": "",
    "TencentLauncherProductSessionProductPhase": "",
    "TencentLauncherPublicClientConfig": "",
    "TencentLauncherRSOAuthTelemetryContext": "",
    "TencentLauncherRSOAuthorizationSubmission": "",
    "TencentLauncherRSOAuthorizationTelemetryContext": "",
    "TencentLauncherRSOAuthorizationTrustLevel": "",
    "TencentLauncherRSOCredentialSubmission": "",
    "TencentLauncherRSOJWTConfig": "",
    "TencentLauncherRSOOTPSubmission": "",
    "TencentLauncherRSOPlayerCredentials": "",
    "TencentLauncherRSOReauthenticationSubmission": "",
    "TencentLauncherSessionCredentials": "",
    "TencentLauncherSessionLoginToken": "",
    "TencentLauncherSessionMultifactor": "",
    "TencentLauncherSessionReauthentication": "",
    "TencentLauncherSessionResponse": "",
    "TencentLauncherSessionResponseType": "",
    "TencentLauncherSessionSignup": "",
    "TencentLauncherStatusMessage": "",
    "TencentLauncherTelemetryEvent": "",
    "TencentLauncherTencentLauncherLoginArguments": "",
    "TencentLauncherTencentLauncherLoginInfo": "",
    "TencentLauncherTencentPartnerCredentials": "",
    "TencentLauncherTokenContext": "",
    "TencentLauncherUserInfo": "",
    "TencentLauncherWeGamePartnerCredentials": "",
    "ThirdPartyDependencyRequest": "",
    "ThirdPartyDependencyStatesV2": "",
    "ThirdPartyDependencyStatus": "",
    "ThirdPartyDependencyStatusPhase": "",
    "UriHandlerRequest": "",
    "UserInfo": "",
    "UxCommand": "",
    "UxCommandAction": "",
    "VanguardAuthorization": "",
    "VanguardInjectorInstallState": "",
    "VanguardInjectorProductInstallStateResource": "",
    "VanguardInstallState": "",
    "VanguardPatchlineDependency": "",
    "VanguardPatchlineMetadata": "",
    "VanguardPluginState": "",
    "VanguardProductInstallStateResource": "",
    "VanguardProductSession": "",
    "VanguardPublishState": "",
    "VanguardScdCookie": "",
    "VanguardScdCookies": "",
    "VanguardScdEnabled": "",
    "VanguardUpToDateStatus": "",
    "VngAccountRequiredStatus": "",
    "VoiceChatAccessToken": "",
    "VoiceChatAudioPropertiesResource": "",
    "VoiceChatAuthorization": "",
    "VoiceChatBlockList": "",
    "VoiceChatBlockedUser": "",
    "VoiceChatCaptureDevicePermissionStatus": "",
    "VoiceChatDebugCSRFileWritingRequest": "",
    "VoiceChatDebugCSRFileWritingResponse": "",
    "VoiceChatDebugSimulationResource": "",
    "VoiceChatDeviceResource": "",
    "VoiceChatGamepadPTTButton": "",
    "VoiceChatIdToken": "",
    "VoiceChatJoinSession": "",
    "VoiceChatKeyCombo": "",
    "VoiceChatLogoutReason": "",
    "VoiceChatOnlinePlatform": "",
    "VoiceChatPTTMode": "",
    "VoiceChatParticipantResource": "",
    "VoiceChatProductSession": "",
    "VoiceChatPttVersion": "",
    "VoiceChatPushToTalkKey": "",
    "VoiceChatPushToTalkResource": "",
    "VoiceChatPushToTalkTransmitState": "",
    "VoiceChatSessionResource": "",
    "VoiceChatSessionStatus": "",
    "VoiceChatSettingsResource": "",
    "VoiceChatStateResource": "",
    "VoiceChatTencentLauncherLoginInfo": "",
    "VoiceChatUnnormalizedKeyCombo": "",
    "VoiceChatUnnormalizedPushToTalkKey": "",
    "VoiceChatUnnormalizedPushToTalkResource": "",
    "VoiceChatUpdateParticipantResource": "",
    "VoiceChatUpdateSessionResource": "",
    "VoiceChatUpdateSettingsResource": "",
    "VoiceChatV3PushToTalkResource": "",
    "VoiceChatVivoxCallStats": "",
    "VoiceChatVoiceChatCSRCaptureEvent": "",
    "VoiceChatVoiceChatCSRCaptureResult": "",
    "VoiceChatVoiceChatCSRInitializationEvent": "",
    "VoiceChatVoiceChatCSRInitializationResult": "",
    "VoiceChatVoiceChatCSRMonitoringEvent": "",
    "VoiceChatVoiceChatCSRUploadEvent": "",
    "VoiceChatVoiceChatCSRUploadReason": "",
    "VoiceChatVoiceChatCSRUploadResult": "",
    "VoiceChatVoiceChatHeartbeatMetrics": "",
    "VoiceChatVoiceChatHeartbeatMetrics_PerProductData": "",
    "VoiceChatVoiceChatHeartbeatMetrics_PerProviderData": "",
    "XBGPRegistryRequest": "",
    "XbgpAcceptance": "",
    "XbgpAcceptanceResponse": "",
    "XboxAccountAuthorization": "",
    "XboxAccountAuthorizationParameters": "",
    "XboxAccountAuthorizationResponse": "",
    "XboxAccountErrorCode": "",
    "XboxAccountOnlinePlatform": "",
    "XboxAccountPlatformUser": "",
    "XboxAccountPluginConfigResponse": "",
    "XboxAccountSelectUserParameters": "",
    "XboxAccountSignInOptions": "",
    "XboxAccountV1AuthMethodConfig": "",
    "XboxAccountV1DisplayMode": "",
    "XboxAccountV1WebAuthenticationMethod": "",
    "XboxAccountV1WebAuthenticationUrlRequest": "",
    "XboxAccountV2AuthorizationError": "",
    "XboxAccountV2AuthorizationParameters": "",
    "XboxAccountV2AuthorizationResponse": "",
    "XboxAccountV2AuthorizationResponseType": "",
    "XboxAccountV2AuthorizationToken": "",
    "basicOperatingSystemInfo": "User Experience Settings Operating System Information",
    "basicSystemInfo": "User Experience Settings System Information"
  }
}
