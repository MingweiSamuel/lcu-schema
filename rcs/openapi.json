{
  "components": {
    "schemas": {
      "AccountsSecurityAccountsSecurity": {
        "properties": {
          "action": {
            "type": "string"
          },
          "granted": {
            "default": true,
            "type": "boolean"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountsSecurityHomeBaseCountry": {
        "properties": {
          "home_base_country": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountsSecurityProductSessionSession": {
        "properties": {
          "productId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgeRestrictionAgeRestriction": {
        "properties": {
          "productId": {
            "type": "string"
          },
          "restricted": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AgeRestrictionHomeBaseCountry": {
        "properties": {
          "home_base_country": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AntiAddictionAntiAddictionConfig": {
        "properties": {
          "backendUrl": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "heartbeatInterval": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "AntiAddictionAntiAddictionPolicy": {
        "properties": {
          "hopePayload": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "localizationKey": {
            "type": "string"
          },
          "payloadToken": {
            "type": "string"
          },
          "policyType": {
            "$ref": "#/components/schemas/AntiAddictionPolicyType",
            "default": "shutdown"
          },
          "triggerTimeInSec": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AntiAddictionAntiAddictionState": {
        "properties": {
          "displayType": {
            "$ref": "#/components/schemas/AntiAddictionDisplayType",
            "default": "MODAL_DIALOG"
          },
          "hopePayload": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "localizationContext": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "localizationKey": {
            "type": "string"
          },
          "payloadToken": {
            "type": "string"
          },
          "policyType": {
            "$ref": "#/components/schemas/AntiAddictionPolicyType",
            "default": "shutdown"
          }
        },
        "type": "object"
      },
      "AntiAddictionDisplayType": {
        "enum": [
          "MODAL_DIALOG",
          "PASSIVE_DIPLAY"
        ],
        "type": "string"
      },
      "AntiAddictionPolicyType": {
        "enum": [
          "shutdown",
          "playTime",
          "warningMessage",
          "disableMatchMaking",
          "hopeWarning",
          "hopeRewardRate",
          "hopeShutdown",
          "hopeHeartbeat"
        ],
        "type": "string"
      },
      "AntiAddictionProductSessionSession": {
        "properties": {
          "productId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppCommandAuthStatus": {
        "properties": {
          "error": {
            "nullable": true,
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/AppCommandAuthStatusState",
            "default": "Unknown"
          }
        },
        "type": "object"
      },
      "AppCommandAuthStatusState": {
        "description": "Auth status state.",
        "enum": [
          "Unknown",
          "Succeeded",
          "Failed"
        ],
        "type": "string"
      },
      "AppCommandAuthorizationResponse": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AppCommandAuthorizationResponseType",
            "description": "The results of the authorization."
          }
        },
        "type": "object"
      },
      "AppCommandAuthorizationResponseType": {
        "description": "Authorization response to indicate the follow up for the login flow.",
        "enum": [
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ],
        "type": "string"
      },
      "AppCommandCommand": {
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/AppCommandCommandKind",
            "default": "Unknown"
          },
          "payload": {
            "additionalProperties": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "AppCommandCommandAuthV1": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppCommandCommandKind": {
        "enum": [
          "Unknown",
          "AuthV1",
          "Vng"
        ],
        "type": "string"
      },
      "AppCommandCommandVng": {
        "properties": {
          "productId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppFocusRequest": {
        "properties": {
          "reason": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppInfo": {
        "properties": {
          "name": {
            "description": "Name of the host application",
            "type": "string"
          },
          "patchline": {
            "description": "Patchline of the host application",
            "type": "string"
          },
          "patchlineVisibleName": {
            "description": "Player-visible name of the patchline",
            "type": "string"
          },
          "publisher": {
            "description": "Publisher for the current installation",
            "type": "string"
          },
          "sdkVersion": {
            "description": "Version of RiotGamesApi loaded by the host application",
            "type": "string"
          },
          "version": {
            "description": "Version of the host application",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthenticationTypeEnum": {
        "enum": [
          "SSOAuth"
        ],
        "type": "string"
      },
      "BindingFullApiHelp": {
        "description": "Describes the exposed native API.",
        "properties": {
          "events": {
            "items": {
              "$ref": "#/components/schemas/BindingFullEventHelp"
            },
            "type": "array"
          },
          "functions": {
            "items": {
              "$ref": "#/components/schemas/BindingFullFunctionHelp"
            },
            "type": "array"
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/BindingFullTypeHelp"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BindingFullArgumentHelp": {
        "description": "Describes a function parameter.",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "optional": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/BindingFullTypeIdentifier"
          }
        },
        "type": "object"
      },
      "BindingFullEnumValueHelp": {
        "description": "Describes an enumerator.",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BindingFullEventHelp": {
        "description": "Describes an event.",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nameSpace": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "$ref": "#/components/schemas/BindingFullTypeIdentifier"
          }
        },
        "type": "object"
      },
      "BindingFullFieldHelp": {
        "description": "Describes a member of a struct.",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "offset": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "optional": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/BindingFullTypeIdentifier"
          }
        },
        "type": "object"
      },
      "BindingFullFunctionHelp": {
        "description": "Describes a function.",
        "properties": {
          "arguments": {
            "items": {
              "$ref": "#/components/schemas/BindingFullArgumentHelp"
            },
            "type": "array"
          },
          "deprecated": {
            "type": "boolean"
          },
          "deprecatedHelp": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "help": {
            "type": "string"
          },
          "internal": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "nameSpace": {
            "type": "string"
          },
          "returns": {
            "$ref": "#/components/schemas/BindingFullTypeIdentifier"
          },
          "subscribable": {
            "type": "boolean"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "threadSafe": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "BindingFullTypeHelp": {
        "description": "Describes a struct or enum type.",
        "properties": {
          "description": {
            "type": "string"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/BindingFullFieldHelp"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "nameSpace": {
            "type": "string"
          },
          "size": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/BindingFullEnumValueHelp"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BindingFullTypeIdentifier": {
        "description": "Describes the type of a value.",
        "properties": {
          "elementType": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "BindingHelpFormat": {
        "description": "Help format for binding functions and types.",
        "enum": [
          "Full",
          "Epytext"
        ],
        "type": "string"
      },
      "ChatAccountChatSettings": {
        "properties": {
          "bounceDockIconEnabled": {
            "default": true,
            "type": "boolean"
          },
          "chat-status-message": {
            "type": "string"
          },
          "chatFilterDisabled": {
            "type": "boolean"
          },
          "chatGBG": {
            "type": "boolean"
          },
          "chatGroupMobile": {
            "type": "boolean"
          },
          "chatGroupOffline": {
            "type": "boolean"
          },
          "chatWindow": {
            "$ref": "#/components/schemas/ChatChatWindowSettings",
            "default": {
              "height": 366,
              "width": 530
            }
          },
          "chatWindowDockedHeight": {
            "default": 366,
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "closed-conversations": {
            "additionalProperties": {
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            },
            "type": "object"
          },
          "friendRequestToastsDisabled": {
            "type": "boolean"
          },
          "hidden-conversations": {
            "additionalProperties": {
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            },
            "type": "object"
          },
          "linkClickWarningEnabled": {
            "default": true,
            "type": "boolean"
          },
          "messageNotificationsEnabled": {
            "type": "boolean"
          },
          "moreUnreadsEnabled": {
            "default": true,
            "type": "boolean"
          },
          "muted-conversations": {
            "additionalProperties": {
              "maximum": 127,
              "minimum": -128,
              "type": "integer"
            },
            "type": "object"
          },
          "recentlyPlayedFirstOpen": {
            "type": "boolean"
          },
          "recentlyPlayedOpen": {
            "type": "boolean"
          },
          "roster-group-collapsed": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object"
          },
          "showWhenTypingEnabled": {
            "type": "boolean"
          },
          "sortBy": {
            "default": "availability",
            "type": "string"
          },
          "usePlayerPreferences": {
            "default": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ChatAccountState": {
        "enum": [
          "offline",
          "mobile",
          "away",
          "chat",
          "dnd"
        ],
        "type": "string"
      },
      "ChatActiveConvo": {
        "properties": {
          "cid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatApiTelemetry": {
        "properties": {
          "duration": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "method": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "productSession": {
            "$ref": "#/components/schemas/ChatProductSession"
          },
          "requestSession": {
            "type": "string"
          },
          "response_code": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "uri": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatBlockPid": {
        "properties": {
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatBlockedAction": {
        "enum": [
          "deny"
        ],
        "type": "string"
      },
      "ChatBlockedMapResource": {
        "properties": {
          "blocks": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ChatChatBlockedPlayer"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ChatChatBlockedList": {
        "properties": {
          "blocked": {
            "items": {
              "$ref": "#/components/schemas/ChatChatBlockedPlayer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatChatBlockedPlayer": {
        "properties": {
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatChatFriend": {
        "properties": {
          "activePlatform": {
            "nullable": true,
            "type": "string"
          },
          "displayGroup": {
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "last_online_ts": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatChatFriends": {
        "properties": {
          "friends": {
            "items": {
              "$ref": "#/components/schemas/ChatChatFriend"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatChatGamePresence": {
        "properties": {
          "msg": {
            "nullable": true,
            "type": "string"
          },
          "private": {
            "nullable": true,
            "type": "string"
          },
          "privateJwt": {
            "nullable": true,
            "type": "string"
          },
          "shared": {
            "$ref": "#/components/schemas/ChatChatSharedPayload",
            "nullable": true
          },
          "sharedJwt": {
            "nullable": true,
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ChatAccountState",
            "default": "offline"
          }
        },
        "type": "object"
      },
      "ChatChatGamePresenceUpdate": {
        "properties": {
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "session": {
            "nullable": true,
            "type": "string"
          },
          "update": {
            "$ref": "#/components/schemas/ChatChatGamePresence",
            "default": {
              "state": "offline"
            }
          }
        },
        "type": "object"
      },
      "ChatChatGroup": {
        "properties": {
          "collapsed": {
            "type": "boolean"
          },
          "isMetaGroup": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatChatGroupList": {
        "properties": {
          "groups": {
            "items": {
              "$ref": "#/components/schemas/ChatChatGroup"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatChatGroupUpdate": {
        "properties": {
          "collapsed": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "new_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatChatMessage": {
        "properties": {
          "body": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "mid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "time": {
            "default": "0",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType",
            "default": "chat"
          }
        },
        "type": "object"
      },
      "ChatChatMessageList": {
        "properties": {
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatChatMessage"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatChatParticipant": {
        "properties": {
          "activePlatform": {
            "nullable": true,
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "muted": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatChatParticipants": {
        "properties": {
          "participants": {
            "items": {
              "$ref": "#/components/schemas/ChatChatParticipant"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatChatPlayer": {
        "properties": {
          "activePlatform": {
            "nullable": true,
            "type": "string"
          },
          "cid": {
            "nullable": true,
            "type": "string"
          },
          "displayGroup": {
            "nullable": true,
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "group": {
            "nullable": true,
            "type": "string"
          },
          "muted": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "note": {
            "nullable": true,
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "presence": {
            "$ref": "#/components/schemas/ChatMultiGamePresence",
            "nullable": true
          },
          "priority": {
            "nullable": true,
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "resource": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatChatPlayerParticipants": {
        "properties": {
          "participants": {
            "items": {
              "$ref": "#/components/schemas/ChatChatPlayer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatChatSession": {
        "properties": {
          "federated": {
            "type": "boolean"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "loaded": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ChatChatSessionState",
            "default": "disconnected"
          }
        },
        "type": "object"
      },
      "ChatChatSessionData": {
        "enum": [
          "kNone",
          "kSettings",
          "kPresences",
          "kRoster",
          "kRosterReady",
          "kPrivacies",
          "kRecentConvos",
          "kAll",
          "kSentRoster",
          "kTimeOut"
        ],
        "type": "string"
      },
      "ChatChatSessionState": {
        "enum": [
          "disconnected",
          "connecting",
          "connected"
        ],
        "type": "string"
      },
      "ChatChatSharedPayload": {
        "properties": {
          "actor": {
            "nullable": true,
            "type": "string"
          },
          "details": {
            "nullable": true,
            "type": "string"
          },
          "location": {
            "nullable": true,
            "type": "string"
          },
          "patchline": {
            "nullable": true,
            "type": "string"
          },
          "platform": {
            "nullable": true,
            "type": "string"
          },
          "product": {
            "nullable": true,
            "type": "string"
          },
          "time": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ChatChatWindowSettings": {
        "properties": {
          "detached": {
            "type": "boolean"
          },
          "height": {
            "default": 366,
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "left": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "top": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "width": {
            "default": 530,
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ChatCommandTelemetry": {
        "properties": {
          "commandType": {
            "type": "string"
          },
          "hasPromiseToFulfill": {
            "type": "boolean"
          },
          "isBlocking": {
            "type": "boolean"
          },
          "mutatorExecutionTimeUs": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "notifierExecutionTimeUs": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "promiseFulfillmentTimeUs": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "queueSize": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "timeInQueueMs": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "totalExecutionTimeUs": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "validatorExecutionTimeUs": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ChatConfigReadinessEnum": {
        "enum": [
          "NotReady",
          "Ready"
        ],
        "type": "string"
      },
      "ChatConfigStatus": {
        "properties": {
          "readiness": {
            "$ref": "#/components/schemas/ChatConfigReadinessEnum",
            "default": "NotReady"
          },
          "updateId": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ChatConversationCreateJoin": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "fetch_history": {
            "default": true,
            "type": "boolean"
          },
          "hidden": {
            "nullable": true,
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "session": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType",
            "default": "chat"
          }
        },
        "type": "object"
      },
      "ChatConversationCreateJoinFederated": {
        "properties": {
          "join": {
            "$ref": "#/components/schemas/ChatConvoJoinFederated",
            "default": {
              "type": "chat"
            }
          },
          "session": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatConversationEdit": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "hidden": {
            "nullable": true,
            "type": "boolean"
          },
          "muted": {
            "nullable": true,
            "type": "boolean"
          },
          "mutedRestriction": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ChatConversationInitRecent": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "lastMessageRead": {
            "type": "boolean"
          },
          "msg": {
            "$ref": "#/components/schemas/ChatMessage",
            "nullable": true
          },
          "pid": {
            "type": "string"
          },
          "readPoint": {
            "$ref": "#/components/schemas/ChatReadPoint",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType",
            "default": "chat"
          }
        },
        "type": "object"
      },
      "ChatConversationInitRecentList": {
        "properties": {
          "conversations": {
            "items": {
              "$ref": "#/components/schemas/ChatConversationInitRecent"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatConversationReadership": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "readTs": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ChatConversationReadershipList": {
        "properties": {
          "readTs": {
            "items": {
              "$ref": "#/components/schemas/ChatConversationReadership"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatConversationSetActive": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "session": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatConvoCid": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatConvoJoin": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "hidden": {
            "nullable": true,
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType",
            "default": "chat"
          }
        },
        "type": "object"
      },
      "ChatConvoJoinFederated": {
        "properties": {
          "domain": {
            "type": "string"
          },
          "hidden": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "targetRegion": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType",
            "default": "chat"
          }
        },
        "type": "object"
      },
      "ChatConvoUpdate": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "hidden": {
            "nullable": true,
            "type": "boolean"
          },
          "muted": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ChatDebugChatGamePresence": {
        "properties": {
          "jwt_actor": {
            "nullable": true,
            "type": "string"
          },
          "jwt_details": {
            "nullable": true,
            "type": "string"
          },
          "jwt_location": {
            "nullable": true,
            "type": "string"
          },
          "jwt_patchline": {
            "nullable": true,
            "type": "string"
          },
          "jwt_platform": {
            "nullable": true,
            "type": "string"
          },
          "jwt_product": {
            "type": "string"
          },
          "jwt_time": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "msg": {
            "type": "string"
          },
          "private": {
            "nullable": true,
            "type": "string"
          },
          "private_jwt": {
            "nullable": true,
            "type": "string"
          },
          "shared": {
            "$ref": "#/components/schemas/ChatChatSharedPayload"
          },
          "state": {
            "$ref": "#/components/schemas/ChatAccountState",
            "default": "offline"
          }
        },
        "type": "object"
      },
      "ChatDebugConfig": {
        "properties": {
          "readershipInterval": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ChatDeleteMessage": {
        "properties": {
          "body": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "senderPuuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatDeviceChatSettings": {
        "properties": {
          "mobilePushNotificationsEnabled": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ChatEntitlementsTokenResource": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "entitlements": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuer": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatError": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "class": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "subtype": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "ts": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatErrorId": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatErrorList": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ChatError"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatFriendGroup": {
        "properties": {
          "collapsed": {
            "type": "boolean"
          },
          "isMetaGroup": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatFriendGroupCreate": {
        "properties": {
          "collapsed": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatFriendGroupList": {
        "properties": {
          "groups": {
            "items": {
              "$ref": "#/components/schemas/ChatFriendGroup"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatFriendGroupName": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatFriendGroupOrder": {
        "properties": {
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatFriendGroupSyncList": {
        "properties": {
          "groups": {
            "items": {
              "$ref": "#/components/schemas/ChatGroupsFriendGroupSync"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatFriendGroupUpdate": {
        "properties": {
          "collapsed": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "new_name": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatFriendPid": {
        "properties": {
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatFriendRequest": {
        "properties": {
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "subscription": {
            "$ref": "#/components/schemas/ChatFriendSubscriptionType",
            "default": "pending_out"
          }
        },
        "type": "object"
      },
      "ChatFriendRequestAdd": {
        "properties": {
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatFriendRequestList": {
        "properties": {
          "requests": {
            "items": {
              "$ref": "#/components/schemas/ChatFriendRequest"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatFriendRequestListPuuid": {
        "properties": {
          "requests": {
            "items": {
              "$ref": "#/components/schemas/ChatFriendRequestPuuid"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatFriendRequestPost": {
        "properties": {
          "gameName": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatFriendRequestPuuid": {
        "properties": {
          "gameName": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "subscription": {
            "$ref": "#/components/schemas/ChatFriendSubscriptionType",
            "default": "pending_out"
          },
          "tagLine": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatFriendSubscriptionType": {
        "enum": [
          "pending_out",
          "pending_in"
        ],
        "type": "string"
      },
      "ChatFriendUpdate": {
        "properties": {
          "group": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatFriendUpdateList": {
        "properties": {
          "friends": {
            "items": {
              "$ref": "#/components/schemas/ChatChatFriend"
            },
            "type": "array"
          },
          "type": {
            "default": "result",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatGroupsFriendGroupSync": {
        "properties": {
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatJWTVerifyResource": {
        "properties": {
          "key": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatMessage": {
        "properties": {
          "body": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cts": {
            "default": "0",
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "mid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "ts": {
            "default": "0",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType",
            "default": "chat"
          }
        },
        "type": "object"
      },
      "ChatMessageList": {
        "properties": {
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatMessagePost": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType",
            "default": "chat"
          }
        },
        "type": "object"
      },
      "ChatMessageSend": {
        "properties": {
          "message": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType",
            "default": "chat"
          }
        },
        "type": "object"
      },
      "ChatMessageType": {
        "enum": [
          "chat",
          "groupchat",
          "dm",
          "system"
        ],
        "type": "string"
      },
      "ChatMessagesArchive": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            },
            "type": "array"
          },
          "readPointTs": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "xmppId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatMessagesFetchArchive": {
        "properties": {
          "before": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "cid": {
            "type": "string"
          },
          "count": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "since": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ChatMessagesSendChatMessage": {
        "properties": {
          "body": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "sendId": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType",
            "default": "chat"
          }
        },
        "type": "object"
      },
      "ChatMultiGamePresence": {
        "properties": {
          "actor": {
            "nullable": true,
            "type": "string"
          },
          "basic": {
            "type": "string"
          },
          "details": {
            "nullable": true,
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "location": {
            "nullable": true,
            "type": "string"
          },
          "msg": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchline": {
            "nullable": true,
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "platform": {
            "nullable": true,
            "type": "string"
          },
          "private": {
            "nullable": true,
            "type": "string"
          },
          "privateJwt": {
            "nullable": true,
            "type": "string"
          },
          "product": {
            "default": "keystone",
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ChatAccountState",
            "default": "offline"
          },
          "summary": {
            "type": "string"
          },
          "time": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ChatMultiGamePresenceDelete": {
        "properties": {
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "session": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatMultiGamePresenceList": {
        "properties": {
          "presences": {
            "items": {
              "$ref": "#/components/schemas/ChatMultiGamePresence"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatParticipantEdit": {
        "properties": {
          "muted": {
            "type": "boolean"
          },
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatPlayRestrictionV1Data": {
        "properties": {
          "chat_enabled": {
            "default": true,
            "type": "boolean"
          },
          "play_restriction_setting": {
            "$ref": "#/components/schemas/ChatPlayRestrictionV1Settings",
            "default": "none"
          }
        },
        "type": "object"
      },
      "ChatPlayRestrictionV1Settings": {
        "enum": [
          "none",
          "platform_only"
        ],
        "type": "string"
      },
      "ChatPlayerAffinityInput": {
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatPlayerAffinityToken": {
        "properties": {
          "affinity": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "issuedAt": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "puuid": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatPlayerPreferencesResource": {
        "properties": {
          "data": {
            "additionalProperties": true,
            "type": "object"
          },
          "modified": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatPresenceDelete": {
        "properties": {
          "puuid": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatPresenceProduct": {
        "properties": {
          "product": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatPrivacyReceiveBlockedPlayer": {
        "properties": {
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatProductLocTranslateReq": {
        "properties": {
          "blocking": {
            "default": true,
            "type": "boolean"
          },
          "keys": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "locale": {
            "type": "string"
          },
          "patchline": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatProductLocTranslateResp": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/ChatProductLocTranslateResult"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatProductLocTranslateResult": {
        "properties": {
          "found": {
            "type": "boolean"
          },
          "key": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatProductMetadata": {
        "properties": {
          "content_paths": {
            "$ref": "#/components/schemas/ChatProductMetadataContentPaths"
          }
        },
        "type": "object"
      },
      "ChatProductMetadataContentPaths": {
        "properties": {
          "loc": {
            "type": "string"
          },
          "riotstatus": {
            "type": "string"
          },
          "social": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatProductSession": {
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatProductSessionState": {
        "properties": {
          "mode": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatProtocolPreference": {
        "enum": [
          "any",
          "ipv4",
          "ipv6"
        ],
        "type": "string"
      },
      "ChatReadCollectionData": {
        "properties": {
          "bucket": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "subkey": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatReadPoint": {
        "properties": {
          "pid": {
            "type": "string"
          },
          "readTimeStamp": {
            "default": "0",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatRequestPid": {
        "properties": {
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatRequestPuuid": {
        "properties": {
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatRsoAccessTokenResource": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatRsoAuthorizationResource": {
        "properties": {
          "currentAccountId": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatRsoIdTokenResource": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatSanitizeRequest": {
        "properties": {
          "aggressiveScan": {
            "nullable": true,
            "type": "boolean"
          },
          "level": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "text": {
            "nullable": true,
            "type": "string"
          },
          "texts": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatSanitizeResponse": {
        "properties": {
          "modified": {
            "type": "boolean"
          },
          "text": {
            "nullable": true,
            "type": "string"
          },
          "texts": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatSanitizerStatus": {
        "properties": {
          "ready": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ChatSessionPlatform": {
        "properties": {
          "platformId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatSessionState": {
        "properties": {
          "products": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ChatProductSessionState"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ChatSocialData": {
        "properties": {
          "hovercard_background_url": {
            "type": "string"
          },
          "icon_url": {
            "type": "string"
          },
          "product_folder_name": {
            "type": "string"
          },
          "product_presence_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatSocialDataReq": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "patchline": {
            "type": "string"
          },
          "product": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatSocketClosedCode": {
        "enum": [
          "NEW_CONNECTION",
          "INIT_ERROR",
          "BAD_AUTH_MECHANISMS_STANZA",
          "AUTH_FAILURE",
          "BAD_FEATURES_STANZA",
          "BAD_BIND_STANZA",
          "BAD_SESSION_STANZA",
          "TIMEOUT_DURING_LOGIN",
          "LOGGING_OUT",
          "STREAM_ENDED",
          "SOCKET_UNAVAILABLE",
          "FINALIZED",
          "BAD_MIGRATE_STANZA",
          "BAD_MIGRATE_AUTH_MECHANISMS_STANZA",
          "MIGRATE_AUTH_FAILURE",
          "UNKNOWN"
        ],
        "type": "string"
      },
      "ChatUIState": {
        "properties": {
          "changedSinceHidden": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ChatUIStateConversation": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "direct_messages": {
            "type": "boolean"
          },
          "global_readership": {
            "type": "boolean"
          },
          "message_history": {
            "type": "boolean"
          },
          "mid": {
            "type": "string"
          },
          "muted": {
            "type": "boolean"
          },
          "mutedRestriction": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType",
            "default": "chat"
          },
          "uiState": {
            "$ref": "#/components/schemas/ChatUIState"
          },
          "unread_count": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ChatUIStateConversationJoin": {
        "properties": {
          "hidden": {
            "nullable": true,
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "process": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType",
            "default": "chat"
          }
        },
        "type": "object"
      },
      "ChatUIStateConversationList": {
        "properties": {
          "conversations": {
            "items": {
              "$ref": "#/components/schemas/ChatUIStateConversation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChatUIStateConversationUpdate": {
        "properties": {
          "hidden": {
            "nullable": true,
            "type": "boolean"
          },
          "muted": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ChatUpdateChatSettings": {
        "properties": {
          "settings": {
            "additionalProperties": true,
            "type": "object"
          },
          "shouldSave": {
            "default": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ChatUpdateProductSession": {
        "properties": {
          "productSession": {
            "$ref": "#/components/schemas/ChatProductSession"
          },
          "sessionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatUpdateSanitizerSettings": {
        "properties": {
          "aggressiveScan": {
            "type": "boolean"
          },
          "forceFilter": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ChatXmppConnectionState": {
        "properties": {
          "socketCode": {
            "$ref": "#/components/schemas/ChatSocketClosedCode",
            "default": "UNKNOWN"
          },
          "status": {
            "$ref": "#/components/schemas/ChatXmppConnectionStatus",
            "default": "DISCONNECTED"
          }
        },
        "type": "object"
      },
      "ChatXmppConnectionStatus": {
        "enum": [
          "DISCONNECTED",
          "CONNECTING",
          "STREAM_SENT",
          "STREAM_RECV",
          "AUTH_FEATURES_RECV",
          "AUTH_SENT",
          "AUTHENTICATED",
          "AUTH_STREAM_SENT",
          "AUTH_STREAM_RECV",
          "FEATURES_RECV",
          "BIND_SENT",
          "BIND_RECV",
          "ENTITLEMENTS_SENT",
          "RXEP_SENT",
          "SESSION_SENT",
          "ENTITLEMENTS_RECV",
          "RXEP_RECV",
          "CONNECTED",
          "MIGRATE_RECEIVED",
          "MIGRATE_SENT",
          "MIGRATE_DISCONNECTED",
          "MIGRATE_CONNECTING",
          "MIGRATE_STREAM_SENT",
          "MIGRATE_STREAM_RECV",
          "MIGRATE_AUTH_FEATURES_RECV",
          "MIGRATE_AUTH_SENT",
          "MIGRATE_AUTHENTICATED",
          "MIGRATE_AUTH_STREAM_SENT",
          "MIGRATE_AUTH_STREAM_RECV"
        ],
        "type": "string"
      },
      "ChatXmppReceivedStanza": {
        "properties": {
          "from": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "stanzaStr": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatXmppSendStanza": {
        "properties": {
          "stanzaRaw": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatXmppSessionId": {
        "properties": {
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChatXmppSettings": {
        "properties": {
          "affinityDomains": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "affinityEnabled": {
            "type": "boolean"
          },
          "affinityHints": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "affinityHosts": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "allowBadCert": {
            "type": "boolean"
          },
          "autoQueryMsgHistory": {
            "type": "boolean"
          },
          "chatHost": {
            "type": "string"
          },
          "chatPort": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer"
          },
          "defaultMobileProductId": {
            "default": "league_of_legends",
            "type": "string"
          },
          "enableKeystonePresence": {
            "type": "boolean"
          },
          "gameNameTaglineEnabled": {
            "type": "boolean"
          },
          "heartBeatIntervalSecs": {
            "default": 30,
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "immediateConnectProducts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "keepAliveIntervalSecs": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "keepAliveTimeoutSecs": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "productsRequiringJwtPresence": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "protocolPreference": {
            "$ref": "#/components/schemas/ChatProtocolPreference",
            "default": "ipv4"
          },
          "replaceRichMessages": {
            "type": "boolean"
          },
          "useTLS": {
            "default": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ChatXmppStatusCheckData": {
        "properties": {
          "maxNotAllowed": {
            "$ref": "#/components/schemas/ChatXmppConnectionStatus",
            "default": "DISCONNECTED"
          },
          "minNotAllowed": {
            "$ref": "#/components/schemas/ChatXmppConnectionStatus",
            "default": "DISCONNECTED"
          },
          "resource": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigBuildInfo": {
        "properties": {
          "branch": {
            "type": "string"
          },
          "branchFull": {
            "type": "string"
          },
          "codeBuildId": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "contentBuildId": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "gameBranch": {
            "type": "string"
          },
          "gameBranchFull": {
            "type": "string"
          },
          "gameDataBuildId": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "patchline": {
            "type": "string"
          },
          "patchlineVisibleName": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigClientConfig": {
        "properties": {
          "data": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object"
          },
          "params": {
            "$ref": "#/components/schemas/ClientConfigConfigParams",
            "default": {
              "type": "public"
            }
          },
          "updateTime": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ClientConfigConfigNamespaceUpdate": {
        "properties": {
          "player": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "public": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ClientConfigConfigParams": {
        "properties": {
          "appName": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "patchline": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ClientConfigConfigType",
            "default": "public"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigConfigReadinessEnum": {
        "enum": [
          "NotReady",
          "Ready",
          "Disabled"
        ],
        "type": "string"
      },
      "ClientConfigConfigStatus": {
        "properties": {
          "readiness": {
            "$ref": "#/components/schemas/ClientConfigConfigReadinessEnum",
            "default": "NotReady"
          },
          "updateId": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ClientConfigConfigType": {
        "enum": [
          "public",
          "player"
        ],
        "type": "string"
      },
      "ClientConfigDataPaths": {
        "properties": {
          "configRoot": {
            "type": "string"
          },
          "dataRoot": {
            "type": "string"
          },
          "localSettingsPath": {
            "type": "string"
          },
          "privateSettingsPath": {
            "type": "string"
          },
          "userDataRoot": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigDepInjectorConfigNamespaceUpdate": {
        "properties": {
          "player": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "public": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ClientConfigDepInjectorRiotClientAuthAlias": {
        "properties": {
          "game_name": {
            "nullable": true,
            "type": "string"
          },
          "tag_line": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigDepInjectorRiotClientAuthAuthorization": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/ClientConfigDepInjectorRsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/ClientConfigDepInjectorRsoAuthIdToken"
          },
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigDepInjectorRiotClientAuthIdClaims": {
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/ClientConfigDepInjectorRiotClientAuthAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigDepInjectorRsoAuthAccessToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigDepInjectorRsoAuthIdToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigDepInjectorSession": {
        "properties": {
          "isInternal": {
            "type": "boolean"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigDepInjectorSessionsUpdate": {
        "properties": {
          "sessions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ClientConfigDepInjectorSession"
            },
            "type": "object"
          },
          "updateType": {
            "$ref": "#/components/schemas/ClientConfigDepInjectorUpdateType",
            "default": "Create"
          }
        },
        "type": "object"
      },
      "ClientConfigDepInjectorTokenV2": {
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/ClientConfigDepInjectorRiotClientAuthAuthorization"
          },
          "entitlements": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuer": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigDepInjectorUpdateType": {
        "enum": [
          "Create",
          "Update",
          "Delete"
        ],
        "type": "string"
      },
      "ClientConfigRiotClientAuthAlias": {
        "properties": {
          "game_name": {
            "nullable": true,
            "type": "string"
          },
          "tag_line": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigRiotClientAuthAuthorization": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/ClientConfigRsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/ClientConfigRsoAuthIdToken"
          },
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigRiotClientAuthIdClaims": {
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/ClientConfigRiotClientAuthAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigRsoAuthAccessToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigRsoAuthIdToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigSession": {
        "properties": {
          "isInternal": {
            "type": "boolean"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigSessionsUpdate": {
        "properties": {
          "sessions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ClientConfigSession"
            },
            "type": "object"
          },
          "updateType": {
            "$ref": "#/components/schemas/ClientConfigUpdateType",
            "default": "Create"
          }
        },
        "type": "object"
      },
      "ClientConfigTokenV2": {
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/ClientConfigRiotClientAuthAuthorization"
          },
          "entitlements": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuer": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientConfigUpdateType": {
        "enum": [
          "Create",
          "Update",
          "Delete"
        ],
        "type": "string"
      },
      "ClientFeatureFlagsConfigurationSource": {
        "properties": {
          "configuredFeatureFlags": {
            "additionalProperties": true,
            "type": "object"
          },
          "configuredFeatureFlagsAvailable": {
            "type": "boolean"
          },
          "featureFlags": {
            "additionalProperties": true,
            "type": "object"
          },
          "featureFlagsAvailable": {
            "type": "boolean"
          },
          "installSettings": {
            "additionalProperties": true,
            "type": "object"
          },
          "installSettingsAvailable": {
            "type": "boolean"
          },
          "playerCohorts": {
            "additionalProperties": true,
            "type": "object"
          },
          "playerCohortsAvailable": {
            "type": "boolean"
          },
          "stickyFlagCohortsActiveAtBoot": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "stickyFlagCohortsInactiveAtBoot": {
            "items": {
              "$ref": "#/components/schemas/ClientFeatureFlagsExperimentCohortPair"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ClientFeatureFlagsExperimentCohortPair": {
        "properties": {
          "cohort": {
            "type": "string"
          },
          "experiment": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientFeatureFlagsFeatureFlagConfiguration": {
        "properties": {
          "enable_for_cohorts": {
            "items": {
              "$ref": "#/components/schemas/ClientFeatureFlagsExperimentCohortPair"
            },
            "type": "array"
          },
          "sticky_at_boot_time": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CollectorAvailability": {
        "enum": [
          "Available",
          "NotAvailable"
        ],
        "type": "string"
      },
      "CookieJarCookie": {
        "properties": {
          "domain": {
            "type": "string"
          },
          "expires": {
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "httponly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataPaths": {
        "properties": {
          "configRoot": {
            "type": "string"
          },
          "dataRoot": {
            "type": "string"
          },
          "localSettingsPath": {
            "type": "string"
          },
          "privateSettingsPath": {
            "type": "string"
          },
          "userDataRoot": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DisambiguationAccessToken": {
        "properties": {
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DisambiguationConfigReadinessEnum": {
        "enum": [
          "NotReady",
          "Ready"
        ],
        "type": "string"
      },
      "DisambiguationConfigStatus": {
        "properties": {
          "readiness": {
            "$ref": "#/components/schemas/DisambiguationConfigReadinessEnum",
            "default": "NotReady"
          }
        },
        "type": "object"
      },
      "DisambiguationIdToken": {
        "properties": {
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DisambiguationRegionLocale": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "webLanguage": {
            "type": "string"
          },
          "webRegion": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EntitlementsRiotClientAuthAlias": {
        "properties": {
          "game_name": {
            "nullable": true,
            "type": "string"
          },
          "tag_line": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EntitlementsRiotClientAuthAuthorization": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/EntitlementsRsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/EntitlementsRsoAuthIdToken"
          },
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EntitlementsRiotClientAuthIdClaims": {
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/EntitlementsRiotClientAuthAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EntitlementsRsoAuthAccessToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EntitlementsRsoAuthIdToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EntitlementsToken": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "entitlements": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuer": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EntitlementsTokenV2": {
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/EntitlementsRiotClientAuthAuthorization"
          },
          "entitlements": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuer": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EulaAcceptance": {
        "enum": [
          "WaitingForAllServiceData",
          "AcceptanceRequired",
          "Accepted"
        ],
        "type": "string"
      },
      "EulaAgreement": {
        "properties": {
          "acceptance": {
            "$ref": "#/components/schemas/EulaAcceptance",
            "default": "WaitingForAllServiceData"
          },
          "agreementURI": {
            "type": "string"
          },
          "agreementVersion": {
            "type": "string"
          },
          "lastAcceptedTime": {
            "format": "int64",
            "type": "integer"
          },
          "lastAcceptedVersion": {
            "type": "string"
          },
          "playerPreferencesKey": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EulaAuthorization": {
        "properties": {
          "currentAccountId": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EulaExternalLegalLinks": {
        "properties": {
          "privacyNoticeUrl": {
            "type": "string"
          },
          "termsOfServiceUrl": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EulaIdToken": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EulaPlayerPreferencesResource": {
        "properties": {
          "data": {
            "additionalProperties": true,
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EulaPrivacyPolicy": {
        "properties": {
          "policyContent": {
            "type": "string"
          },
          "policyURI": {
            "type": "string"
          },
          "policyVersion": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EulaProductContext": {
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EulaRegionLocale": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EulaTOSEventTypeForAP": {
        "enum": [
          "failedIntoTemporaryAcceptance",
          "acceptanceRequired",
          "accepted",
          "rejected",
          "rejectedWithoutReading"
        ],
        "type": "string"
      },
      "ExtendedEventData": {
        "properties": {
          "additionalFields": {
            "additionalProperties": true,
            "nullable": true,
            "type": "object"
          },
          "data": {
            "additionalProperties": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentReason": {
        "enum": [
          "gameLaunched",
          "gameReturnedToForeground",
          "purchaseCompleted",
          "other"
        ],
        "type": "string"
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentRequest": {
        "properties": {
          "firstPartyAuthToken": {
            "type": "string"
          },
          "fulfillmentId": {
            "type": "string"
          },
          "fulfillmentReason": {
            "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentReason",
            "default": "gameLaunched"
          }
        },
        "type": "object"
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentResponse": {
        "properties": {
          "fulfilledItems": {
            "items": {
              "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentItemFulfillmentSuccessInfo"
            },
            "type": "array"
          },
          "fulfillmentRequired": {
            "type": "boolean"
          },
          "unfulfilledItems": {
            "items": {
              "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentItemFulfillmenFailureInfo"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentItemFulfillmenFailureInfo": {
        "properties": {
          "itemId": {
            "type": "string"
          },
          "quantity": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "reason": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentItemFulfillmentSuccessInfo": {
        "properties": {
          "itemId": {
            "type": "string"
          },
          "quantity": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentMockApiState": {
        "enum": [
          "NoMock",
          "NoFulfillmentRequired",
          "FirstPartyQueryFailed",
          "FirstPartyAuthorizationFailed",
          "FirstPartyQueryByRiotPayFailed",
          "RiotPayFulfillmentFailed",
          "PartialFulfillmentCompleted",
          "Success"
        ],
        "type": "string"
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentTelemetryContext": {
        "properties": {
          "errorDescription": {
            "nullable": true,
            "type": "string"
          },
          "fulfillmentId": {
            "type": "string"
          },
          "fulfillmentItemResult": {
            "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentTelemetryFulfillmentItemResult",
            "default": "unassigned",
            "nullable": true
          },
          "fulfillmentReason": {
            "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentReason",
            "default": "other"
          },
          "fulfillmentResult": {
            "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentTelemetryFulfillmentResult",
            "default": "unassigned",
            "nullable": true
          },
          "funnelName": {
            "type": "string"
          },
          "itemFailureReason": {
            "nullable": true,
            "type": "string"
          },
          "itemId": {
            "nullable": true,
            "type": "string"
          },
          "itemQuantity": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentTelemetryFulfillmentItemResult": {
        "enum": [
          "unassigned",
          "success",
          "failure"
        ],
        "type": "string"
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentTelemetryFulfillmentResult": {
        "enum": [
          "unassigned",
          "success",
          "partialSuccess",
          "noContent",
          "fulfillmentFailure",
          "failure"
        ],
        "type": "string"
      },
      "FriendsChatBlockPid": {
        "properties": {
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FriendsChatBlockedList": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/FriendsChatBlockedPlayer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FriendsChatBlockedPlayer": {
        "properties": {
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FriendsFriendsConsoleIdToPuuidResponseElement": {
        "properties": {
          "error": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FriendsFriendsConsoleIdsToPuuidsResponse": {
        "properties": {
          "response": {
            "items": {
              "$ref": "#/components/schemas/FriendsFriendsConsoleIdToPuuidResponseElement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FriendsFriendsV1NamesetsRequest": {
        "properties": {
          "puuids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FriendsFriendsV1NamesetsResponse": {
        "properties": {
          "namesets": {
            "items": {
              "$ref": "#/components/schemas/FriendsFriendsV1NamesetsResponseElement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FriendsFriendsV1NamesetsResponseElement": {
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/FriendsFriendsV1RiotAlias"
          },
          "error": {
            "type": "string"
          },
          "playstationNameset": {
            "$ref": "#/components/schemas/FriendsFriendsV1PlaystationNameset"
          },
          "puuid": {
            "type": "string"
          },
          "switchNameset": {
            "$ref": "#/components/schemas/FriendsFriendsV1SwitchNameset"
          },
          "xboxNameset": {
            "$ref": "#/components/schemas/FriendsFriendsV1XboxNameset"
          }
        },
        "type": "object"
      },
      "FriendsFriendsV1PlaystationNameset": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FriendsFriendsV1RiotAlias": {
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FriendsFriendsV1SwitchNameset": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FriendsFriendsV1XboxNameset": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FriendsFriendsV2MockApiState": {
        "enum": [
          "none",
          "mock_enabled"
        ],
        "type": "string"
      },
      "GaRestrictionAuthorization": {
        "properties": {
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaRestrictionCachedPenaltyNotificationDtoV1": {
        "properties": {
          "isDeleted": {
            "type": "boolean"
          },
          "isUnread": {
            "type": "boolean"
          },
          "penaltyNotification": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationDtoV1"
          },
          "textChatLogEvidenceV1": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationTextChatLogEvidenceV1",
            "nullable": true
          }
        },
        "type": "object"
      },
      "GaRestrictionGapsMailboxUpdated": {
        "properties": {
          "product": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaRestrictionLocalizedPenaltyNotification": {
        "properties": {
          "acknowledgeText": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "matchHistoryHeader": {
            "type": "string"
          },
          "matchHistoryLinkText": {
            "type": "string"
          },
          "penalties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "penaltyHeader": {
            "type": "string"
          },
          "textChatLogEvidenceV1": {
            "$ref": "#/components/schemas/GaRestrictionLocalizedPenaltyNotificationChatLogEvidenceV1",
            "nullable": true
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaRestrictionLocalizedPenaltyNotificationChatLogEvidenceV1": {
        "properties": {
          "chatLogLines": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "header": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaRestrictionMail": {
        "properties": {
          "createdAt": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "mailId": {
            "type": "string"
          },
          "mailType": {
            "$ref": "#/components/schemas/GaRestrictionMailType",
            "default": "STANDARD"
          },
          "message": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/GaRestrictionMailState",
            "default": "NEW"
          }
        },
        "type": "object"
      },
      "GaRestrictionMailState": {
        "enum": [
          "NEW",
          "READ",
          "ACKNOWLEDGED"
        ],
        "type": "string"
      },
      "GaRestrictionMailType": {
        "enum": [
          "STANDARD",
          "ACK_REQUIRED"
        ],
        "type": "string"
      },
      "GaRestrictionMailboxStatusUpdated": {
        "properties": {
          "lastUpdateReceived": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GaRestrictionPenaltyNotification": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationData"
          },
          "isUnread": {
            "type": "boolean"
          },
          "locale": {
            "type": "string"
          },
          "localizedTexts": {
            "$ref": "#/components/schemas/GaRestrictionLocalizedPenaltyNotification"
          },
          "product": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaRestrictionPenaltyNotificationData": {
        "properties": {
          "matchId": {
            "type": "string"
          },
          "penalties": {
            "items": {
              "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationVendedPenaltyDtoV1"
            },
            "type": "array"
          },
          "penaltyNotificationDescriptionKey": {
            "type": "string"
          },
          "textChatLogEvidenceV1": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationTextChatLogEvidenceV1",
            "nullable": true
          },
          "transgressionCategory": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaRestrictionPenaltyNotificationDtoV1": {
        "properties": {
          "evidence": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationEvidenceDtoV1"
          },
          "matchId": {
            "type": "string"
          },
          "penaltyNotificationDescriptionKey": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "transgressionCategory": {
            "type": "string"
          },
          "vendedPenalties": {
            "items": {
              "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationVendedPenaltyDtoV1"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GaRestrictionPenaltyNotificationEvidenceDtoV1": {
        "properties": {
          "evidenceText": {
            "type": "string"
          },
          "evidenceType": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaRestrictionPenaltyNotificationPlayerAction": {
        "enum": [
          "RECEIVED_NEW",
          "RECEIVED_OLD",
          "ACKNOWLEDGED",
          "DELETED"
        ],
        "type": "string"
      },
      "GaRestrictionPenaltyNotificationPlayerActionEvent": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationPlayerAction",
            "default": "RECEIVED_NEW"
          },
          "messageId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "penaltyNotificationDescriptionKey": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "transgressionCategory": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaRestrictionPenaltyNotificationTextChatLogEvidenceV1": {
        "properties": {
          "chatLines": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GaRestrictionPenaltyNotificationVendedPenaltyDtoV1": {
        "properties": {
          "isPermanent": {
            "type": "boolean"
          },
          "penaltyDurationMillis": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "penaltyTimestamp": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "penaltyType": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaRestrictionPenaltyNotificationsByMessageId": {
        "properties": {
          "penaltyNotificationsByMessageId": {
            "additionalProperties": {
              "$ref": "#/components/schemas/GaRestrictionCachedPenaltyNotificationDtoV1"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "GaRestrictionPluginCallerId_MockCallerId": {
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaRestrictionPluginCallerId_ProductSession": {
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaRestrictionRegionLocale": {
        "properties": {
          "locale": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaRestrictionRequestMailParameters": {
        "properties": {
          "count": {
            "default": 20,
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "includedStates": {
            "items": {
              "$ref": "#/components/schemas/GaRestrictionMailState"
            },
            "type": "array"
          },
          "startIndex": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GaRestrictionUpdateMailStateRequest": {
        "properties": {
          "mailId": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/GaRestrictionMailState",
            "default": "NEW"
          }
        },
        "type": "object"
      },
      "GaWarningApiAuthorization": {
        "properties": {
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaWarningGapsMailboxUpdated": {
        "properties": {
          "product": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaWarningLocalizedWarningMessage": {
        "properties": {
          "acknowledgeText": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "seeMoreLabel": {
            "type": "string"
          },
          "seeMoreUrl": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaWarningMail": {
        "properties": {
          "createdAt": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "mailId": {
            "type": "string"
          },
          "mailType": {
            "$ref": "#/components/schemas/GaWarningMailType",
            "default": "STANDARD"
          },
          "message": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/GaWarningMailState",
            "default": "NEW"
          }
        },
        "type": "object"
      },
      "GaWarningMailState": {
        "enum": [
          "NEW",
          "READ",
          "ACKNOWLEDGED"
        ],
        "type": "string"
      },
      "GaWarningMailType": {
        "enum": [
          "STANDARD",
          "ACK_REQUIRED"
        ],
        "type": "string"
      },
      "GaWarningMailboxStatusUpdated": {
        "properties": {
          "lastUpdateReceived": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GaWarningPluginCallerId_MockCallerId": {
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaWarningPluginCallerId_ProductSession": {
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaWarningRegionLocale": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaWarningRequestMailParameters": {
        "properties": {
          "count": {
            "default": 20,
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "includedStates": {
            "items": {
              "$ref": "#/components/schemas/GaWarningMailState"
            },
            "type": "array"
          },
          "startIndex": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GaWarningUpdateMailStateRequest": {
        "properties": {
          "mailId": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/GaWarningMailState",
            "default": "NEW"
          }
        },
        "type": "object"
      },
      "GaWarningWarning": {
        "properties": {
          "category": {
            "type": "string"
          },
          "messageId": {
            "type": "string"
          },
          "product": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaWarningWarningAcknowledgementEvent": {
        "properties": {
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "transgressionCategory": {
            "type": "string"
          },
          "warningId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaWarningWarningDto": {
        "properties": {
          "category": {
            "type": "string"
          },
          "product": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaWarningWarningFoundUnacknowledgedEvent": {
        "properties": {
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "transgressionCategory": {
            "type": "string"
          },
          "warningId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GaWarningWarningResponse": {
        "properties": {
          "gaWarningMessages": {
            "additionalProperties": {
              "$ref": "#/components/schemas/GaWarningLocalizedWarningMessage"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "GameSessionAccessToken": {
        "properties": {
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionAuthError": {
        "properties": {
          "error": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionAuthHint": {
        "properties": {
          "context": {
            "additionalProperties": true,
            "type": "object"
          },
          "required": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/GameSessionAuthHintType",
            "default": "email_verification"
          }
        },
        "type": "object"
      },
      "GameSessionAuthHintType": {
        "enum": [
          "email_verification",
          "password_reset",
          "parental_consent",
          "ambiguous_username",
          "alias_change_required"
        ],
        "type": "string"
      },
      "GameSessionAuthenticationTypeEnum": {
        "enum": [
          "SSOAuth",
          "RiotAuth",
          "None"
        ],
        "type": "string"
      },
      "GameSessionAuthorization": {
        "properties": {
          "currentAccountId": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionAuthorizationCode": {
        "properties": {
          "code": {
            "type": "string"
          },
          "code_verifier": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionAuthorizationKey": {
        "properties": {
          "key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionAuthorizationKeyRequest": {
        "properties": {
          "client_id": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GameSessionAuthorizationRequest": {
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/GameSessionAuthenticationTypeEnum",
            "nullable": true
          },
          "claims": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "default": true,
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trustLevels": {
            "items": {
              "$ref": "#/components/schemas/GameSessionRSOAuthorizationTrustLevel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GameSessionAuthorizationResponse": {
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/GameSessionImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/GameSessionAuthorizationResponseType"
          }
        },
        "type": "object"
      },
      "GameSessionAuthorizationResponseType": {
        "enum": [
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ],
        "type": "string"
      },
      "GameSessionAuthorizationUpdateRequest": {
        "properties": {
          "claims": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trustLevels": {
            "items": {
              "$ref": "#/components/schemas/GameSessionRSOAuthorizationTrustLevel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GameSessionClientConfigCluster": {
        "properties": {
          "bypass": {
            "type": "string"
          },
          "queue": {
            "type": "string"
          },
          "session": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionConfigV3AMRValuesSupported": {
        "properties": {
          "values": {
            "items": {
              "$ref": "#/components/schemas/GameSessionLoginAMR"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GameSessionConfigV3AuthProgress": {
        "enum": [
          "None",
          "Ready",
          "Pending",
          "Complete",
          "Skipped",
          "Error"
        ],
        "type": "string"
      },
      "GameSessionConfigV3OpenIdConfiguration": {
        "properties": {
          "config": {
            "additionalProperties": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "GameSessionConfigV3PartnerAuthConfig": {
        "properties": {
          "config": {
            "additionalProperties": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "GameSessionConfigV3ReadyState": {
        "properties": {
          "configAuthProgress": {
            "$ref": "#/components/schemas/GameSessionConfigV3AuthProgress",
            "default": "None"
          },
          "ready": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GameSessionDeviceId": {
        "properties": {
          "collectorServerName": {
            "type": "string"
          },
          "frameUrl": {
            "type": "string"
          },
          "installId": {
            "type": "string"
          },
          "merchantId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionEntitlementsToken": {
        "properties": {
          "entitlements": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionGameCenterAuthCredentials": {
        "properties": {
          "bundleId": {
            "type": "string"
          },
          "playerId": {
            "type": "string"
          },
          "publicKeyUrl": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionGameSessionServiceCreateSessionRequestBody": {
        "properties": {
          "claims": {
            "additionalProperties": true,
            "type": "object"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionGameSessionV1ClusterList": {
        "properties": {
          "clusters": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GameSessionGameSessionV1GameSessionId": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionGameSessionV1GameSessionMessage": {
        "enum": [
          "no_error",
          "player_banned",
          "account_restricted",
          "account_locked",
          "queue_busy",
          "bad_entity_parameter",
          "bad_authorization_param",
          "service_create_session_failure",
          "service_refresh_session_failure",
          "service_delete_session_failure",
          "internal",
          "unknown"
        ],
        "type": "string"
      },
      "GameSessionGameSessionV1GameSessionRequest": {
        "properties": {
          "claims": {
            "additionalProperties": true,
            "type": "object"
          },
          "clientName": {
            "type": "string"
          },
          "cluster": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "rsoClientId": {
            "type": "string"
          },
          "shouldAttemptQueueBypass": {
            "type": "boolean"
          },
          "shouldFetchSessionToken": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GameSessionGameSessionV1GameSessionResponse": {
        "properties": {
          "bypassQueueClaims": {
            "additionalProperties": true,
            "type": "object"
          },
          "bypassQueueToken": {
            "type": "string"
          },
          "errorId": {
            "$ref": "#/components/schemas/GameSessionGameSessionV1GameSessionMessage",
            "default": "no_error"
          },
          "errorMessage": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "loginQueueClaims": {
            "additionalProperties": true,
            "type": "object"
          },
          "loginQueueToken": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "queueIsOpen": {
            "type": "boolean"
          },
          "queuePosition": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "sessionClaims": {
            "additionalProperties": true,
            "type": "object"
          },
          "sessionToken": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/GameSessionGameSessionV1GameSessionState",
            "default": "initializing"
          },
          "waitTime": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GameSessionGameSessionV1GameSessionState": {
        "enum": [
          "initializing",
          "fetching_bypass",
          "joining_queue",
          "in_queue",
          "login_created",
          "creating_session",
          "connected",
          "deleting_session",
          "failed"
        ],
        "type": "string"
      },
      "GameSessionGarenaPartnerCredentials": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionGoogleAuthCredentials": {
        "properties": {
          "idToken": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionHttpCookie": {
        "properties": {
          "domain": {
            "type": "string"
          },
          "hostOnly": {
            "default": true,
            "type": "boolean"
          },
          "httpOnly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "persistent": {
            "type": "boolean"
          },
          "secureOnly": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionHttpCookieJar": {
        "properties": {
          "cookies": {
            "items": {
              "$ref": "#/components/schemas/GameSessionHttpCookie"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GameSessionIdToken": {
        "properties": {
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionImplicitAuthorization": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/GameSessionAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/GameSessionIdToken"
          }
        },
        "type": "object"
      },
      "GameSessionLoginAMR": {
        "enum": [
          "cookie",
          "password",
          "captcha",
          "mfa",
          "signup",
          "google_auth",
          "game_center",
          "facebook",
          "apple",
          "msdk_qq",
          "msdk_wechat",
          "wegame",
          "tencent",
          "garena"
        ],
        "type": "string"
      },
      "GameSessionLoginQueueServiceLoginQueueRequest": {
        "properties": {
          "token": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/GameSessionLoginQueueServiceLoginQueueTokenType",
            "default": "UNKNOWN"
          }
        },
        "type": "object"
      },
      "GameSessionLoginQueueServiceLoginQueueRequestBody": {
        "properties": {
          "bypassToken": {
            "nullable": true,
            "type": "string"
          },
          "clientName": {
            "type": "string"
          },
          "entitlements": {
            "type": "string"
          },
          "queueToken": {
            "nullable": true,
            "type": "string"
          },
          "userinfo": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionLoginQueueServiceLoginQueueTokenType": {
        "enum": [
          "LOGIN",
          "QUEUE",
          "UNKNOWN"
        ],
        "type": "string"
      },
      "GameSessionLoginQueueServiceQueueToken": {
        "properties": {
          "exp": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "full": {
            "default": true,
            "type": "boolean"
          },
          "iat": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "queuePos": {
            "default": 50,
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "retryAfter": {
            "default": 5,
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "waitTime": {
            "default": 5,
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GameSessionLogoutReason": {
        "enum": [
          "generic",
          "tokens_expired"
        ],
        "type": "string"
      },
      "GameSessionMSDKQQPartnerCredentials": {
        "properties": {
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          },
          "openKey": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionMSDKV5PartnerCredentials": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "channel": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "ext": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionMSDKWeChatPartnerCredentials": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionMultifactorDetails": {
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/GameSessionMultifactorMethod",
            "default": "method_not_set"
          },
          "methods": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "mfaVersion": {
            "nullable": true,
            "type": "string"
          },
          "multiFactorCodeLength": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GameSessionMultifactorMethod": {
        "enum": [
          "method_not_set",
          "email",
          "authenticator",
          "sms",
          "push"
        ],
        "type": "string"
      },
      "GameSessionPartnerCredentials": {
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/GameSessionGameCenterAuthCredentials",
            "nullable": true
          },
          "garena": {
            "$ref": "#/components/schemas/GameSessionGarenaPartnerCredentials",
            "nullable": true
          },
          "google_auth": {
            "$ref": "#/components/schemas/GameSessionGoogleAuthCredentials",
            "nullable": true
          },
          "msdk_qq": {
            "$ref": "#/components/schemas/GameSessionMSDKQQPartnerCredentials",
            "nullable": true
          },
          "msdk_wechat": {
            "$ref": "#/components/schemas/GameSessionMSDKWeChatPartnerCredentials",
            "nullable": true
          },
          "tencent": {
            "$ref": "#/components/schemas/GameSessionTencentPartnerCredentials",
            "nullable": true
          },
          "wegame": {
            "$ref": "#/components/schemas/GameSessionWeGamePartnerCredentials",
            "nullable": true
          }
        },
        "type": "object"
      },
      "GameSessionPartnerCredentialsV3": {
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/GameSessionGameCenterAuthCredentials",
            "nullable": true
          },
          "garena": {
            "$ref": "#/components/schemas/GameSessionGarenaPartnerCredentials",
            "nullable": true
          },
          "google_auth": {
            "$ref": "#/components/schemas/GameSessionGoogleAuthCredentials",
            "nullable": true
          },
          "msdk_v5": {
            "$ref": "#/components/schemas/GameSessionMSDKV5PartnerCredentials",
            "nullable": true
          },
          "tencent": {
            "$ref": "#/components/schemas/GameSessionTencentPartnerCredentials",
            "nullable": true
          },
          "wegame": {
            "$ref": "#/components/schemas/GameSessionWeGamePartnerCredentials",
            "nullable": true
          }
        },
        "type": "object"
      },
      "GameSessionPluginCallerId_MockCallerId": {
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionPluginCallerId_ProductSession": {
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionPublicClientConfig": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionRSOAuthorizationSubmission": {
        "properties": {
          "acr_values": {
            "type": "string"
          },
          "claims": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "response_type": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionRSOAuthorizationTrustLevel": {
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ],
        "type": "string"
      },
      "GameSessionRSOCredentialSubmission": {
        "properties": {
          "language": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "region": {
            "nullable": true,
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionRSOJWTConfig": {
        "properties": {
          "token": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionRSOOTPSubmission": {
        "properties": {
          "code": {
            "type": "string"
          },
          "rememberDevice": {
            "type": "boolean"
          },
          "retry": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionRSOPlayerCredentials": {
        "properties": {
          "password": {
            "type": "string"
          },
          "platformId": {
            "nullable": true,
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionRSOReauthenticationSubmission": {
        "properties": {
          "password": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionSessionCredentials": {
        "properties": {
          "password": {
            "type": "string"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "region": {
            "nullable": true,
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionSessionLoginToken": {
        "properties": {
          "authentication_type": {
            "$ref": "#/components/schemas/GameSessionAuthenticationTypeEnum",
            "nullable": true
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "persist_login": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GameSessionSessionMultifactor": {
        "properties": {
          "code": {
            "type": "string"
          },
          "retry": {
            "type": "boolean"
          },
          "trustDevice": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GameSessionSessionReauthentication": {
        "properties": {
          "password": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionSessionResponse": {
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/GameSessionAuthenticationTypeEnum",
            "nullable": true
          },
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/GameSessionMultifactorDetails",
            "default": {
              "method": "method_not_set"
            }
          },
          "persistLogin": {
            "type": "boolean"
          },
          "securityProfile": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/GameSessionSessionResponseType",
            "default": "unknown_authentication_response"
          }
        },
        "type": "object"
      },
      "GameSessionSessionResponseType": {
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_password",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ],
        "type": "string"
      },
      "GameSessionSessionSignup": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionStatusMessage": {
        "properties": {
          "code": {
            "type": "string"
          },
          "isError": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionTencentPartnerCredentials": {
        "properties": {
          "accountType": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "cltkey": {
            "type": "string"
          },
          "cltkeyLength": {
            "type": "string"
          },
          "gameSignatureLength": {
            "type": "string"
          },
          "szGameSignature": {
            "type": "string"
          },
          "uId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionUserInfo": {
        "properties": {
          "userInfo": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GameSessionWeGamePartnerCredentials": {
        "properties": {
          "railGameId": {
            "type": "string"
          },
          "railId": {
            "type": "string"
          },
          "railSessionTicket": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GarenaAuthGarenaPartnerCredentials": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GarenaAuthPartnerCredentials": {
        "properties": {
          "garena": {
            "$ref": "#/components/schemas/GarenaAuthGarenaPartnerCredentials",
            "nullable": true
          }
        },
        "type": "object"
      },
      "GarenaAuthStatusMessage": {
        "properties": {
          "code": {
            "type": "string"
          },
          "isError": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "InfoRadiatorAccessToken": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "InfoRadiatorAuthenticationTypeEnum": {
        "enum": [
          "SSOAuth",
          "RiotAuth",
          "None"
        ],
        "type": "string"
      },
      "InfoRadiatorAuthorization": {
        "properties": {
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "InfoRadiatorBuildInfo": {
        "properties": {
          "patchline": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "InfoRadiatorPatchlineMetadata": {
        "properties": {
          "config_type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "InfoRadiatorSession": {
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "InfoRadiatorSessionResponse": {
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/InfoRadiatorAuthenticationTypeEnum",
            "nullable": true
          },
          "error": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "InfoRadiatorVoiceChatHeartbeatMetrics": {
        "properties": {
          "productsUsingVoice": {
            "items": {
              "$ref": "#/components/schemas/InfoRadiatorVoiceChatHeartbeatMetrics_PerProductData"
            },
            "type": "array"
          },
          "providerData": {
            "items": {
              "$ref": "#/components/schemas/InfoRadiatorVoiceChatHeartbeatMetrics_PerProviderData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InfoRadiatorVoiceChatHeartbeatMetrics_PerProductData": {
        "properties": {
          "channelsInUse": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "providerName": {
            "type": "string"
          },
          "target": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "InfoRadiatorVoiceChatHeartbeatMetrics_PerProviderData": {
        "properties": {
          "isLoggedIn": {
            "type": "boolean"
          },
          "providerName": {
            "type": "string"
          },
          "target": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "JwtAuthenticatorJWTVerifyResource": {
        "properties": {
          "key": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "KrAccountAccessToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "KrAccountAccountPromotionSession": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "KrAccountKrAccountApiSession": {
        "properties": {
          "sessionToken": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "KrAccountKrAccountPluginConfig": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "krAccountPromotionUrl": {
            "type": "string"
          },
          "krAccountServiceUrl": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LifecycleData": {
        "properties": {
          "data": {
            "additionalProperties": true,
            "type": "object"
          },
          "lifecycleEventType": {
            "$ref": "#/components/schemas/LifecycleEventType",
            "default": 0
          }
        },
        "type": "object"
      },
      "LifecycleEventType": {
        "description": "Lifecycle event type for all events",
        "enum": [
          "OnCreate",
          "OnStart",
          "OnRestart",
          "OnResume",
          "OnPause",
          "OnStop",
          "OnDestroy",
          "OnActivityResult",
          "OnNewIntent",
          "DidFinishLaunchingWithOptions",
          "OpenURL"
        ],
        "type": "string"
      },
      "LogSeverityLevels": {
        "enum": [
          "Okay",
          "Warning",
          "Error",
          "Always"
        ],
        "type": "string"
      },
      "LoginPhase": {
        "description": "Login phase for the client.",
        "enum": [
          "unknown",
          "pending",
          "not_logged_in",
          "logged_in"
        ],
        "type": "string"
      },
      "LoginStatus": {
        "description": "State of the login plugin.",
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/LoginPhase",
            "default": "unknown"
          }
        },
        "type": "object"
      },
      "LoyaltyV2ExternalProcess": {
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LoyaltyV2LoyaltyConfig": {
        "properties": {
          "backendUrl": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "gameShard": {
            "type": "string"
          },
          "heartbeatInterval": {
            "format": "double",
            "type": "number"
          },
          "webRequestInitialRetryDelayInMilliSec": {
            "default": 100,
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "webRequestMaxRetryDelayInMilliSec": {
            "default": 1000,
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "webRequestRetryCount": {
            "default": 3,
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "webRequestTimeoutInSec": {
            "default": 5,
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LoyaltyV2PCBangInfo": {
        "properties": {
          "pcbId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LoyaltyV2Session": {
        "properties": {
          "product": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "serviceState": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxAccessToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxAffinityV1AffinityInput": {
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxAffinityV2AffinityProductInput": {
        "properties": {
          "product": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxAlias": {
        "properties": {
          "game_name": {
            "nullable": true,
            "type": "string"
          },
          "tag_line": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxApiAlias": {
        "properties": {
          "game_name": {
            "nullable": true,
            "type": "string"
          },
          "tag_line": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxApiAuthorization": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/MailboxRsoAuthAccessToken"
          },
          "authenticationType": {
            "type": "string"
          },
          "claims": {
            "$ref": "#/components/schemas/MailboxApiIdClaims"
          },
          "idToken": {
            "$ref": "#/components/schemas/MailboxRsoAuthIdToken"
          },
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxApiClientDetails": {
        "properties": {
          "clientId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxApiHomeBaseCountry": {
        "properties": {
          "cached_home_base_country": {
            "type": "string"
          },
          "home_base_country": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxApiIdClaims": {
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/MailboxApiAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxApiLoginCountry": {
        "properties": {
          "login_country": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxApiUserInfo": {
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/MailboxApiAlias"
          },
          "country": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "lol": {
            "$ref": "#/components/schemas/MailboxApiUserInfoLol",
            "nullable": true
          },
          "lol_account": {
            "$ref": "#/components/schemas/MailboxApiUserInfoSummoner",
            "nullable": true
          },
          "phone_number_verified": {
            "type": "boolean"
          },
          "player_plocale": {
            "nullable": true,
            "type": "string"
          },
          "preferred_username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxApiUserInfoLol": {
        "properties": {
          "cpid": {
            "type": "string"
          },
          "ploc": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxApiUserInfoSummoner": {
        "properties": {
          "summoner_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxAuthorization": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/MailboxAccessToken"
          },
          "claims": {
            "$ref": "#/components/schemas/MailboxIdClaims"
          },
          "idToken": {
            "$ref": "#/components/schemas/MailboxIdToken"
          },
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxGapsMailboxUpdated": {
        "properties": {
          "product": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxIdClaims": {
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/MailboxAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxIdToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxMail": {
        "properties": {
          "createdAt": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "mailId": {
            "type": "string"
          },
          "mailType": {
            "$ref": "#/components/schemas/MailboxMailType",
            "default": "STANDARD"
          },
          "message": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/MailboxMailState",
            "default": "NEW"
          }
        },
        "type": "object"
      },
      "MailboxMailState": {
        "enum": [
          "NEW",
          "READ",
          "ACKNOWLEDGED"
        ],
        "type": "string"
      },
      "MailboxMailType": {
        "enum": [
          "STANDARD",
          "ACK_REQUIRED"
        ],
        "type": "string"
      },
      "MailboxMailboxStatusUpdated": {
        "properties": {
          "lastUpdateReceived": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MailboxPlayerAffinityCachedProductAffinity": {
        "properties": {
          "affinities": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "product": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxPlayerAffinityCachedServiceAffinity": {
        "properties": {
          "affinity": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxPlayerAffinityDataSource": {
        "enum": [
          "localCache",
          "serverAuthoritative"
        ],
        "type": "string"
      },
      "MailboxPlayerAffinityPluginConfig": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "playerAffinityServiceUrl": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxPlayerAffinityPluginStatus": {
        "properties": {
          "ready": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "MailboxPlayerAffinityProductToken": {
        "properties": {
          "affinities": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "issuedAt": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxPlayerAffinityServiceToken": {
        "properties": {
          "affinity": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "issuedAt": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "puuid": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxPlayerAffinityShardInfo": {
        "properties": {
          "product": {
            "type": "string"
          },
          "shard": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxPlayerAffinityToken": {
        "properties": {
          "affinity": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "issuedAt": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "puuid": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/MailboxPlayerAffinityDataSource",
            "default": "localCache"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxPlayerAffinityTokenProduct": {
        "properties": {
          "affinities": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "issuedAt": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/MailboxPlayerAffinityDataSource",
            "default": "localCache"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxPluginCallerId_MockCallerId": {
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxPluginCallerId_ProductSession": {
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxProductAffinityInput": {
        "properties": {
          "product": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxRequestMailParameters": {
        "properties": {
          "count": {
            "default": 20,
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "includedStates": {
            "items": {
              "$ref": "#/components/schemas/MailboxMailState"
            },
            "type": "array"
          },
          "startIndex": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MailboxRsoAuthAccessToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxRsoAuthAuthorizationRequest": {
        "properties": {
          "claims": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "clientId": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trustLevels": {
            "items": {
              "$ref": "#/components/schemas/MailboxRsoAuthAuthorizationTrustLevel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MailboxRsoAuthAuthorizationResponse": {
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/MailboxRsoAuthImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/MailboxRsoAuthAuthorizationResponseType",
            "default": "unknown_authorization_response"
          }
        },
        "type": "object"
      },
      "MailboxRsoAuthAuthorizationResponseType": {
        "enum": [
          "unknown_authorization_response",
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ],
        "type": "string"
      },
      "MailboxRsoAuthAuthorizationTrustLevel": {
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ],
        "type": "string"
      },
      "MailboxRsoAuthIdToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxRsoAuthImplicitAuthorization": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/MailboxRsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/MailboxRsoAuthIdToken"
          }
        },
        "type": "object"
      },
      "MailboxRsoAuthReadyState": {
        "properties": {
          "ready": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "MailboxRsoAuthUserInfo": {
        "properties": {
          "userInfo": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxServiceAffinityInput": {
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MailboxUpdateMailStateRequest": {
        "properties": {
          "mailId": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/MailboxMailState",
            "default": "NEW"
          }
        },
        "type": "object"
      },
      "NameCheckNameValidationResult": {
        "properties": {
          "errors": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NintendoAccountAuthorization": {
        "properties": {
          "code": {
            "type": "string"
          },
          "idToken": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NintendoAccountAuthorizationParameters": {
        "properties": {
          "scopes": {
            "type": "string"
          },
          "showUserSelector": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "NintendoAccountGetNetworkServiceAccountParameters": {
        "properties": {
          "showUserSelector": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "NintendoAccountNetworkServiceAccount": {
        "properties": {
          "idToken": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "OnlinePlatform": {
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "garena",
          "playstation",
          "switch",
          "xbox"
        ],
        "type": "string"
      },
      "PatchComponent": {
        "properties": {
          "bundlesUrl": {
            "type": "string"
          },
          "deleteForeignPaths": {
            "type": "boolean"
          },
          "dependsOn": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/PatchError",
            "nullable": true
          },
          "excludedPaths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "installPath": {
            "type": "string"
          },
          "isPatchingLocked": {
            "type": "boolean"
          },
          "metadataPath": {
            "type": "string"
          },
          "preview": {
            "$ref": "#/components/schemas/PatchPreviewDiff",
            "nullable": true
          },
          "progress": {
            "$ref": "#/components/schemas/PatchComponentActionProgress",
            "nullable": true
          },
          "requestId": {
            "type": "string"
          },
          "seedPath": {
            "type": "string"
          },
          "sieveArtifactVersion": {
            "type": "string"
          },
          "sieveProductId": {
            "type": "string"
          },
          "sieveVersionSetId": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/PatchComponentState",
            "default": "PendingVerify"
          },
          "storedDesiredComponentState": {
            "$ref": "#/components/schemas/PatchPatchsieveRelease",
            "nullable": true
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchComponentActionProgress": {
        "properties": {
          "bytesToDownload": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "bytesToRead": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "bytesToRepair": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "bytesToWrite": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "downloadedBytes": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "filesToRepair": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "phase": {
            "$ref": "#/components/schemas/PatchComponentActionProgressPhase",
            "default": "None"
          },
          "progress": {
            "format": "double",
            "type": "number"
          },
          "readBytes": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "repairedBytes": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "repairedFiles": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "stage": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "writtenBytes": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PatchComponentActionProgressPhase": {
        "enum": [
          "None",
          "Manifest",
          "Update",
          "Repair"
        ],
        "type": "string"
      },
      "PatchComponentRequest": {
        "properties": {
          "deleteForeignPaths": {
            "type": "boolean"
          },
          "dependsOn": {
            "type": "string"
          },
          "excludedPaths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "installPath": {
            "type": "string"
          },
          "metadataPath": {
            "type": "string"
          },
          "params": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "seedPath": {
            "type": "string"
          },
          "sieveProductId": {
            "type": "string"
          },
          "versionSet": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchComponentState": {
        "enum": [
          "NotInstalled",
          "PendingVerify",
          "Verifying",
          "CheckingForUpdates",
          "Previewing",
          "Patching",
          "Repairing",
          "Seeding",
          "OutOfDate",
          "UpToDate"
        ],
        "type": "string"
      },
      "PatchConfiguration": {
        "properties": {
          "cache_path": {
            "type": "string"
          },
          "cache_size": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PatchCookie": {
        "properties": {
          "cookie": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchCookies": {
        "properties": {
          "cookies": {
            "items": {
              "$ref": "#/components/schemas/PatchCookie"
            },
            "type": "array"
          },
          "expires_in": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PatchDebugSetup": {
        "properties": {
          "componentId": {
            "type": "string"
          },
          "installId": {
            "type": "string"
          },
          "installPath": {
            "type": "string"
          },
          "metadataPath": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchEntitlementsToken": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchError": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/PatchErrorCode",
            "default": "Unspecified"
          },
          "locked_file_info": {
            "$ref": "#/components/schemas/PatchLockedFileInfo",
            "nullable": true
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchErrorCode": {
        "enum": [
          "Unspecified",
          "Cancelled",
          "NotEnoughDiskSpace",
          "AccessDenied",
          "FileNotFound",
          "CorruptData",
          "FileLocked",
          "InvalidArgument",
          "DownloaderConnection",
          "DownloaderClientError",
          "DownloaderServerError",
          "DownloaderAuthorization",
          "DownloadedCorruptData",
          "AddressResolutionFailed"
        ],
        "type": "string"
      },
      "PatchInstall": {
        "properties": {
          "excluded_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "metadata_path": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "requests": {
            "$ref": "#/components/schemas/PatchRequests"
          },
          "seed_path": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PatchStatus"
          }
        },
        "type": "object"
      },
      "PatchInstallParams": {
        "properties": {
          "excluded_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metadata_path": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "seed_path": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchInstallRequest": {
        "properties": {
          "components": {
            "items": {
              "$ref": "#/components/schemas/PatchComponentRequest"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchInstallState": {
        "properties": {
          "components": {
            "items": {
              "$ref": "#/components/schemas/PatchComponent"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchLockedFileInfo": {
        "properties": {
          "process_id": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "process_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchManifestProgress": {
        "properties": {
          "bytes_to_download": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "downloaded_bytes": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PatchPatchComponentMetadata": {
        "properties": {
          "excludedPaths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "sieveLabels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "sieveProductId": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PatchPatchRequest": {
        "properties": {
          "allowedHttpFallbackHostnames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "bundlesUrl": {
            "type": "string"
          },
          "delete_foreign_paths": {
            "type": "boolean"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "max_download_speed": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "repair": {
            "type": "boolean"
          },
          "stage": {
            "maximum": 255,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "temp_path": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchPatchSetMetadata": {
        "properties": {
          "components": {
            "items": {
              "$ref": "#/components/schemas/PatchPatchComponentMetadata"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PatchPatchStatus": {
        "properties": {
          "error": {
            "$ref": "#/components/schemas/PatchError",
            "nullable": true
          },
          "progress": {
            "$ref": "#/components/schemas/PatchProgress",
            "default": {
              "phase": "None"
            }
          },
          "state": {
            "$ref": "#/components/schemas/PatchPatchStatusState",
            "default": "updating"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchPatchStatusState": {
        "enum": [
          "updating",
          "out_of_date",
          "up_to_date",
          "not_installed",
          "pending_verify",
          "repairing"
        ],
        "type": "string"
      },
      "PatchPatchlineMetadata": {
        "properties": {
          "patching_metadata": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PatchPatchSetMetadata"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "PatchPatchsieveRelease": {
        "properties": {
          "artifactId": {
            "type": "string"
          },
          "artifactVersion": {
            "type": "string"
          },
          "downloadUrl": {
            "type": "string"
          },
          "releaseId": {
            "type": "string"
          },
          "requiresScd": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PatchPatchsieveReleases": {
        "properties": {
          "releases": {
            "items": {
              "$ref": "#/components/schemas/PatchPatchsieveRelease"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PatchPatchsieveRequest": {
        "properties": {
          "artifactType": {
            "nullable": true,
            "type": "string"
          },
          "cpuArch": {
            "nullable": true,
            "type": "string"
          },
          "extraParams": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "fromArtifactType": {
            "nullable": true,
            "type": "string"
          },
          "fromArtifactVersion": {
            "nullable": true,
            "type": "string"
          },
          "fromCpuArch": {
            "nullable": true,
            "type": "string"
          },
          "fromPlatform": {
            "nullable": true,
            "type": "string"
          },
          "platform": {
            "nullable": true,
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "published": {
            "default": true,
            "type": "boolean"
          },
          "versionSet": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchPhase": {
        "enum": [
          "None",
          "Manifest",
          "Update",
          "Repair"
        ],
        "type": "string"
      },
      "PatchPreviewDiff": {
        "properties": {
          "cache_read_bytes": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "cache_write_bytes": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "disk_read_bytes": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "disk_size_diff": {
            "format": "int64",
            "type": "integer"
          },
          "disk_write_bytes": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "network_bytes_compressed": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "new_bytes": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PatchPreviewRequest": {
        "properties": {
          "fast": {
            "type": "boolean"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "stage": {
            "maximum": 255,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchPreviewStatus": {
        "properties": {
          "diff": {
            "$ref": "#/components/schemas/PatchPreviewDiff"
          },
          "error": {
            "$ref": "#/components/schemas/PatchError",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/PatchPreviewStatusState",
            "default": "pending"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchPreviewStatusState": {
        "enum": [
          "pending",
          "done",
          "inconsistent"
        ],
        "type": "string"
      },
      "PatchProgress": {
        "properties": {
          "manifest": {
            "$ref": "#/components/schemas/PatchManifestProgress",
            "nullable": true
          },
          "phase": {
            "$ref": "#/components/schemas/PatchPhase",
            "default": "None"
          },
          "progress": {
            "format": "double",
            "type": "number"
          },
          "repair": {
            "$ref": "#/components/schemas/PatchRepairProgress",
            "nullable": true
          },
          "update": {
            "$ref": "#/components/schemas/PatchUpdateProgress",
            "nullable": true
          }
        },
        "type": "object"
      },
      "PatchRegionLocale": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchRepairFileInfo": {
        "properties": {
          "path": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/PatchRepairFileInfoState",
            "default": "ready"
          }
        },
        "type": "object"
      },
      "PatchRepairFileInfoState": {
        "enum": [
          "marked_for_repair",
          "repairing",
          "ready",
          "marked_for_update",
          "updating",
          "canceled"
        ],
        "type": "string"
      },
      "PatchRepairProgress": {
        "properties": {
          "bytes_to_repair": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "files_to_repair": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "repaired_bytes": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "repaired_files": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PatchRepairRequest": {
        "properties": {
          "allowed_http_fallback_hostnames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "delete_foreign_paths": {
            "type": "boolean"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "manifest_url": {
            "type": "string"
          },
          "max_download_speed": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PatchRepairStatus": {
        "properties": {
          "error": {
            "$ref": "#/components/schemas/PatchError",
            "nullable": true
          },
          "manifest_url": {
            "type": "string"
          },
          "repair_progress": {
            "$ref": "#/components/schemas/PatchRepairProgress"
          },
          "state": {
            "$ref": "#/components/schemas/PatchRepairStatusState",
            "default": "pending"
          }
        },
        "type": "object"
      },
      "PatchRepairStatusState": {
        "enum": [
          "pending",
          "in_progress",
          "canceled",
          "done"
        ],
        "type": "string"
      },
      "PatchRequestStatus": {
        "properties": {
          "fullName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/PatchRequestStatusState",
            "default": "Queued"
          }
        },
        "type": "object"
      },
      "PatchRequestStatusState": {
        "enum": [
          "Queued",
          "InProgress",
          "Done"
        ],
        "type": "string"
      },
      "PatchRequests": {
        "properties": {
          "patch": {
            "$ref": "#/components/schemas/PatchPatchRequest",
            "nullable": true
          },
          "preview": {
            "$ref": "#/components/schemas/PatchPreviewRequest",
            "nullable": true
          },
          "repair": {
            "$ref": "#/components/schemas/PatchRepairRequest",
            "nullable": true
          },
          "seed": {
            "$ref": "#/components/schemas/PatchSeedRequest",
            "nullable": true
          }
        },
        "type": "object"
      },
      "PatchScheduleRepairRequest": {
        "properties": {
          "files": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "PatchSeedRequest": {
        "properties": {
          "allowedHttpFallbackHostnames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "bundlesUrl": {
            "type": "string"
          },
          "delete_foreign_paths": {
            "type": "boolean"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "max_download_speed": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "stage": {
            "maximum": 255,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchSeedStatus": {
        "properties": {
          "error": {
            "$ref": "#/components/schemas/PatchError",
            "nullable": true
          },
          "progress": {
            "$ref": "#/components/schemas/PatchProgress",
            "default": {
              "phase": "None"
            }
          },
          "state": {
            "$ref": "#/components/schemas/PatchSeedStatusState",
            "default": "out_of_date"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchSeedStatusState": {
        "enum": [
          "seeding",
          "out_of_date",
          "up_to_date",
          "pending_verify"
        ],
        "type": "string"
      },
      "PatchSession": {
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchStartFullRepairRequest": {
        "properties": {
          "deleteForeignPaths": {
            "type": "boolean"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "PatchStartPartialRepairRequest": {
        "properties": {
          "deleteForeignPaths": {
            "type": "boolean"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "PatchStartPatchingOrSeedingRequest": {
        "properties": {
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "stage": {
            "maximum": 255,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "tempPath": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchStartPreviewRequest": {
        "properties": {
          "fast": {
            "type": "boolean"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "stage": {
            "maximum": 255,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PatchStatus": {
        "properties": {
          "patch": {
            "$ref": "#/components/schemas/PatchPatchStatus",
            "nullable": true
          },
          "preview": {
            "$ref": "#/components/schemas/PatchPreviewStatus",
            "nullable": true
          },
          "repair": {
            "$ref": "#/components/schemas/PatchRepairStatus",
            "nullable": true
          },
          "seed": {
            "$ref": "#/components/schemas/PatchSeedStatus",
            "nullable": true
          }
        },
        "type": "object"
      },
      "PatchUpdateProgress": {
        "properties": {
          "bytes_to_download": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "bytes_to_read": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "bytes_to_write": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "downloaded_bytes": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "read_bytes": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "stage": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer"
          },
          "written_bytes": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PatchV2Configuration": {
        "properties": {
          "chunkBatchSize": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "chunkingThreads": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "connections": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "dnsTTL": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "downloadBuffer": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "downloadLimit": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "ipv4Only": {
            "type": "boolean"
          },
          "maxByteRanges": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "receiveBuffer": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "sliceSize": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "timeout": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PaymentsIdToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentsInitializedPurchase": {
        "properties": {
          "purchaseStartUrl": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlatformLoginAuthenticationMethod": {
        "enum": [
          "Riot",
          "Google",
          "GameCenter",
          "Facebook",
          "Apple",
          "QQ",
          "Wechat",
          "Wegame"
        ],
        "type": "string"
      },
      "PlatformLoginAuthorizationRequest": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trustLevels": {
            "items": {
              "$ref": "#/components/schemas/PlatformLoginRSOAuthorizationTrustLevel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlatformLoginAuthorizationResponse": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PlatformLoginAuthorizationResponseType"
          }
        },
        "type": "object"
      },
      "PlatformLoginAuthorizationResponseType": {
        "enum": [
          "needs_authentication",
          "authorized"
        ],
        "type": "string"
      },
      "PlatformLoginLoginPhase": {
        "enum": [
          "unknown",
          "not_logged_in",
          "logged_in"
        ],
        "type": "string"
      },
      "PlatformLoginLoginResult": {
        "properties": {
          "additionalFields": {
            "additionalProperties": true,
            "nullable": true,
            "type": "object"
          },
          "error": {
            "type": "string"
          },
          "isLoginSuccessful": {
            "type": "boolean"
          },
          "loginType": {
            "$ref": "#/components/schemas/PlatformLoginLoginTypeEnum",
            "default": "Invalid"
          },
          "rsoSignOnAttemptEvent": {
            "$ref": "#/components/schemas/PlatformLoginRSOSignOnAttemptEvent",
            "default": {
              "outcome": "Success",
              "storedSessionState": "Accepted"
            }
          }
        },
        "type": "object"
      },
      "PlatformLoginLoginStatus": {
        "properties": {
          "persist": {
            "type": "boolean"
          },
          "phase": {
            "$ref": "#/components/schemas/PlatformLoginLoginPhase",
            "default": "unknown"
          }
        },
        "type": "object"
      },
      "PlatformLoginLoginTypeEnum": {
        "enum": [
          "Invalid",
          "NoLongLivedSession",
          "LongLivedSessionRejected",
          "LongLivedSessionAccepted"
        ],
        "type": "string"
      },
      "PlatformLoginOnlinePlatform": {
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "garena",
          "playstation",
          "switch",
          "xbox"
        ],
        "type": "string"
      },
      "PlatformLoginOutcome": {
        "enum": [
          "Success",
          "PrivateSettingsMissing",
          "PrivateSettingsEmpty",
          "NoLoginSessionCookies",
          "SetPersistedLoginFailed",
          "AuthRequestFailed",
          "AuthResultNotAuthorized"
        ],
        "type": "string"
      },
      "PlatformLoginPlatformUser": {
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/PlatformLoginOnlinePlatform",
            "default": "unknown"
          }
        },
        "type": "object"
      },
      "PlatformLoginProduct": {
        "properties": {
          "patchline": {
            "nullable": true,
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlatformLoginRSOAuthorizationTrustLevel": {
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ],
        "type": "string"
      },
      "PlatformLoginRSOSignOnAttemptEvent": {
        "properties": {
          "authenticationMethod": {
            "$ref": "#/components/schemas/PlatformLoginAuthenticationMethod",
            "nullable": true
          },
          "errorCode": {
            "nullable": true,
            "type": "string"
          },
          "errorDescription": {
            "nullable": true,
            "type": "string"
          },
          "errorName": {
            "nullable": true,
            "type": "string"
          },
          "outcome": {
            "$ref": "#/components/schemas/PlatformLoginOutcome",
            "default": "Success"
          },
          "product": {
            "$ref": "#/components/schemas/PlatformLoginProduct",
            "nullable": true
          },
          "signOnAttemptNumber": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "storedSessionState": {
            "$ref": "#/components/schemas/PlatformLoginStoredSessionState",
            "default": "Accepted"
          }
        },
        "type": "object"
      },
      "PlatformLoginReadyState": {
        "properties": {
          "ready": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlatformLoginSessionResponse": {
        "properties": {
          "error": {
            "type": "string"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformLoginSessionResponseType",
            "default": "unknown_authentication_response"
          }
        },
        "type": "object"
      },
      "PlatformLoginSessionResponseType": {
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ],
        "type": "string"
      },
      "PlatformLoginStoredSessionState": {
        "enum": [
          "Accepted",
          "Rejected",
          "Absent"
        ],
        "type": "string"
      },
      "PlatformUiAccessToken": {
        "properties": {
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlatformUiAliasesV1Alias": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "created_datetime": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "game_name": {
            "type": "string"
          },
          "summoner": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlatformUiAliasesV1AliasInput": {
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlatformUiAliasesV1AliasList": {
        "properties": {
          "aliases": {
            "items": {
              "$ref": "#/components/schemas/PlatformUiAliasesV1Alias"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlatformUiAliasesV1AliasValidationReason": {
        "enum": [
          "no_error",
          "name_change_forbidden",
          "name_not_available",
          "rate_limited"
        ],
        "type": "string"
      },
      "PlatformUiAliasesV1RequiredResponse": {
        "properties": {
          "isAliasChangeRequired": {
            "type": "boolean"
          },
          "isAliasMissing": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlatformUiAliasesV1StatusResponse": {
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PlatformUiAliasesV1Alias",
            "nullable": true
          },
          "errorCode": {
            "$ref": "#/components/schemas/PlatformUiAliasesV1AliasValidationReason",
            "default": "no_error"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlatformUiAuthenticationResponse": {
        "properties": {
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "healup": {
            "$ref": "#/components/schemas/PlatformUiHealupResponseDetails"
          },
          "multifactor": {
            "$ref": "#/components/schemas/PlatformUiMultifactorResponseDetails"
          },
          "signup": {
            "$ref": "#/components/schemas/PlatformUiSignupResponseDetails"
          },
          "success": {
            "$ref": "#/components/schemas/PlatformUiSuccessResponseDetails"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformUiResponseType",
            "default": "auth"
          }
        },
        "type": "object"
      },
      "PlatformUiEligibilityResponse": {
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/PlatformUiAliasesV1AliasValidationReason",
            "default": "no_error"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "isTagLineCustomizable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlatformUiGenerateTaglineInput": {
        "properties": {
          "game_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlatformUiGenerateTaglineResponse": {
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/PlatformUiAliasesV1AliasValidationReason",
            "default": "no_error"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlatformUiHealupResponseDetails": {
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "required_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "required_fields_hints": {
            "additionalProperties": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "PlatformUiIdToken": {
        "properties": {
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlatformUiInitiateLoginSessionRequest": {
        "properties": {
          "loginStrategy": {
            "$ref": "#/components/schemas/PlatformUiLoginStrategyType",
            "nullable": true
          },
          "persistLogin": {
            "type": "boolean"
          },
          "requireRiotID": {
            "type": "boolean"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlatformUiLoginStrategyType": {
        "enum": [
          "riot_identity",
          "google",
          "game_center",
          "facebook",
          "apple",
          "nintendo",
          "xbox",
          "playstation"
        ],
        "type": "string"
      },
      "PlatformUiMultifactorResponseDetails": {
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "methods": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "mode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlatformUiPlatformUIError": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/PlatformUierrorState",
            "default": "ConnectionTimeout"
          },
          "recoverable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlatformUiPlatformUIState": {
        "properties": {
          "error": {
            "$ref": "#/components/schemas/PlatformUiPlatformUIError",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/PlatformUistatus",
            "default": "Initializing"
          },
          "view": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlatformUiPlayerSessionState": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlatformUiAccessToken",
            "nullable": true
          },
          "actionRequired": {
            "type": "boolean"
          },
          "config": {
            "$ref": "#/components/schemas/PlatformUiInitiateLoginSessionRequest"
          },
          "errorCode": {
            "nullable": true,
            "type": "string"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlatformUiIdToken",
            "nullable": true
          },
          "loginCountry": {
            "nullable": true,
            "type": "string"
          },
          "loginState": {
            "$ref": "#/components/schemas/PlatformUiPlayerSessionStateType",
            "default": "Initializing"
          },
          "suggestedActions": {
            "items": {
              "$ref": "#/components/schemas/PlatformUiSuggestedAction"
            },
            "type": "array"
          },
          "userInfo": {
            "additionalProperties": true,
            "nullable": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "PlatformUiPlayerSessionStateType": {
        "enum": [
          "PendingInitialization",
          "PendingPlatformUser",
          "Initializing",
          "PendingClientId",
          "PendingCreateAuthorization",
          "PendingPlatformAuthorizationConsent",
          "PendingProviderCredentials",
          "PendingAuthentication",
          "PendingSignup",
          "PendingHealup",
          "LoginTokenExchange",
          "PendingForget",
          "PendingConsent",
          "PendingEulaData",
          "PendingEulaAcceptance",
          "PendingRiotID",
          "Authorized",
          "Error"
        ],
        "type": "string"
      },
      "PlatformUiResponseType": {
        "enum": [
          "auth",
          "healup",
          "signup",
          "success",
          "error"
        ],
        "type": "string"
      },
      "PlatformUiSignupCodeLinking": {
        "properties": {
          "direct_url": {
            "type": "string"
          },
          "manual_url": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          },
          "short_url": {
            "nullable": true,
            "type": "string"
          },
          "status_url": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlatformUiSignupLinkDetails": {
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "code_linking": {
            "$ref": "#/components/schemas/PlatformUiSignupCodeLinking",
            "nullable": true
          },
          "options": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "suggested": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlatformUiSignupResponseDetails": {
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "link": {
            "$ref": "#/components/schemas/PlatformUiSignupLinkDetails"
          },
          "required_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "required_fields_hints": {
            "additionalProperties": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "PlatformUiSuccessResponseDetails": {
        "properties": {
          "linked": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlatformUiSuggestedAction": {
        "properties": {
          "description": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          },
          "method": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlatformUiUserInfo": {
        "properties": {
          "userInfo": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlatformUiWebLinkingStatus": {
        "enum": [
          "NEW",
          "PENDING",
          "EXPIRED",
          "COMPLETED"
        ],
        "type": "string"
      },
      "PlatformUiWebLinkingStatusResponse": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PlatformUiWebLinkingStatus",
            "default": "NEW"
          },
          "ttl": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PlatformUiXboxSelectUserParameters": {
        "properties": {
          "options": {
            "$ref": "#/components/schemas/PlatformUiXboxSignInOptions",
            "default": "show_user_selector"
          },
          "shouldRetryOnAbort": {
            "default": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlatformUiXboxSignInOptions": {
        "enum": [
          "add_default_user_allowing_ui",
          "show_user_selector",
          "allow_guests"
        ],
        "type": "string"
      },
      "PlatformUicode": {
        "enum": [
          "RateLimited",
          "FetchProductIdFailure",
          "InvalidCDNPath",
          "LoginStrategyMissing",
          "ConfigAuthMethodMissing",
          "ConfigAuthPayloadMissing",
          "InvalidLoginState",
          "CreateSessionFailure",
          "UpdateSessionFailure",
          "DeleteSessionFailure",
          "AuthenticationFailure",
          "FetchCurrentAuthenticationFailure",
          "InvalidAuthenticationState",
          "SignupFailure",
          "TooYoung",
          "SigninFailure",
          "SigninAuthFailure",
          "AcceptEulaFailure",
          "PlatformConsentFailure",
          "GenerateTaglineFailure",
          "CreateRiotIDFailure",
          "SingletonMissing"
        ],
        "type": "string"
      },
      "PlatformUierrorState": {
        "enum": [
          "ConnectionTimeout",
          "RateLimited",
          "RequirementsNotMet",
          "UserCancelled",
          "PendingConsent",
          "PendingForget",
          "GuestAccount",
          "SystemSignedOut",
          "SystemOutOfDate",
          "InternalError"
        ],
        "type": "string"
      },
      "PlatformUistatus": {
        "enum": [
          "Destroyed",
          "Initializing",
          "Ready",
          "Authorizing",
          "Error",
          "ReadyToPlay"
        ],
        "type": "string"
      },
      "PlatformUser": {
        "properties": {
          "id": {
            "description": "Platform-specific identifier as a string",
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/OnlinePlatform",
            "default": "unknown",
            "description": "Canonical name of the online platform"
          }
        },
        "type": "object"
      },
      "PlayRestrictionsPlayRestrictionV1Data": {
        "properties": {
          "chat_enabled": {
            "default": true,
            "type": "boolean"
          },
          "play_restriction_setting": {
            "$ref": "#/components/schemas/PlayRestrictionsPlayRestrictionV1Settings",
            "default": "none"
          }
        },
        "type": "object"
      },
      "PlayRestrictionsPlayRestrictionV1Settings": {
        "enum": [
          "none",
          "platform_only"
        ],
        "type": "string"
      },
      "PlayRestrictionsPluginCallerId_MockCallerId": {
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayRestrictionsPluginCallerId_ProductSession": {
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountAccessToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountAliasesV1Alias": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "created_datetime": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "game_name": {
            "type": "string"
          },
          "summoner": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountAliasesV1AliasInput": {
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountAliasesV1AliasList": {
        "properties": {
          "aliases": {
            "items": {
              "$ref": "#/components/schemas/PlayerAccountAliasesV1Alias"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlayerAccountAliasesV1AliasValidationReason": {
        "enum": [
          "no_error",
          "name_change_forbidden",
          "name_not_available",
          "rate_limited"
        ],
        "type": "string"
      },
      "PlayerAccountAliasesV1RequiredResponse": {
        "properties": {
          "isAliasChangeRequired": {
            "type": "boolean"
          },
          "isAliasMissing": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerAccountAliasesV1StatusResponse": {
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PlayerAccountAliasesV1Alias",
            "nullable": true
          },
          "errorCode": {
            "$ref": "#/components/schemas/PlayerAccountAliasesV1AliasValidationReason",
            "default": "no_error"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerAccountAuthHint": {
        "properties": {
          "context": {
            "additionalProperties": true,
            "type": "object"
          },
          "required": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerAccountAuthHintType",
            "default": "email_verification"
          }
        },
        "type": "object"
      },
      "PlayerAccountAuthHintType": {
        "enum": [
          "email_verification",
          "password_reset",
          "parental_consent",
          "ambiguous_username",
          "alias_change_required"
        ],
        "type": "string"
      },
      "PlayerAccountAuthorization": {
        "properties": {
          "currentAccountId": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountAuthorizationUpdateRequest": {
        "properties": {
          "claims": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trustLevels": {
            "items": {
              "$ref": "#/components/schemas/PlayerAccountRSOAuthorizationTrustLevel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlayerAccountConfigV3ReadyState": {
        "properties": {
          "ready": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerAccountEligibilityResponse": {
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/PlayerAccountAliasesV1AliasValidationReason",
            "default": "no_error"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "isTagLineCustomizable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerAccountGenerateTaglineInput": {
        "properties": {
          "game_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountGenerateTaglineResponse": {
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/PlayerAccountAliasesV1AliasValidationReason",
            "default": "no_error"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountIdToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountPlatformUser": {
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountPlayerAccountPluginConfig": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "playerAccountServiceUrl": {
            "type": "string"
          },
          "promotionBlockTimeDays": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PlayerAccountPromotionV1AccountDetails": {
        "properties": {
          "birth_date": {
            "type": "string"
          },
          "email_address": {
            "type": "string"
          },
          "newsletter": {
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "tou_agree": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountPromotionV1AccountPromotionResponse": {
        "properties": {
          "fields": {
            "$ref": "#/components/schemas/PlayerAccountPromotionV1AccountPromotionValidationFailures"
          },
          "message": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerAccountPromotionV1AccountPromotionValidationFailures": {
        "properties": {
          "birth_date": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "email_address": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "locale": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "newsletter": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "password": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tou_agree": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "username": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlayerAccountPromotionV1BlockListResponse": {
        "properties": {
          "blockList": {
            "items": {
              "$ref": "#/components/schemas/PlayerAccountPromotionV1BlockedPuuid"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlayerAccountPromotionV1BlockedPuuid": {
        "properties": {
          "blockExpiryDate": {
            "format": "int64",
            "type": "integer"
          },
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountPromotionV1EligibilityCheckResponse": {
        "properties": {
          "errorCode": {
            "default": 200,
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "errorMessage": {
            "type": "string"
          },
          "isEligible": {
            "type": "boolean"
          },
          "isTooYoung": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerAccountPromotionV1UpdateableFieldsResponse": {
        "properties": {
          "fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlayerAccountRSOAuthorizationTrustLevel": {
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ],
        "type": "string"
      },
      "PlayerAccountRegionLocale": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountRegionsV1EligibilityCheckResponse": {
        "properties": {
          "canSelectRegion": {
            "type": "boolean"
          },
          "multipleRegionsAllowed": {
            "type": "boolean"
          },
          "selectedRegions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlayerAccountRegionsV1RegionAssignmentResponse": {
        "properties": {
          "message": {
            "$ref": "#/components/schemas/PlayerAccountRegionsV1RegionAssignmentResponseMessage",
            "default": "NO_ERROR"
          },
          "success": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerAccountRegionsV1RegionAssignmentResponseMessage": {
        "enum": [
          "LOGIN_REQUIRED",
          "SERVER_ERROR",
          "AUTH_REFRESH_FAILED",
          "REGION_ALREADY_ASSIGNED",
          "REGION_EXISTS",
          "REGION_NOT_ALLOWED",
          "BAD_ENTITY_PARAMETER",
          "NO_ERROR"
        ],
        "type": "string"
      },
      "PlayerAccountVngV1HomeBaseCountry": {
        "properties": {
          "cached_home_base_country": {
            "type": "string"
          },
          "home_base_country": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountVngV1RegionLocale": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountVngV1StatusResponse": {
        "properties": {
          "action_required": {
            "type": "boolean"
          },
          "action_url": {
            "type": "string"
          },
          "action_url_raw": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountVngV1WebUrlRequest": {
        "properties": {
          "locale": {
            "nullable": true,
            "type": "string"
          },
          "redirect_uri": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAccountVngV1WebUrlResponse": {
        "properties": {
          "web_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityAccessToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityAffinityV1AffinityInput": {
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityAffinityV2AffinityProductInput": {
        "properties": {
          "product": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityAlias": {
        "properties": {
          "game_name": {
            "nullable": true,
            "type": "string"
          },
          "tag_line": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityAuthorization": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlayerAffinityAccessToken"
          },
          "claims": {
            "$ref": "#/components/schemas/PlayerAffinityIdClaims"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlayerAffinityIdToken"
          },
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityIdClaims": {
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/PlayerAffinityAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityIdToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityPlayerAffinityCachedProductAffinity": {
        "properties": {
          "affinities": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "product": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityPlayerAffinityCachedServiceAffinity": {
        "properties": {
          "affinity": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityPlayerAffinityDataSource": {
        "enum": [
          "localCache",
          "serverAuthoritative"
        ],
        "type": "string"
      },
      "PlayerAffinityPlayerAffinityPluginConfig": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "playerAffinityServiceUrl": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityPlayerAffinityPluginStatus": {
        "properties": {
          "ready": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerAffinityPlayerAffinityProductToken": {
        "properties": {
          "affinities": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "issuedAt": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityPlayerAffinityServiceToken": {
        "properties": {
          "affinity": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "issuedAt": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "puuid": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityPlayerAffinityShardInfo": {
        "properties": {
          "product": {
            "type": "string"
          },
          "shard": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityPlayerAffinityToken": {
        "properties": {
          "affinity": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "issuedAt": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "puuid": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityDataSource",
            "default": "localCache"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityPlayerAffinityTokenProduct": {
        "properties": {
          "affinities": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "issuedAt": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityDataSource",
            "default": "localCache"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityProductAffinityInput": {
        "properties": {
          "product": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerAffinityServiceAffinityInput": {
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerPreferencesPlayerPreferencesData": {
        "properties": {
          "data": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerPreferencesPluginCallerId_MockCallerId": {
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerPreferencesPluginCallerId_ProductSession": {
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerPreferencesRegionLocale": {
        "properties": {
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerReportingAuthorization": {
        "properties": {
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerReportingGapsMailboxUpdated": {
        "properties": {
          "product": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerReportingLocalizedReporterFeedbackMessage": {
        "properties": {
          "category": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerReportingMail": {
        "properties": {
          "createdAt": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "mailId": {
            "type": "string"
          },
          "mailType": {
            "$ref": "#/components/schemas/PlayerReportingMailType",
            "default": "STANDARD"
          },
          "message": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/PlayerReportingMailState",
            "default": "NEW"
          }
        },
        "type": "object"
      },
      "PlayerReportingMailState": {
        "enum": [
          "NEW",
          "READ",
          "ACKNOWLEDGED"
        ],
        "type": "string"
      },
      "PlayerReportingMailType": {
        "enum": [
          "STANDARD",
          "ACK_REQUIRED"
        ],
        "type": "string"
      },
      "PlayerReportingMailboxStatusUpdated": {
        "properties": {
          "lastUpdateReceived": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PlayerReportingPlayerAffinityInput": {
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerReportingPlayerAffinityStatus": {
        "properties": {
          "ready": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerReportingPlayerAffinityToken": {
        "properties": {
          "affinity": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerReportingPlayerReport": {
        "properties": {
          "categories": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "comment": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "match_token": {
            "type": "string"
          },
          "offender_puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerReportingPlayerReportV2": {
        "properties": {
          "categories": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "comment": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "offenderId": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "tokenType": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerReportingRegionLocale": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerReportingReporterFeedback": {
        "properties": {
          "category": {
            "type": "string"
          },
          "messageId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerReportingReporterFeedbackAcknowledgedEvent": {
        "properties": {
          "messageId": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "reportCategory": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerReportingReporterFeedbackDto": {
        "properties": {
          "category": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerReportingReporterFeedbackReceivedEvent": {
        "properties": {
          "messageId": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "reportCategory": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerReportingRequestMailParameters": {
        "properties": {
          "count": {
            "default": 20,
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "includedStates": {
            "items": {
              "$ref": "#/components/schemas/PlayerReportingMailState"
            },
            "type": "array"
          },
          "startIndex": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlayerReportingUpdateMailStateRequest": {
        "properties": {
          "mailId": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/PlayerReportingMailState",
            "default": "NEW"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleAcceptance": {
        "enum": [
          "WaitingForAllServiceData",
          "AcceptanceRequired",
          "Accepted"
        ],
        "type": "string"
      },
      "PlayerSessionLifecycleAccessToken": {
        "properties": {
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleAuthMethodConfig": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleAuthenticateGameCenterInput": {
        "properties": {
          "gamecenter": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleGameCenterInput"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleAuthenticateNintendoInput": {
        "properties": {
          "language": {
            "type": "string"
          },
          "nintendo": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleNintendoInput"
          },
          "remember": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleAuthenticatePlaystationInput": {
        "properties": {
          "language": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/PlayerSessionLifecyclePlaystationInput"
          },
          "remember": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleAuthenticateXboxInput": {
        "properties": {
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "xbox": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleXboxInput"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleAuthenticationResponse": {
        "properties": {
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "healup": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleHealupResponseDetails"
          },
          "multifactor": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleMultifactorResponseDetails"
          },
          "signup": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleSignupResponseDetails"
          },
          "success": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleSuccessResponseDetails"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleResponseType",
            "default": "auth"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleAuthenticationTypeEnum": {
        "enum": [
          "SSOAuth",
          "RiotAuth",
          "None"
        ],
        "type": "string"
      },
      "PlayerSessionLifecycleAuthorizationRequest": {
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAuthenticationTypeEnum",
            "nullable": true
          },
          "claims": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "clientId": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trustLevels": {
            "items": {
              "$ref": "#/components/schemas/PlayerSessionLifecycleRSOAuthorizationTrustLevel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleAuthorizationResponse": {
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAuthorizationResponseType",
            "default": "unknown_authorization_response"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleAuthorizationResponseType": {
        "enum": [
          "unknown_authorization_response",
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ],
        "type": "string"
      },
      "PlayerSessionLifecycleEntitlementsToken": {
        "properties": {
          "entitlements": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleGameCenterInput": {
        "properties": {
          "bundle_id": {
            "type": "string"
          },
          "player_id": {
            "type": "string"
          },
          "public_key_url": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleHealupResponseDetails": {
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "required_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "required_fields_hints": {
            "additionalProperties": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleIdToken": {
        "properties": {
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleImplicitAuthorization": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleIdToken"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleInitiateLoginSessionRequest": {
        "properties": {
          "loginStrategy": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleLoginStrategyType",
            "nullable": true
          },
          "persistLogin": {
            "type": "boolean"
          },
          "requireRiotID": {
            "type": "boolean"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleLoginStrategyType": {
        "enum": [
          "riot_identity",
          "google",
          "game_center",
          "facebook",
          "apple",
          "nintendo",
          "xbox",
          "playstation"
        ],
        "type": "string"
      },
      "PlayerSessionLifecycleMultifactorDetails": {
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleMultifactorMethod",
            "default": "method_not_set"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleMultifactorMethod": {
        "enum": [
          "method_not_set",
          "email",
          "authenticator",
          "sms",
          "push"
        ],
        "type": "string"
      },
      "PlayerSessionLifecycleMultifactorResponseDetails": {
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "methods": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "mode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleNintendoAccountAuthorization": {
        "properties": {
          "code": {
            "type": "string"
          },
          "idToken": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleNintendoAccountAuthorizationParameters": {
        "properties": {
          "scopes": {
            "type": "string"
          },
          "showUserSelector": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleNintendoAccountGetNetworkServiceAccountParameters": {
        "properties": {
          "showUserSelector": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleNintendoAccountNetworkServiceAccount": {
        "properties": {
          "idToken": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleNintendoInput": {
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          },
          "nsa_token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleOnlinePlatform": {
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "garena",
          "playstation",
          "switch",
          "xbox"
        ],
        "type": "string"
      },
      "PlayerSessionLifecyclePlatformUser": {
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleOnlinePlatform",
            "default": "unknown"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecyclePlayerAffinityProductToken": {
        "properties": {
          "affinities": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "issuedAt": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecyclePlayerSessionState": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAccessToken",
            "nullable": true
          },
          "actionRequired": {
            "type": "boolean"
          },
          "config": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleInitiateLoginSessionRequest"
          },
          "errorCode": {
            "nullable": true,
            "type": "string"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleIdToken",
            "nullable": true
          },
          "loginCountry": {
            "nullable": true,
            "type": "string"
          },
          "loginState": {
            "$ref": "#/components/schemas/PlayerSessionLifecyclePlayerSessionStateType",
            "default": "Initializing"
          },
          "suggestedActions": {
            "items": {
              "$ref": "#/components/schemas/PlayerSessionLifecycleSuggestedAction"
            },
            "type": "array"
          },
          "userInfo": {
            "additionalProperties": true,
            "nullable": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecyclePlayerSessionStateType": {
        "enum": [
          "PendingInitialization",
          "PendingPlatformUser",
          "Initializing",
          "PendingClientId",
          "PendingCreateAuthorization",
          "PendingPlatformAuthorizationConsent",
          "PendingProviderCredentials",
          "PendingAuthentication",
          "PendingSignup",
          "PendingHealup",
          "LoginTokenExchange",
          "PendingForget",
          "PendingConsent",
          "PendingEulaData",
          "PendingEulaAcceptance",
          "PendingRiotID",
          "Authorized",
          "Error"
        ],
        "type": "string"
      },
      "PlayerSessionLifecyclePlaystationAccountAuthorization": {
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecyclePlaystationAccountAuthorizationParameters": {
        "properties": {
          "client_id": {
            "type": "string"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecyclePlaystationAccountAuthorizationResponse": {
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/PlayerSessionLifecyclePlaystationAccountAuthorization",
            "nullable": true
          },
          "error_code": {
            "$ref": "#/components/schemas/PlayerSessionLifecyclePlaystationAccountErrorCode",
            "nullable": true
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecyclePlaystationAccountErrorCode": {
        "enum": [
          "aborted",
          "signed_out",
          "user_not_found",
          "not_signed_up",
          "logout",
          "latest_system_software_exist"
        ],
        "type": "string"
      },
      "PlayerSessionLifecyclePlaystationInput": {
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecyclePluginConfigResponse": {
        "properties": {
          "methods": {
            "items": {
              "$ref": "#/components/schemas/PlayerSessionLifecycleAuthMethodConfig"
            },
            "type": "array"
          },
          "service_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleRSOAuthorizationTrustLevel": {
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ],
        "type": "string"
      },
      "PlayerSessionLifecycleReadyState": {
        "properties": {
          "ready": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleResponseType": {
        "enum": [
          "auth",
          "healup",
          "signup",
          "success",
          "error"
        ],
        "type": "string"
      },
      "PlayerSessionLifecycleSessionLoginToken": {
        "properties": {
          "authentication_type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAuthenticationTypeEnum",
            "nullable": true
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "persist_login": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleSessionResponse": {
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAuthenticationTypeEnum",
            "nullable": true
          },
          "country": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleMultifactorDetails",
            "default": {
              "method": "method_not_set"
            }
          },
          "persistLogin": {
            "type": "boolean"
          },
          "state": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleSessionState",
            "default": "Destroyed"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleSessionResponseType",
            "default": "unknown_authentication_response"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleSessionResponseType": {
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_password",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ],
        "type": "string"
      },
      "PlayerSessionLifecycleSessionState": {
        "enum": [
          "Created",
          "Updated",
          "Destroyed"
        ],
        "type": "string"
      },
      "PlayerSessionLifecycleSignupLinkDetails": {
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "options": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "suggested": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleSignupResponseDetails": {
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "link": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleSignupLinkDetails"
          },
          "required_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "required_fields_hints": {
            "additionalProperties": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleSuccessResponseDetails": {
        "properties": {
          "linked": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleSuggestedAction": {
        "properties": {
          "description": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          },
          "method": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleUserInfo": {
        "properties": {
          "userInfo": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleXboxAccountAuthorization": {
        "properties": {
          "user_hash": {
            "type": "string"
          },
          "xsts_token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleXboxAccountAuthorizationParameters": {
        "properties": {
          "authenticatorUrl": {
            "type": "string"
          },
          "showUserSelector": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleXboxAccountAuthorizationResponse": {
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleXboxAccountAuthorization",
            "nullable": true
          },
          "error_code": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleXboxAccountErrorCode",
            "nullable": true
          }
        },
        "type": "object"
      },
      "PlayerSessionLifecycleXboxAccountErrorCode": {
        "enum": [
          "aborted",
          "signed_out",
          "user_not_found",
          "no_default_user"
        ],
        "type": "string"
      },
      "PlayerSessionLifecycleXboxInput": {
        "properties": {
          "user_hash": {
            "type": "string"
          },
          "xsts_token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlaystationAccountAuthorization": {
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlaystationAccountAuthorizationParameters": {
        "properties": {
          "client_id": {
            "type": "string"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlaystationAccountAuthorizationResponse": {
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/PlaystationAccountAuthorization",
            "nullable": true
          },
          "error_code": {
            "$ref": "#/components/schemas/PlaystationAccountErrorCode",
            "nullable": true
          }
        },
        "type": "object"
      },
      "PlaystationAccountErrorCode": {
        "enum": [
          "aborted",
          "signed_out",
          "user_not_found",
          "not_signed_up",
          "logout",
          "latest_system_software_exist"
        ],
        "type": "string"
      },
      "PlaystationAccountOnlinePlatform": {
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "garena",
          "playstation",
          "switch",
          "xbox"
        ],
        "type": "string"
      },
      "PlaystationAccountPlatformUser": {
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/PlaystationAccountOnlinePlatform",
            "default": "unknown"
          }
        },
        "type": "object"
      },
      "PlaystationAccountUser": {
        "properties": {
          "account_id": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "error_code": {
            "$ref": "#/components/schemas/PlaystationAccountErrorCode",
            "nullable": true
          },
          "user_id": {
            "default": -1,
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PluginDescriptionResource": {
        "properties": {
          "name": {
            "type": "string"
          },
          "pluginDependencies": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "riotMeta": {
            "$ref": "#/components/schemas/PluginMetadataResource",
            "default": {
              "app": "",
              "feature": "",
              "globalAssetBundles": [],
              "hasBundledAssets": false,
              "implements": {},
              "perLocaleAssetBundles": {},
              "subtype": "",
              "threading": "sequential",
              "type": ""
            }
          }
        },
        "type": "object"
      },
      "PluginLcdsEvent": {
        "properties": {
          "body": {
            "additionalProperties": true,
            "type": "object"
          },
          "clientId": {
            "type": "string"
          },
          "subtopic": {
            "type": "string"
          },
          "typeName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PluginLcdsResponse": {
        "properties": {
          "body": {
            "additionalProperties": true,
            "type": "object"
          },
          "typeName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PluginManagerResource": {
        "properties": {
          "state": {
            "$ref": "#/components/schemas/PluginManagerState",
            "default": "NotReady"
          }
        },
        "type": "object"
      },
      "PluginManagerState": {
        "enum": [
          "NotReady",
          "PluginsInitialized"
        ],
        "type": "string"
      },
      "PluginMetadataResource": {
        "properties": {
          "app": {
            "type": "string"
          },
          "feature": {
            "type": "string"
          },
          "globalAssetBundles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hasBundledAssets": {
            "type": "boolean"
          },
          "implements": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "perLocaleAssetBundles": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object"
          },
          "subtype": {
            "type": "string"
          },
          "threading": {
            "$ref": "#/components/schemas/PluginThreadingModel",
            "default": "sequential"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PluginRegionLocaleChangedEvent": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PluginResource": {
        "properties": {
          "app": {
            "type": "string"
          },
          "assetBundleNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dependencies": {
            "items": {
              "$ref": "#/components/schemas/PluginResourceContract"
            },
            "type": "array"
          },
          "dynLibFileName": {
            "type": "string"
          },
          "dynLibPath": {
            "type": "string"
          },
          "externalUri": {
            "type": "string"
          },
          "feature": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "implementedContracts": {
            "items": {
              "$ref": "#/components/schemas/PluginResourceContract"
            },
            "type": "array"
          },
          "isDynamicLibraryInited": {
            "type": "boolean"
          },
          "isDynamicLibraryLoaded": {
            "type": "boolean"
          },
          "mountedAssetBundles": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "orderDynamicLibraryLoaded": {
            "default": -1,
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "shortName": {
            "type": "string"
          },
          "subtype": {
            "type": "string"
          },
          "supertype": {
            "type": "string"
          },
          "threadingModel": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PluginResourceContract": {
        "properties": {
          "fullName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PluginResourceEvent": {
        "properties": {
          "data": {
            "additionalProperties": true,
            "type": "object"
          },
          "eventType": {
            "$ref": "#/components/schemas/PluginResourceEventType",
            "default": "Create"
          },
          "uri": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PluginResourceEventType": {
        "enum": [
          "Create",
          "Update",
          "Delete"
        ],
        "type": "string"
      },
      "PluginServiceProxyResponse": {
        "properties": {
          "error": {
            "type": "string"
          },
          "methodName": {
            "type": "string"
          },
          "payload": {
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PluginThreadingModel": {
        "enum": [
          "dedicated",
          "sequential",
          "concurrent",
          "parallel"
        ],
        "type": "string"
      },
      "PrimeGamingPrimeGamingLoginResponse": {
        "properties": {
          "amazonAccessToken": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PrimeGamingPrimeGamingLoginStatus",
            "default": "logged_out"
          }
        },
        "type": "object"
      },
      "PrimeGamingPrimeGamingLoginStatus": {
        "enum": [
          "logged_out",
          "logging_in",
          "logged_in",
          "logging_out",
          "error"
        ],
        "type": "string"
      },
      "PrimeGamingPrimeGamingSupportStatus": {
        "properties": {
          "details": {
            "type": "string"
          },
          "supported": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PrivacyPrivacySettings": {
        "properties": {
          "canRequestTrackingPermission": {
            "type": "boolean"
          },
          "canUseTracking": {
            "type": "boolean"
          },
          "state": {
            "$ref": "#/components/schemas/PrivacyTrackingPermissionRequestState",
            "default": "Unrequested"
          }
        },
        "type": "object"
      },
      "PrivacyTrackingPermissionRequestState": {
        "enum": [
          "Unrequested",
          "Requesting",
          "Completed"
        ],
        "type": "string"
      },
      "ProductIntegrationAppImmediateRepairRequest": {
        "properties": {
          "files": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sessionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductIntegrationAppRepairApplyRequest": {
        "properties": {
          "repairCode": {
            "$ref": "#/components/schemas/ProductIntegrationRepairCode",
            "default": "default"
          },
          "sessionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductIntegrationAppUpdateApplyRequest": {
        "properties": {
          "sessionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductIntegrationAppUpdateStatus": {
        "properties": {
          "updateAvailable": {
            "type": "boolean"
          },
          "updateRequired": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ProductIntegrationAppUpdateStatusFile": {
        "properties": {
          "productSessionId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ProductIntegrationProductIntegrationAppUpdateStatus"
          }
        },
        "type": "object"
      },
      "ProductIntegrationDebugAppUpdateStatus": {
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "updateAvailable": {
            "type": "boolean"
          },
          "updateRequired": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ProductIntegrationDepsAppImmediateRepairRequest": {
        "properties": {
          "files": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sessionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductIntegrationDepsAppRepairApplyRequest": {
        "properties": {
          "repairCode": {
            "$ref": "#/components/schemas/ProductIntegrationDepsRepairCode",
            "default": "default"
          },
          "sessionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductIntegrationDepsAppUpdateApplyRequest": {
        "properties": {
          "sessionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductIntegrationDepsAppUpdateStatus": {
        "properties": {
          "updateAvailable": {
            "type": "boolean"
          },
          "updateRequired": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ProductIntegrationDepsRepairCode": {
        "enum": [
          "default",
          "integrity_check_failed",
          "immediate_repair"
        ],
        "type": "string"
      },
      "ProductIntegrationDetachedSession": {
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "pid": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "productId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductIntegrationHeartbeatFile": {
        "properties": {
          "data": {
            "additionalProperties": true,
            "type": "object"
          },
          "source": {
            "$ref": "#/components/schemas/ProductIntegrationDetachedSession"
          }
        },
        "type": "object"
      },
      "ProductIntegrationLocaleDataResource": {
        "properties": {
          "available_locales": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "default_locale": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductIntegrationPatchlineMetadata": {
        "properties": {
          "full_name": {
            "type": "string"
          },
          "locale_data": {
            "$ref": "#/components/schemas/ProductIntegrationLocaleDataResource",
            "nullable": true
          },
          "rso_client_id": {
            "type": "string"
          },
          "rso_scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductIntegrationProductIntegrationAppImmediateRepairRequestBody": {
        "properties": {
          "files": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductIntegrationProductIntegrationAppImmediateRepairResponseBody": {
        "properties": {
          "path": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductIntegrationProductIntegrationAppRepairBody": {
        "properties": {
          "repairCode": {
            "$ref": "#/components/schemas/ProductIntegrationRepairCode",
            "default": "default"
          }
        },
        "type": "object"
      },
      "ProductIntegrationProductIntegrationAppUpdateStatus": {
        "properties": {
          "updateAvailable": {
            "type": "boolean"
          },
          "updateRequired": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ProductIntegrationProductSession": {
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductIntegrationRepairCode": {
        "enum": [
          "default",
          "integrity_check_failed",
          "immediate_repair"
        ],
        "type": "string"
      },
      "ProductIntegrationSettingsToken": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductIntegrationSettingsTokenRequest": {
        "properties": {
          "extraSettings": {
            "additionalProperties": true,
            "nullable": true,
            "type": "object"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "productSessionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductIntegrationSignoutPermission": {
        "enum": [
          "Allowed",
          "Disallowed",
          "DisallowedOtherProducts"
        ],
        "type": "string"
      },
      "ProductLocalizationConfigType": {
        "enum": [
          "public",
          "player"
        ],
        "type": "string"
      },
      "ProductLocalizationContentCookies": {
        "properties": {
          "content_id": {
            "type": "string"
          },
          "content_path": {
            "type": "string"
          },
          "cookies": {
            "items": {
              "$ref": "#/components/schemas/ProductLocalizationCookie"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductLocalizationCookie": {
        "properties": {
          "domain": {
            "type": "string"
          },
          "expires": {
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "httponly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductLocalizationPatchlineMetadata": {
        "properties": {
          "config_type": {
            "$ref": "#/components/schemas/ProductLocalizationConfigType",
            "default": "public"
          },
          "content_cookies": {
            "items": {
              "$ref": "#/components/schemas/ProductLocalizationContentCookies"
            },
            "type": "array"
          },
          "content_paths": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "full_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductLocalizationProductLocalizationData": {
        "properties": {
          "cookies": {
            "items": {
              "$ref": "#/components/schemas/ProductLocalizationCookie"
            },
            "type": "array"
          },
          "translations_data": {
            "items": {
              "$ref": "#/components/schemas/ProductLocalizationTranslationsData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductLocalizationProductMetadata": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductLocalizationPatchlineMetadata"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ProductLocalizationProductMetadataMap": {
        "properties": {
          "products": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductLocalizationProductMetadata"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ProductLocalizationTranslateRequest": {
        "properties": {
          "blocking": {
            "type": "boolean"
          },
          "keys": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "locale": {
            "type": "string"
          },
          "patchline": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductLocalizationTranslateResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/ProductLocalizationTranslateResult"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductLocalizationTranslateResult": {
        "properties": {
          "found": {
            "default": true,
            "type": "boolean"
          },
          "key": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductLocalizationTranslationsData": {
        "properties": {
          "etag": {
            "type": "string"
          },
          "last_query_id": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "latest_response_id": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "locale": {
            "type": "string"
          },
          "response_code": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "translations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ProductMetadataAppStoreUpdateInfo": {
        "properties": {
          "appId": {
            "type": "string"
          },
          "appUrl": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductMetadataClientProductType": {
        "enum": [
          "riot_game",
          "thunderdome",
          "forge",
          "third_party",
          "special_event",
          "hidden"
        ],
        "type": "string"
      },
      "ProductMetadataConfigType": {
        "enum": [
          "public",
          "player"
        ],
        "type": "string"
      },
      "ProductMetadataConfigurationStatus": {
        "enum": [
          "unknown",
          "has_configuration",
          "unsupported_region",
          "unsupported_shard",
          "unsupported_os",
          "unsupported_32_bit_os"
        ],
        "type": "string"
      },
      "ProductMetadataContentCookies": {
        "properties": {
          "content_id": {
            "type": "string"
          },
          "content_path": {
            "type": "string"
          },
          "cookies": {
            "items": {
              "$ref": "#/components/schemas/ProductMetadataCookie"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductMetadataCookie": {
        "properties": {
          "domain": {
            "type": "string"
          },
          "expires": {
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "httponly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductMetadataCookieVector": {
        "properties": {
          "cookies": {
            "items": {
              "$ref": "#/components/schemas/ProductMetadataCookie"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductMetadataDebugClientConfigSource": {
        "properties": {
          "parseRequired": {
            "type": "boolean"
          },
          "patchlines": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataPatchlineMetadata"
            },
            "type": "object"
          },
          "products": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataProductDefinition"
            },
            "type": "object"
          },
          "rawConfig": {
            "additionalProperties": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "ProductMetadataDependency": {
        "properties": {
          "args": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "elevate": {
            "type": "boolean"
          },
          "hash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "min_version": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "valid_exit_codes": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductMetadataDynamicTagHeuristics": {
        "properties": {
          "countries": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductMetadataDynamicTags": {
        "properties": {
          "heuristics": {
            "$ref": "#/components/schemas/ProductMetadataDynamicTagHeuristics"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductMetadataInstallId": {
        "properties": {
          "installId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductMetadataLocaleDataResource": {
        "properties": {
          "available_locales": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "default_locale": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductMetadataLoginCountry": {
        "properties": {
          "login_country": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductMetadataPatchComponentMetadata": {
        "properties": {
          "excludedPaths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "sieveLabels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "sieveProductId": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductMetadataPatchSetMetadata": {
        "properties": {
          "components": {
            "items": {
              "$ref": "#/components/schemas/ProductMetadataPatchComponentMetadata"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductMetadataPatchlineConfigurationMetadata": {
        "properties": {
          "allowed_http_fallback_hostnames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "app_store_update_info": {
            "$ref": "#/components/schemas/ProductMetadataAppStoreUpdateInfo",
            "nullable": true
          },
          "arguments": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "bundles_url": {
            "type": "string"
          },
          "delete_foreign_paths": {
            "type": "boolean"
          },
          "dependencies": {
            "items": {
              "$ref": "#/components/schemas/ProductMetadataDependency"
            },
            "type": "array"
          },
          "disallow_32bit_windows": {
            "type": "boolean"
          },
          "dynamic_tags": {
            "items": {
              "$ref": "#/components/schemas/ProductMetadataDynamicTags"
            },
            "type": "array"
          },
          "excluded_compat_modes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "excluded_paths": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "launch_disabled": {
            "type": "boolean"
          },
          "launchable_on_update_fail": {
            "nullable": true,
            "type": "boolean"
          },
          "patch_notes_url": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "patching": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataPatchSetMetadata"
            },
            "type": "object"
          },
          "region_data": {
            "$ref": "#/components/schemas/ProductMetadataRegionDataResource",
            "nullable": true
          },
          "secondary_patchlines": {
            "items": {
              "$ref": "#/components/schemas/ProductMetadataSecondaryPatchlineMetadata"
            },
            "nullable": true,
            "type": "array"
          },
          "seed_url": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductMetadataPatchlineMetadata": {
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/ProductMetadataProductAlias"
          },
          "allowed_http_fallback_hostnames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "app_store_update_info": {
            "$ref": "#/components/schemas/ProductMetadataAppStoreUpdateInfo",
            "nullable": true
          },
          "available_platforms": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "bundles_url": {
            "type": "string"
          },
          "client_product_type": {
            "$ref": "#/components/schemas/ProductMetadataClientProductType",
            "default": "hidden"
          },
          "config_type": {
            "$ref": "#/components/schemas/ProductMetadataConfigType",
            "default": "public"
          },
          "configuration": {
            "type": "string"
          },
          "configuration_status": {
            "$ref": "#/components/schemas/ProductMetadataConfigurationStatus",
            "default": "unknown"
          },
          "content_cookies": {
            "items": {
              "$ref": "#/components/schemas/ProductMetadataContentCookies"
            },
            "type": "array"
          },
          "content_paths": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "default_theme_manifest": {
            "type": "string"
          },
          "delete_foreign_paths": {
            "type": "boolean"
          },
          "dependencies": {
            "items": {
              "$ref": "#/components/schemas/ProductMetadataDependency"
            },
            "type": "array"
          },
          "disallow_32bit_windows": {
            "type": "boolean"
          },
          "dynamic_tags": {
            "items": {
              "$ref": "#/components/schemas/ProductMetadataDynamicTags"
            },
            "type": "array"
          },
          "excluded_compat_modes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "excluded_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "full_name": {
            "type": "string"
          },
          "had_install_settings_on_init": {
            "type": "boolean"
          },
          "icon_path": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "install_dir": {
            "type": "string"
          },
          "install_id": {
            "type": "string"
          },
          "install_size_bytes": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "launch_disabled": {
            "type": "boolean"
          },
          "launchable_on_update_fail": {
            "type": "boolean"
          },
          "launcher_arguments": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "locale_data": {
            "$ref": "#/components/schemas/ProductMetadataLocaleDataResource",
            "nullable": true
          },
          "matching_shards_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "parent_patchline_id": {
            "type": "string"
          },
          "patch_notes": {
            "type": "string"
          },
          "patch_notes_url": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "patching_metadata": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataPatchSetMetadata"
            },
            "type": "object"
          },
          "path_name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "primary_executable": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "region_data": {
            "$ref": "#/components/schemas/ProductMetadataRegionDataResource",
            "nullable": true
          },
          "rogue_process_checklist": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rogue_process_whitelist": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rso_client_id": {
            "type": "string"
          },
          "rso_scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "secondary_patchlines": {
            "items": {
              "$ref": "#/components/schemas/ProductMetadataSecondaryPatchlineMetadata"
            },
            "type": "array"
          },
          "seed_url": {
            "type": "string"
          },
          "shards_data": {
            "items": {
              "$ref": "#/components/schemas/ProductMetadataShardsDataResource"
            },
            "type": "array"
          },
          "supported_versions": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "theme_manifest": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductMetadataPlayerAffinityDataSource": {
        "enum": [
          "localCache",
          "serverAuthoritative"
        ],
        "type": "string"
      },
      "ProductMetadataPlayerAffinityPluginStatus": {
        "properties": {
          "ready": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ProductMetadataPlayerAffinityProductToken": {
        "properties": {
          "affinities": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "product": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/ProductMetadataPlayerAffinityDataSource",
            "default": "localCache"
          }
        },
        "type": "object"
      },
      "ProductMetadataProductAlias": {
        "properties": {
          "platforms": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "product_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductMetadataProductDefinition": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductMetadataProductDefinitionMap": {
        "properties": {
          "productDefinitions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataProductDefinition"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ProductMetadataProductMetadata": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataPatchlineMetadata"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ProductMetadataProductMetadataMap": {
        "properties": {
          "products": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataProductMetadata"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ProductMetadataPublishState": {
        "enum": [
          "NotPublished",
          "Published"
        ],
        "type": "string"
      },
      "ProductMetadataRegionDataResource": {
        "properties": {
          "available_regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "default_region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductMetadataRegionLocale": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductMetadataScdCookie": {
        "properties": {
          "cookie": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductMetadataScdCookieVector": {
        "properties": {
          "cookies": {
            "items": {
              "$ref": "#/components/schemas/ProductMetadataScdCookie"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductMetadataScdEnabled": {
        "enum": [
          "Off",
          "On"
        ],
        "type": "string"
      },
      "ProductMetadataSecondaryPatchlineMap": {
        "properties": {
          "secondaryPatchlines": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataSecondaryPatchlineMetadata"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ProductMetadataSecondaryPatchlineMetadata": {
        "properties": {
          "allowed_http_fallback_hostnames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "bundles_url": {
            "type": "string"
          },
          "dynamic_tags": {
            "items": {
              "$ref": "#/components/schemas/ProductMetadataDynamicTags"
            },
            "type": "array"
          },
          "excluded_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductMetadataShardsDataResource": {
        "properties": {
          "game_shard_zone": {
            "type": "string"
          },
          "valid_shards": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductSessionHeartbeatInfo": {
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/ProductSessionProductPhase",
            "default": "None"
          },
          "sessionTTL": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ProductSessionLaunchConfiguration": {
        "properties": {
          "arguments": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "executable": {
            "type": "string"
          },
          "locale": {
            "nullable": true,
            "type": "string"
          },
          "voiceLocale": {
            "nullable": true,
            "type": "string"
          },
          "workingDirectory": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductSessionProductPhase": {
        "enum": [
          "None",
          "Pending",
          "Idle",
          "Gameplay"
        ],
        "type": "string"
      },
      "ProductSessionSession": {
        "properties": {
          "exitCode": {
            "format": "int64",
            "type": "integer"
          },
          "exitReason": {
            "$ref": "#/components/schemas/ProductSessionTerminationReason",
            "nullable": true
          },
          "isInternal": {
            "type": "boolean"
          },
          "launchConfiguration": {
            "$ref": "#/components/schemas/ProductSessionLaunchConfiguration"
          },
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "phase": {
            "$ref": "#/components/schemas/ProductSessionProductPhase",
            "default": "None"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductSessionSessionHeartbeat": {
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/ProductSessionProductPhase",
            "default": "None"
          },
          "sessionTTL": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ProductSessionTerminationReason": {
        "enum": [
          "StillRunning",
          "Interrupt",
          "Exit",
          "Timeout",
          "Unknown"
        ],
        "type": "string"
      },
      "RegionLocale": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "webLanguage": {
            "type": "string"
          },
          "webRegion": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RemotingHelpFormat": {
        "description": "Help format for remoting functions and types.",
        "enum": [
          "Full",
          "Epytext",
          "Brief",
          "Console"
        ],
        "type": "string"
      },
      "RemotingPrivilege": {
        "description": "Well-known privilege levels for bindable functions.",
        "enum": [
          "None",
          "User",
          "Admin",
          "Local"
        ],
        "type": "string"
      },
      "RemotingSerializedFormat": {
        "description": "Serialization format for remoting requests and results.",
        "enum": [
          "JSON",
          "YAML",
          "MsgPack"
        ],
        "type": "string"
      },
      "RiotClientAuthApiAlias": {
        "properties": {
          "game_name": {
            "nullable": true,
            "type": "string"
          },
          "tag_line": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotClientAuthApiAuthorization": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/RiotClientAuthRsoAuthAccessToken"
          },
          "authenticationType": {
            "type": "string"
          },
          "claims": {
            "$ref": "#/components/schemas/RiotClientAuthApiIdClaims"
          },
          "idToken": {
            "$ref": "#/components/schemas/RiotClientAuthRsoAuthIdToken"
          },
          "puuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotClientAuthApiClientDetails": {
        "properties": {
          "clientId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotClientAuthApiHomeBaseCountry": {
        "properties": {
          "cached_home_base_country": {
            "type": "string"
          },
          "home_base_country": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotClientAuthApiIdClaims": {
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/RiotClientAuthApiAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotClientAuthApiLoginCountry": {
        "properties": {
          "login_country": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotClientAuthApiUserInfo": {
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/RiotClientAuthApiAlias"
          },
          "country": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "lol": {
            "$ref": "#/components/schemas/RiotClientAuthApiUserInfoLol",
            "nullable": true
          },
          "lol_account": {
            "$ref": "#/components/schemas/RiotClientAuthApiUserInfoSummoner",
            "nullable": true
          },
          "phone_number_verified": {
            "type": "boolean"
          },
          "player_plocale": {
            "nullable": true,
            "type": "string"
          },
          "preferred_username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotClientAuthApiUserInfoLol": {
        "properties": {
          "cpid": {
            "type": "string"
          },
          "ploc": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotClientAuthApiUserInfoSummoner": {
        "properties": {
          "summoner_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotClientAuthRsoAuthAccessToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotClientAuthRsoAuthAuthorizationRequest": {
        "properties": {
          "claims": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "clientId": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trustLevels": {
            "items": {
              "$ref": "#/components/schemas/RiotClientAuthRsoAuthAuthorizationTrustLevel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RiotClientAuthRsoAuthAuthorizationResponse": {
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/RiotClientAuthRsoAuthImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RiotClientAuthRsoAuthAuthorizationResponseType",
            "default": "unknown_authorization_response"
          }
        },
        "type": "object"
      },
      "RiotClientAuthRsoAuthAuthorizationResponseType": {
        "enum": [
          "unknown_authorization_response",
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ],
        "type": "string"
      },
      "RiotClientAuthRsoAuthAuthorizationTrustLevel": {
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ],
        "type": "string"
      },
      "RiotClientAuthRsoAuthIdToken": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotClientAuthRsoAuthImplicitAuthorization": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/RiotClientAuthRsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/RiotClientAuthRsoAuthIdToken"
          }
        },
        "type": "object"
      },
      "RiotClientAuthRsoAuthReadyState": {
        "properties": {
          "ready": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RiotClientAuthRsoAuthUserInfo": {
        "properties": {
          "userInfo": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotLoginAuthenticationMethod": {
        "enum": [
          "Riot",
          "Google",
          "GameCenter",
          "Facebook",
          "Apple",
          "QQ",
          "Wechat",
          "Wegame"
        ],
        "type": "string"
      },
      "RiotLoginAuthorizationRequest": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trustLevels": {
            "items": {
              "$ref": "#/components/schemas/RiotLoginRSOAuthorizationTrustLevel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RiotLoginAuthorizationResponse": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/RiotLoginAuthorizationResponseType"
          }
        },
        "type": "object"
      },
      "RiotLoginAuthorizationResponseType": {
        "enum": [
          "needs_authentication",
          "authorized"
        ],
        "type": "string"
      },
      "RiotLoginLoginPhase": {
        "enum": [
          "unknown",
          "pending",
          "not_logged_in",
          "logged_in"
        ],
        "type": "string"
      },
      "RiotLoginLoginResult": {
        "properties": {
          "additionalFields": {
            "additionalProperties": true,
            "nullable": true,
            "type": "object"
          },
          "error": {
            "type": "string"
          },
          "isLoginSuccessful": {
            "type": "boolean"
          },
          "loginType": {
            "$ref": "#/components/schemas/RiotLoginLoginTypeEnum",
            "default": "Invalid"
          },
          "rsoSignOnAttemptEvent": {
            "$ref": "#/components/schemas/RiotLoginRSOSignOnAttemptEvent",
            "default": {
              "outcome": "Success",
              "storedSessionState": "Accepted"
            }
          }
        },
        "type": "object"
      },
      "RiotLoginLoginStatus": {
        "properties": {
          "persist": {
            "type": "boolean"
          },
          "phase": {
            "$ref": "#/components/schemas/RiotLoginLoginPhase",
            "default": "unknown"
          }
        },
        "type": "object"
      },
      "RiotLoginLoginTypeEnum": {
        "enum": [
          "Invalid",
          "NoLongLivedSession",
          "LongLivedSessionRejected",
          "LongLivedSessionAccepted"
        ],
        "type": "string"
      },
      "RiotLoginOutcome": {
        "enum": [
          "Success",
          "PrivateSettingsMissing",
          "PrivateSettingsEmpty",
          "RegionLocaleMissing",
          "RegionMismatch",
          "RegionDataMissing",
          "NoLoginSessionCookies",
          "SetPersistedLoginFailed",
          "AuthRequestFailed",
          "AuthResultNotAuthorized"
        ],
        "type": "string"
      },
      "RiotLoginPlatformUser": {
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotLoginProduct": {
        "properties": {
          "patchline": {
            "nullable": true,
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotLoginRSOAuthorizationTrustLevel": {
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ],
        "type": "string"
      },
      "RiotLoginRSOSignOnAttemptEvent": {
        "properties": {
          "authenticationMethod": {
            "$ref": "#/components/schemas/RiotLoginAuthenticationMethod",
            "nullable": true
          },
          "errorCode": {
            "nullable": true,
            "type": "string"
          },
          "errorDescription": {
            "nullable": true,
            "type": "string"
          },
          "errorName": {
            "nullable": true,
            "type": "string"
          },
          "outcome": {
            "$ref": "#/components/schemas/RiotLoginOutcome",
            "default": "Success"
          },
          "product": {
            "$ref": "#/components/schemas/RiotLoginProduct",
            "nullable": true
          },
          "signOnAttemptNumber": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "storedSessionState": {
            "$ref": "#/components/schemas/RiotLoginStoredSessionState",
            "default": "Accepted"
          }
        },
        "type": "object"
      },
      "RiotLoginReadyState": {
        "properties": {
          "ready": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RiotLoginSessionResponse": {
        "properties": {
          "error": {
            "type": "string"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/RiotLoginSessionResponseType",
            "default": "unknown_authentication_response"
          }
        },
        "type": "object"
      },
      "RiotLoginSessionResponseType": {
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ],
        "type": "string"
      },
      "RiotLoginStoredSessionState": {
        "enum": [
          "Accepted",
          "Rejected",
          "Absent"
        ],
        "type": "string"
      },
      "RiotMessagingServiceAccessToken": {
        "properties": {
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotMessagingServiceAcknowledgeBody": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotMessagingServiceEntitlementsToken": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "entitlements": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuer": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotMessagingServiceMessage": {
        "properties": {
          "ackRequired": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "payload": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "timestamp": {
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotMessagingServicePlayerServiceAffinityInput": {
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotMessagingServicePlayerServiceAffinityToken": {
        "properties": {
          "affinity": {
            "type": "string"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "issuedAt": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "puuid": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotMessagingServiceSession": {
        "properties": {
          "state": {
            "$ref": "#/components/schemas/RiotMessagingServiceState",
            "default": "Disconnected"
          },
          "token": {
            "type": "string"
          },
          "tokenType": {
            "$ref": "#/components/schemas/RiotMessagingServiceTokenType",
            "default": "Unavailable"
          }
        },
        "type": "object"
      },
      "RiotMessagingServiceState": {
        "enum": [
          "Disconnecting",
          "Disconnected",
          "Connecting",
          "SwitchingServers",
          "Connected"
        ],
        "type": "string"
      },
      "RiotMessagingServiceTokenType": {
        "enum": [
          "Unavailable",
          "Access",
          "Identity"
        ],
        "type": "string"
      },
      "RiotStatusBuildInfo": {
        "properties": {
          "patchline": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotStatusConfigType": {
        "enum": [
          "public",
          "player"
        ],
        "type": "string"
      },
      "RiotStatusCookie": {
        "properties": {
          "domain": {
            "type": "string"
          },
          "expires": {
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "httponly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotStatusPatchlineMetadata": {
        "properties": {
          "config_type": {
            "$ref": "#/components/schemas/RiotStatusConfigType",
            "default": "public"
          },
          "content_paths": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "full_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiotStatusProductMetadata": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "additionalProperties": {
              "$ref": "#/components/schemas/RiotStatusPatchlineMetadata"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RiotStatusProductMetadataMap": {
        "properties": {
          "products": {
            "additionalProperties": {
              "$ref": "#/components/schemas/RiotStatusProductMetadata"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RmsMessage": {
        "properties": {
          "ackRequired": {
            "default": true,
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "payload": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "timestamp": {
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RnetSanitizerContainsSanitizedRequest": {
        "properties": {
          "aggressiveScan": {
            "nullable": true,
            "type": "boolean"
          },
          "level": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "text": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RnetSanitizerContainsSanitizedResponse": {
        "properties": {
          "contains": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RnetSanitizerSanitizeRequest": {
        "properties": {
          "aggressiveScan": {
            "nullable": true,
            "type": "boolean"
          },
          "level": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "text": {
            "nullable": true,
            "type": "string"
          },
          "texts": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "RnetSanitizerSanitizeResponse": {
        "properties": {
          "modified": {
            "type": "boolean"
          },
          "text": {
            "nullable": true,
            "type": "string"
          },
          "texts": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "RnetSanitizerSanitizerStatus": {
        "properties": {
          "allowlistedWordCountsByLevel": {
            "additionalProperties": {
              "format": "int32",
              "maximum": 4294967295,
              "minimum": 0,
              "type": "integer"
            },
            "type": "object"
          },
          "breakingCharsCount": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "filteredWordCountsByLevel": {
            "additionalProperties": {
              "format": "int32",
              "maximum": 4294967295,
              "minimum": 0,
              "type": "integer"
            },
            "type": "object"
          },
          "locale": {
            "type": "string"
          },
          "projectedCharsCount": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "ready": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "whitelistedWordCountsByLevel": {
            "additionalProperties": {
              "format": "int32",
              "maximum": 4294967295,
              "minimum": 0,
              "type": "integer"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RsoAuthAccessToken": {
        "properties": {
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthAuthError": {
        "properties": {
          "error": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthAuthHint": {
        "properties": {
          "context": {
            "additionalProperties": true,
            "type": "object"
          },
          "required": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthAuthHintType",
            "default": "email_verification"
          }
        },
        "type": "object"
      },
      "RsoAuthAuthHintType": {
        "enum": [
          "email_verification",
          "password_reset",
          "parental_consent",
          "ambiguous_username",
          "alias_change_required"
        ],
        "type": "string"
      },
      "RsoAuthAuthenticationTypeEnum": {
        "enum": [
          "SSOAuth",
          "RiotAuth",
          "None"
        ],
        "type": "string"
      },
      "RsoAuthAuthorization": {
        "properties": {
          "currentAccountId": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthAuthorizationCode": {
        "properties": {
          "code": {
            "type": "string"
          },
          "code_verifier": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthAuthorizationKey": {
        "properties": {
          "key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthAuthorizationKeyRequest": {
        "properties": {
          "client_id": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RsoAuthAuthorizationRequest": {
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/RsoAuthAuthenticationTypeEnum",
            "nullable": true
          },
          "claims": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "default": true,
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trustLevels": {
            "items": {
              "$ref": "#/components/schemas/RsoAuthRSOAuthorizationTrustLevel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RsoAuthAuthorizationResponse": {
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/RsoAuthImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthAuthorizationResponseType"
          }
        },
        "type": "object"
      },
      "RsoAuthAuthorizationResponseType": {
        "enum": [
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ],
        "type": "string"
      },
      "RsoAuthAuthorizationUpdateRequest": {
        "properties": {
          "claims": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trustLevels": {
            "items": {
              "$ref": "#/components/schemas/RsoAuthRSOAuthorizationTrustLevel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RsoAuthConfigV3AMRValuesSupported": {
        "properties": {
          "values": {
            "items": {
              "$ref": "#/components/schemas/RsoAuthLoginAMR"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RsoAuthConfigV3AuthProgress": {
        "enum": [
          "None",
          "Ready",
          "Pending",
          "Complete",
          "Skipped",
          "Error"
        ],
        "type": "string"
      },
      "RsoAuthConfigV3OpenIdConfiguration": {
        "properties": {
          "config": {
            "additionalProperties": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "RsoAuthConfigV3PartnerAuthConfig": {
        "properties": {
          "config": {
            "additionalProperties": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "RsoAuthConfigV3ReadyState": {
        "properties": {
          "configAuthProgress": {
            "$ref": "#/components/schemas/RsoAuthConfigV3AuthProgress",
            "default": "None"
          },
          "ready": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RsoAuthDeviceId": {
        "properties": {
          "collectorServerName": {
            "type": "string"
          },
          "frameUrl": {
            "type": "string"
          },
          "installId": {
            "type": "string"
          },
          "merchantId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthEntitlementsToken": {
        "properties": {
          "entitlements": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthGameCenterAuthCredentials": {
        "properties": {
          "bundleId": {
            "type": "string"
          },
          "playerId": {
            "type": "string"
          },
          "publicKeyUrl": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthGarenaPartnerCredentials": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthGoogleAuthCredentials": {
        "properties": {
          "idToken": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthHttpCookie": {
        "properties": {
          "domain": {
            "type": "string"
          },
          "hostOnly": {
            "default": true,
            "type": "boolean"
          },
          "httpOnly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "persistent": {
            "type": "boolean"
          },
          "secureOnly": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthHttpCookieJar": {
        "properties": {
          "cookies": {
            "items": {
              "$ref": "#/components/schemas/RsoAuthHttpCookie"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RsoAuthIdToken": {
        "properties": {
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthImplicitAuthorization": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/RsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/RsoAuthIdToken"
          }
        },
        "type": "object"
      },
      "RsoAuthLoginAMR": {
        "enum": [
          "cookie",
          "password",
          "captcha",
          "mfa",
          "signup",
          "google_auth",
          "game_center",
          "facebook",
          "apple",
          "msdk_qq",
          "msdk_wechat",
          "wegame",
          "tencent",
          "garena"
        ],
        "type": "string"
      },
      "RsoAuthLogoutReason": {
        "enum": [
          "generic",
          "tokens_expired"
        ],
        "type": "string"
      },
      "RsoAuthMSDKQQPartnerCredentials": {
        "properties": {
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          },
          "openKey": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthMSDKV5PartnerCredentials": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "channel": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "ext": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthMSDKWeChatPartnerCredentials": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthMultifactorDetails": {
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/RsoAuthMultifactorMethod",
            "default": "method_not_set"
          },
          "methods": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "mfaVersion": {
            "nullable": true,
            "type": "string"
          },
          "multiFactorCodeLength": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RsoAuthMultifactorMethod": {
        "enum": [
          "method_not_set",
          "email",
          "authenticator",
          "sms",
          "push"
        ],
        "type": "string"
      },
      "RsoAuthPartnerCredentials": {
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/RsoAuthGameCenterAuthCredentials",
            "nullable": true
          },
          "garena": {
            "$ref": "#/components/schemas/RsoAuthGarenaPartnerCredentials",
            "nullable": true
          },
          "google_auth": {
            "$ref": "#/components/schemas/RsoAuthGoogleAuthCredentials",
            "nullable": true
          },
          "msdk_qq": {
            "$ref": "#/components/schemas/RsoAuthMSDKQQPartnerCredentials",
            "nullable": true
          },
          "msdk_wechat": {
            "$ref": "#/components/schemas/RsoAuthMSDKWeChatPartnerCredentials",
            "nullable": true
          },
          "tencent": {
            "$ref": "#/components/schemas/RsoAuthTencentPartnerCredentials",
            "nullable": true
          },
          "wegame": {
            "$ref": "#/components/schemas/RsoAuthWeGamePartnerCredentials",
            "nullable": true
          }
        },
        "type": "object"
      },
      "RsoAuthPartnerCredentialsV3": {
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/RsoAuthGameCenterAuthCredentials",
            "nullable": true
          },
          "garena": {
            "$ref": "#/components/schemas/RsoAuthGarenaPartnerCredentials",
            "nullable": true
          },
          "google_auth": {
            "$ref": "#/components/schemas/RsoAuthGoogleAuthCredentials",
            "nullable": true
          },
          "msdk_v5": {
            "$ref": "#/components/schemas/RsoAuthMSDKV5PartnerCredentials",
            "nullable": true
          },
          "tencent": {
            "$ref": "#/components/schemas/RsoAuthTencentPartnerCredentials",
            "nullable": true
          },
          "wegame": {
            "$ref": "#/components/schemas/RsoAuthWeGamePartnerCredentials",
            "nullable": true
          }
        },
        "type": "object"
      },
      "RsoAuthPublicClientConfig": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthRSOAuthorizationSubmission": {
        "properties": {
          "acr_values": {
            "type": "string"
          },
          "claims": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "response_type": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthRSOAuthorizationTrustLevel": {
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ],
        "type": "string"
      },
      "RsoAuthRSOCredentialSubmission": {
        "properties": {
          "language": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "region": {
            "nullable": true,
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthRSOJWTConfig": {
        "properties": {
          "token": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthRSOOTPSubmission": {
        "properties": {
          "code": {
            "type": "string"
          },
          "rememberDevice": {
            "type": "boolean"
          },
          "retry": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthRSOPlayerCredentials": {
        "properties": {
          "password": {
            "type": "string"
          },
          "platformId": {
            "nullable": true,
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthRSOReauthenticationSubmission": {
        "properties": {
          "password": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthSessionCredentials": {
        "properties": {
          "password": {
            "type": "string"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "region": {
            "nullable": true,
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthSessionLoginToken": {
        "properties": {
          "authentication_type": {
            "$ref": "#/components/schemas/RsoAuthAuthenticationTypeEnum",
            "nullable": true
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "persist_login": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RsoAuthSessionMultifactor": {
        "properties": {
          "code": {
            "type": "string"
          },
          "retry": {
            "type": "boolean"
          },
          "trustDevice": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RsoAuthSessionReauthentication": {
        "properties": {
          "password": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthSessionResponse": {
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/RsoAuthAuthenticationTypeEnum",
            "nullable": true
          },
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/RsoAuthMultifactorDetails",
            "default": {
              "method": "method_not_set"
            }
          },
          "persistLogin": {
            "type": "boolean"
          },
          "securityProfile": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthSessionResponseType",
            "default": "unknown_authentication_response"
          }
        },
        "type": "object"
      },
      "RsoAuthSessionResponseType": {
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_password",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ],
        "type": "string"
      },
      "RsoAuthSessionSignup": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthStatusMessage": {
        "properties": {
          "code": {
            "type": "string"
          },
          "isError": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthTencentPartnerCredentials": {
        "properties": {
          "accountType": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "cltkey": {
            "type": "string"
          },
          "cltkeyLength": {
            "type": "string"
          },
          "gameSignatureLength": {
            "type": "string"
          },
          "szGameSignature": {
            "type": "string"
          },
          "uId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthUserInfo": {
        "properties": {
          "userInfo": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthWeGamePartnerCredentials": {
        "properties": {
          "railGameId": {
            "type": "string"
          },
          "railId": {
            "type": "string"
          },
          "railSessionTicket": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorAuthConfigResponse": {
        "properties": {
          "methods": {
            "items": {
              "$ref": "#/components/schemas/RsoAuthenticatorV1AuthMethodConfig"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorAuthenticationTypeEnum": {
        "enum": [
          "SSOAuth"
        ],
        "type": "string"
      },
      "RsoAuthenticatorHttpCookie": {
        "properties": {
          "domain": {
            "type": "string"
          },
          "expiryTime": {
            "format": "int64",
            "type": "integer"
          },
          "hostOnly": {
            "default": true,
            "type": "boolean"
          },
          "httpOnly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "persistent": {
            "type": "boolean"
          },
          "secureOnly": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorPlatformUser": {
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorPluginConfigResponse": {
        "properties": {
          "methods": {
            "items": {
              "$ref": "#/components/schemas/RsoAuthenticatorV1AuthMethodConfig"
            },
            "type": "array"
          },
          "service_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorRSOAuthorizationTrustLevel": {
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ],
        "type": "string"
      },
      "RsoAuthenticatorReadyState": {
        "properties": {
          "ready": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorRegionLocale": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorRsoAuthAccessToken": {
        "properties": {
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorRsoAuthAuthorizationRequest": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "default": true,
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trustLevels": {
            "items": {
              "$ref": "#/components/schemas/RsoAuthenticatorRSOAuthorizationTrustLevel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorRsoAuthAuthorizationResponse": {
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/RsoAuthenticatorRsoAuthImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthenticatorRsoAuthAuthorizationResponseType"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorRsoAuthAuthorizationResponseType": {
        "enum": [
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ],
        "type": "string"
      },
      "RsoAuthenticatorRsoAuthIdToken": {
        "properties": {
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorRsoAuthImplicitAuthorization": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/RsoAuthenticatorRsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/RsoAuthenticatorRsoAuthIdToken"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorRsoAuthSessionLoginToken": {
        "properties": {
          "authentication_type": {
            "$ref": "#/components/schemas/RsoAuthenticatorAuthenticationTypeEnum",
            "nullable": true
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "persist_login": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1AuthMethodConfig": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1AuthenticateCodeInput": {
        "properties": {
          "code": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1AuthenticateFacebookInput": {
        "properties": {
          "facebook": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1FacebookInput"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1AuthenticateGameCenterInput": {
        "properties": {
          "gamecenter": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1GameCenterInput"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1AuthenticateMultifactorInput": {
        "properties": {
          "language": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1MultifactorInput"
          },
          "remember": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1AuthenticateNintendoInput": {
        "properties": {
          "language": {
            "type": "string"
          },
          "nintendo": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1NintendoInput"
          },
          "remember": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1AuthenticateOpenIdConnectInput": {
        "properties": {
          "language": {
            "type": "string"
          },
          "open_id": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1OpenIdConnectInput"
          },
          "remember": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1AuthenticatePlaystationInput": {
        "properties": {
          "language": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1PlaystationInput"
          },
          "remember": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1AuthenticateRiotIdentityInput": {
        "properties": {
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "riot_identity": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1RiotIdentityInput"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1AuthenticateXboxInput": {
        "properties": {
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "xbox": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1XboxInput"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1AuthenticationRedirectInput": {
        "properties": {
          "language": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1AuthenticationRequest": {
        "properties": {
          "apple": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1OpenIdConnectInput",
            "nullable": true
          },
          "clientId": {
            "nullable": true,
            "type": "string"
          },
          "code": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1CodeExchangeInput",
            "nullable": true
          },
          "facebook": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1FacebookInput",
            "nullable": true
          },
          "gamecenter": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1GameCenterInput",
            "nullable": true
          },
          "google": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1OpenIdConnectInput",
            "nullable": true
          },
          "language": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1MultifactorInput",
            "nullable": true
          },
          "nintendo": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1NintendoInput",
            "nullable": true
          },
          "platform": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1PlaystationInput",
            "nullable": true
          },
          "remember": {
            "type": "boolean"
          },
          "riot_identity": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1RiotIdentityInput",
            "nullable": true
          },
          "rso": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationRsoInput",
            "nullable": true
          },
          "sdkVersion": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1ResponseType",
            "default": "auth"
          },
          "xbox": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1XboxInput",
            "nullable": true
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1AuthenticationResponse": {
        "properties": {
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "healup": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1HealupResponseDetails"
          },
          "multifactor": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1MultifactorResponseDetails"
          },
          "signup": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1SignupResponseDetails"
          },
          "success": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1SuccessResponseDetails"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1ResponseType",
            "default": "auth"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1AuthenticationRsoInput": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "authentication_redirect_uri": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1CodeExchangeInput": {
        "properties": {
          "code": {
            "type": "string"
          },
          "code_verifier": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1DisplayMode": {
        "enum": [
          "page",
          "touch"
        ],
        "type": "string"
      },
      "RsoAuthenticatorV1FacebookInput": {
        "properties": {
          "access_token": {
            "nullable": true,
            "type": "string"
          },
          "app_id": {
            "nullable": true,
            "type": "string"
          },
          "id_token": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1GameCenterInput": {
        "properties": {
          "bundle_id": {
            "type": "string"
          },
          "player_id": {
            "type": "string"
          },
          "public_key_url": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1HealupResponseDetails": {
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "required_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "required_fields_hints": {
            "additionalProperties": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1LoginRequest": {
        "properties": {
          "authentication_type": {
            "$ref": "#/components/schemas/RsoAuthenticatorAuthenticationTypeEnum",
            "nullable": true
          },
          "login_token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1MultifactorInput": {
        "properties": {
          "action": {
            "nullable": true,
            "type": "string"
          },
          "otp": {
            "nullable": true,
            "type": "string"
          },
          "rememberDevice": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1MultifactorResponseDetails": {
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "methods": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "mode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1MultifactorResponseType": {
        "enum": [
          "method_not_set",
          "email",
          "authenticator",
          "sms",
          "push"
        ],
        "type": "string"
      },
      "RsoAuthenticatorV1NintendoInput": {
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          },
          "nsa_token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1OpenIdConnectInput": {
        "properties": {
          "id_token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1PlaystationInput": {
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1ResendLinkRequest": {
        "properties": {
          "multifactor": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1MultifactorInput"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1ResponseType",
            "default": "multifactor"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1ResponseType": {
        "enum": [
          "auth",
          "healup",
          "signup",
          "multifactor",
          "success",
          "error"
        ],
        "type": "string"
      },
      "RsoAuthenticatorV1RiotIdentityInput": {
        "properties": {
          "password": {
            "type": "string"
          },
          "region": {
            "nullable": true,
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1SignupCodeLinking": {
        "properties": {
          "direct_url": {
            "type": "string"
          },
          "manual_url": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          },
          "short_url": {
            "nullable": true,
            "type": "string"
          },
          "status_url": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1SignupLinkDetails": {
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "code_linking": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1SignupCodeLinking",
            "nullable": true
          },
          "options": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "suggested": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1SignupLinkRequest": {
        "properties": {
          "apple": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1OpenIdConnectInput",
            "nullable": true
          },
          "code": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1CodeExchangeInput",
            "nullable": true
          },
          "facebook": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1FacebookInput",
            "nullable": true
          },
          "gamecenter": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1GameCenterInput",
            "nullable": true
          },
          "google": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1OpenIdConnectInput",
            "nullable": true
          },
          "nintendo": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1NintendoInput",
            "nullable": true
          },
          "riot_identity": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1RiotIdentityInput",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1ResponseType",
            "default": "auth"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1SignupResponseDetails": {
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "link": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1SignupLinkDetails"
          },
          "required_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "required_fields_hints": {
            "additionalProperties": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1SuccessResponseDetails": {
        "properties": {
          "linked": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1WebAuthenticationMethod": {
        "enum": [
          "none",
          "apple",
          "google",
          "facebook"
        ],
        "type": "string"
      },
      "RsoAuthenticatorV1WebAuthenticationUrlRequest": {
        "properties": {
          "authentication_callback_uri": {
            "type": "string"
          },
          "display": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1DisplayMode",
            "default": "page"
          },
          "locale": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1WebAuthenticationMethod",
            "default": "none"
          },
          "product_id": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "riot_theme": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1WebLinkingStatus": {
        "enum": [
          "NEW",
          "PENDING",
          "EXPIRED",
          "COMPLETED"
        ],
        "type": "string"
      },
      "RsoAuthenticatorV1WebLinkingStatusResponse": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1WebLinkingStatus",
            "default": "NEW"
          },
          "ttl": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RsoAuthenticatorV1XboxInput": {
        "properties": {
          "user_hash": {
            "type": "string"
          },
          "xsts_token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ScdCookie": {
        "properties": {
          "cookie": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ScdCookies": {
        "properties": {
          "cookies": {
            "items": {
              "$ref": "#/components/schemas/ScdCookie"
            },
            "type": "array"
          },
          "expires_in": {
            "default": 1000,
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ScdEntitlementsToken": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "entitlements": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuer": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ScdProductSession": {
        "properties": {},
        "type": "object"
      },
      "ScdScdEnabled": {
        "enum": [
          "Off",
          "On"
        ],
        "type": "string"
      },
      "StructuredLogRequest": {
        "properties": {
          "fields": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object"
          },
          "message": {
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/LogSeverityLevels",
            "default": "Okay"
          }
        },
        "type": "object"
      },
      "TencentLauncherAccessToken": {
        "properties": {
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherAuthError": {
        "properties": {
          "error": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherAuthHint": {
        "properties": {
          "context": {
            "additionalProperties": true,
            "type": "object"
          },
          "required": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/TencentLauncherAuthHintType",
            "default": "email_verification"
          }
        },
        "type": "object"
      },
      "TencentLauncherAuthHintType": {
        "enum": [
          "email_verification",
          "password_reset",
          "parental_consent",
          "ambiguous_username",
          "alias_change_required"
        ],
        "type": "string"
      },
      "TencentLauncherAuthenticationTypeEnum": {
        "enum": [
          "SSOAuth",
          "RiotAuth",
          "None"
        ],
        "type": "string"
      },
      "TencentLauncherAuthorization": {
        "properties": {
          "currentAccountId": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherAuthorizationCode": {
        "properties": {
          "code": {
            "type": "string"
          },
          "code_verifier": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherAuthorizationKey": {
        "properties": {
          "key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherAuthorizationKeyRequest": {
        "properties": {
          "client_id": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TencentLauncherAuthorizationRequest": {
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/TencentLauncherAuthenticationTypeEnum",
            "nullable": true
          },
          "claims": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "default": true,
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trustLevels": {
            "items": {
              "$ref": "#/components/schemas/TencentLauncherRSOAuthorizationTrustLevel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TencentLauncherAuthorizationResponse": {
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/TencentLauncherImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TencentLauncherAuthorizationResponseType"
          }
        },
        "type": "object"
      },
      "TencentLauncherAuthorizationResponseType": {
        "enum": [
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ],
        "type": "string"
      },
      "TencentLauncherAuthorizationUpdateRequest": {
        "properties": {
          "claims": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trustLevels": {
            "items": {
              "$ref": "#/components/schemas/TencentLauncherRSOAuthorizationTrustLevel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TencentLauncherConfigV3AMRValuesSupported": {
        "properties": {
          "values": {
            "items": {
              "$ref": "#/components/schemas/TencentLauncherLoginAMR"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TencentLauncherConfigV3AuthProgress": {
        "enum": [
          "None",
          "Ready",
          "Pending",
          "Complete",
          "Skipped",
          "Error"
        ],
        "type": "string"
      },
      "TencentLauncherConfigV3OpenIdConfiguration": {
        "properties": {
          "config": {
            "additionalProperties": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "TencentLauncherConfigV3PartnerAuthConfig": {
        "properties": {
          "config": {
            "additionalProperties": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "TencentLauncherConfigV3ReadyState": {
        "properties": {
          "configAuthProgress": {
            "$ref": "#/components/schemas/TencentLauncherConfigV3AuthProgress",
            "default": "None"
          },
          "ready": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TencentLauncherDeviceId": {
        "properties": {
          "collectorServerName": {
            "type": "string"
          },
          "frameUrl": {
            "type": "string"
          },
          "installId": {
            "type": "string"
          },
          "merchantId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherEntitlementsToken": {
        "properties": {
          "entitlements": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherGameCenterAuthCredentials": {
        "properties": {
          "bundleId": {
            "type": "string"
          },
          "playerId": {
            "type": "string"
          },
          "publicKeyUrl": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherGarenaPartnerCredentials": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherGoogleAuthCredentials": {
        "properties": {
          "idToken": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherHttpCookie": {
        "properties": {
          "domain": {
            "type": "string"
          },
          "hostOnly": {
            "default": true,
            "type": "boolean"
          },
          "httpOnly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "persistent": {
            "type": "boolean"
          },
          "secureOnly": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherHttpCookieJar": {
        "properties": {
          "cookies": {
            "items": {
              "$ref": "#/components/schemas/TencentLauncherHttpCookie"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TencentLauncherIdToken": {
        "properties": {
          "expiry": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherImplicitAuthorization": {
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/TencentLauncherAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/TencentLauncherIdToken"
          }
        },
        "type": "object"
      },
      "TencentLauncherLoginAMR": {
        "enum": [
          "cookie",
          "password",
          "captcha",
          "mfa",
          "signup",
          "google_auth",
          "game_center",
          "facebook",
          "apple",
          "msdk_qq",
          "msdk_wechat",
          "wegame",
          "tencent",
          "garena"
        ],
        "type": "string"
      },
      "TencentLauncherLogoutReason": {
        "enum": [
          "generic",
          "tokens_expired"
        ],
        "type": "string"
      },
      "TencentLauncherMSDKQQPartnerCredentials": {
        "properties": {
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          },
          "openKey": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherMSDKV5PartnerCredentials": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "channel": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "ext": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherMSDKWeChatPartnerCredentials": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherMultifactorDetails": {
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/TencentLauncherMultifactorMethod",
            "default": "method_not_set"
          },
          "methods": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "mfaVersion": {
            "nullable": true,
            "type": "string"
          },
          "multiFactorCodeLength": {
            "format": "int64",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TencentLauncherMultifactorMethod": {
        "enum": [
          "method_not_set",
          "email",
          "authenticator",
          "sms",
          "push"
        ],
        "type": "string"
      },
      "TencentLauncherPartnerCredentials": {
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/TencentLauncherGameCenterAuthCredentials",
            "nullable": true
          },
          "garena": {
            "$ref": "#/components/schemas/TencentLauncherGarenaPartnerCredentials",
            "nullable": true
          },
          "google_auth": {
            "$ref": "#/components/schemas/TencentLauncherGoogleAuthCredentials",
            "nullable": true
          },
          "msdk_qq": {
            "$ref": "#/components/schemas/TencentLauncherMSDKQQPartnerCredentials",
            "nullable": true
          },
          "msdk_wechat": {
            "$ref": "#/components/schemas/TencentLauncherMSDKWeChatPartnerCredentials",
            "nullable": true
          },
          "tencent": {
            "$ref": "#/components/schemas/TencentLauncherTencentPartnerCredentials",
            "nullable": true
          },
          "wegame": {
            "$ref": "#/components/schemas/TencentLauncherWeGamePartnerCredentials",
            "nullable": true
          }
        },
        "type": "object"
      },
      "TencentLauncherPartnerCredentialsV3": {
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/TencentLauncherGameCenterAuthCredentials",
            "nullable": true
          },
          "garena": {
            "$ref": "#/components/schemas/TencentLauncherGarenaPartnerCredentials",
            "nullable": true
          },
          "google_auth": {
            "$ref": "#/components/schemas/TencentLauncherGoogleAuthCredentials",
            "nullable": true
          },
          "msdk_v5": {
            "$ref": "#/components/schemas/TencentLauncherMSDKV5PartnerCredentials",
            "nullable": true
          },
          "tencent": {
            "$ref": "#/components/schemas/TencentLauncherTencentPartnerCredentials",
            "nullable": true
          },
          "wegame": {
            "$ref": "#/components/schemas/TencentLauncherWeGamePartnerCredentials",
            "nullable": true
          }
        },
        "type": "object"
      },
      "TencentLauncherPublicClientConfig": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherRSOAuthorizationSubmission": {
        "properties": {
          "acr_values": {
            "type": "string"
          },
          "claims": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "response_type": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherRSOAuthorizationTrustLevel": {
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ],
        "type": "string"
      },
      "TencentLauncherRSOCredentialSubmission": {
        "properties": {
          "language": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "region": {
            "nullable": true,
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherRSOJWTConfig": {
        "properties": {
          "token": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherRSOOTPSubmission": {
        "properties": {
          "code": {
            "type": "string"
          },
          "rememberDevice": {
            "type": "boolean"
          },
          "retry": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherRSOPlayerCredentials": {
        "properties": {
          "password": {
            "type": "string"
          },
          "platformId": {
            "nullable": true,
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherRSOReauthenticationSubmission": {
        "properties": {
          "password": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherSessionCredentials": {
        "properties": {
          "password": {
            "type": "string"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "region": {
            "nullable": true,
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherSessionLoginToken": {
        "properties": {
          "authentication_type": {
            "$ref": "#/components/schemas/TencentLauncherAuthenticationTypeEnum",
            "nullable": true
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "persist_login": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TencentLauncherSessionMultifactor": {
        "properties": {
          "code": {
            "type": "string"
          },
          "retry": {
            "type": "boolean"
          },
          "trustDevice": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TencentLauncherSessionReauthentication": {
        "properties": {
          "password": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherSessionResponse": {
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/TencentLauncherAuthenticationTypeEnum",
            "nullable": true
          },
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/TencentLauncherMultifactorDetails",
            "default": {
              "method": "method_not_set"
            }
          },
          "persistLogin": {
            "type": "boolean"
          },
          "securityProfile": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TencentLauncherSessionResponseType",
            "default": "unknown_authentication_response"
          }
        },
        "type": "object"
      },
      "TencentLauncherSessionResponseType": {
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_password",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ],
        "type": "string"
      },
      "TencentLauncherSessionSignup": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherStatusMessage": {
        "properties": {
          "code": {
            "type": "string"
          },
          "isError": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherTencentLauncherLoginArguments": {
        "properties": {
          "tencentGameId": {
            "type": "string"
          },
          "tencentGameKey": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherTencentLauncherLoginInfo": {
        "properties": {
          "channel": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "ext": {
            "type": "string"
          },
          "openid": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherTencentPartnerCredentials": {
        "properties": {
          "accountType": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "cltkey": {
            "type": "string"
          },
          "cltkeyLength": {
            "type": "string"
          },
          "gameSignatureLength": {
            "type": "string"
          },
          "szGameSignature": {
            "type": "string"
          },
          "uId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherUserInfo": {
        "properties": {
          "userInfo": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TencentLauncherWeGamePartnerCredentials": {
        "properties": {
          "railGameId": {
            "type": "string"
          },
          "railId": {
            "type": "string"
          },
          "railSessionTicket": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "VoiceChatAccessToken": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "VoiceChatAudioPropertiesResource": {
        "properties": {
          "fastEnergyMeter": {
            "format": "double",
            "type": "number"
          },
          "isLoopbackEnabled": {
            "type": "boolean"
          },
          "isMicActive": {
            "type": "boolean"
          },
          "isSpeakerActive": {
            "type": "boolean"
          },
          "micEnergy": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "micVolume": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "noiseFloorMeter": {
            "format": "double",
            "type": "number"
          },
          "speakerEnergy": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "speakerVolume": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "speechThresholdMeter": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "VoiceChatAuthorization": {
        "properties": {
          "subject": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "VoiceChatCaptureDevicePermissionStatus": {
        "enum": [
          "promptForPermission",
          "permissionDenied",
          "permissionGranted"
        ],
        "type": "string"
      },
      "VoiceChatDeviceResource": {
        "properties": {
          "handle": {
            "type": "string"
          },
          "is_current_device": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean"
          },
          "is_effective_device": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "VoiceChatIdToken": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "VoiceChatJoinSession": {
        "properties": {
          "jwt": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "VoiceChatKeyCombo": {
        "properties": {
          "keyBindings": {
            "items": {
              "$ref": "#/components/schemas/VoiceChatPushToTalkKey"
            },
            "type": "array"
          },
          "sessionId": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "VoiceChatLogoutReason": {
        "enum": [
          "generic",
          "tokens_expired"
        ],
        "type": "string"
      },
      "VoiceChatPTTMode": {
        "enum": [
          "exclusive",
          "inclusive"
        ],
        "type": "string"
      },
      "VoiceChatParticipantResource": {
        "properties": {
          "energy": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "isMuted": {
            "type": "boolean"
          },
          "isSpeaking": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "speakingTimestamp": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "uri": {
            "type": "string"
          },
          "volume": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VoiceChatProductSession": {
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "VoiceChatPushToTalkKey": {
        "properties": {
          "key": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "mouseButton": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VoiceChatPushToTalkResource": {
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "keyCombos": {
            "items": {
              "$ref": "#/components/schemas/VoiceChatKeyCombo"
            },
            "nullable": true,
            "type": "array"
          },
          "mode": {
            "$ref": "#/components/schemas/VoiceChatPTTMode",
            "default": "exclusive"
          }
        },
        "type": "object"
      },
      "VoiceChatSessionResource": {
        "properties": {
          "id": {
            "type": "string"
          },
          "isFocused": {
            "type": "boolean"
          },
          "isMuted": {
            "type": "boolean"
          },
          "isRestricted": {
            "type": "boolean"
          },
          "isTransmitEnabled": {
            "default": true,
            "type": "boolean"
          },
          "participants": {
            "items": {
              "$ref": "#/components/schemas/VoiceChatParticipantResource"
            },
            "type": "array"
          },
          "product": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/VoiceChatSessionStatus",
            "default": "active"
          },
          "volume": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VoiceChatSessionStatus": {
        "enum": [
          "active",
          "onHold"
        ],
        "type": "string"
      },
      "VoiceChatSettingsResource": {
        "properties": {
          "currentCaptureDeviceHandle": {
            "type": "string"
          },
          "currentRenderDeviceHandle": {
            "type": "string"
          },
          "localMicMuted": {
            "type": "boolean"
          },
          "loopbackEnabled": {
            "type": "boolean"
          },
          "micLevel": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "speakerLevel": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "vadHangoverTime": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "vadSensitivity": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VoiceChatStateResource": {
        "properties": {
          "connected": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "VoiceChatUnnormalizedKeyCombo": {
        "properties": {
          "keyBindings": {
            "items": {
              "$ref": "#/components/schemas/VoiceChatUnnormalizedPushToTalkKey"
            },
            "type": "array"
          },
          "sessionId": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "VoiceChatUnnormalizedPushToTalkKey": {
        "properties": {
          "key": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "mouseButton": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VoiceChatUnnormalizedPushToTalkResource": {
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "keyCombos": {
            "items": {
              "$ref": "#/components/schemas/VoiceChatUnnormalizedKeyCombo"
            },
            "nullable": true,
            "type": "array"
          },
          "mode": {
            "$ref": "#/components/schemas/VoiceChatPTTMode",
            "default": "exclusive"
          }
        },
        "type": "object"
      },
      "VoiceChatUpdateParticipantResource": {
        "properties": {
          "isMuted": {
            "nullable": true,
            "type": "boolean"
          },
          "volume": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VoiceChatUpdateSessionResource": {
        "properties": {
          "isFocused": {
            "nullable": true,
            "type": "boolean"
          },
          "isTransmitEnabled": {
            "nullable": true,
            "type": "boolean"
          },
          "volume": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VoiceChatUpdateSettingsResource": {
        "properties": {
          "currentCaptureDeviceHandle": {
            "nullable": true,
            "type": "string"
          },
          "currentRenderDeviceHandle": {
            "nullable": true,
            "type": "string"
          },
          "localMicMuted": {
            "nullable": true,
            "type": "boolean"
          },
          "loopbackEnabled": {
            "nullable": true,
            "type": "boolean"
          },
          "micLevel": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "speakerLevel": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "vadHangoverTime": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "vadSensitivity": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VoiceChatVivoxCallStats": {
        "properties": {
          "call_id": {
            "type": "string"
          },
          "capture_device_consecutively_read_count_0": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "capture_device_consecutively_read_count_1": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "capture_device_consecutively_read_count_2": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "capture_device_consecutively_read_count_3": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "capture_device_consecutively_read_count_4": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "codec_name": {
            "type": "string"
          },
          "current_bars": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "current_opus_bandwidth": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "current_opus_bit_rate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "current_opus_complexity": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "current_opus_max_packet_size": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "current_opus_vbr_mode": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "incoming_discarded": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "incoming_out_of_time": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "incoming_packetloss": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "incoming_received": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "last_latency_measured_ms": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "latency_measurement_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "latency_packets_dropped": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "latency_packets_lost": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "latency_packets_malformed": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "latency_packets_negative_latency": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "latency_packets_sent": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "latency_sum_ms": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "max_latency_ms": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "min_latency_ms": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "outgoing_sent": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "plc_on": {
            "type": "boolean"
          },
          "plc_synthetic_frames": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "r_factor": {
            "format": "double",
            "type": "number"
          },
          "render_device_errors": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "render_device_overruns": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "render_device_underruns": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "sample_interval_begin_ms": {
            "format": "int64",
            "type": "integer"
          },
          "sample_interval_end_ms": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VoiceChatVoiceChatHeartbeatMetrics": {
        "properties": {
          "productsUsingVoice": {
            "items": {
              "$ref": "#/components/schemas/VoiceChatVoiceChatHeartbeatMetrics_PerProductData"
            },
            "type": "array"
          },
          "providerData": {
            "items": {
              "$ref": "#/components/schemas/VoiceChatVoiceChatHeartbeatMetrics_PerProviderData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "VoiceChatVoiceChatHeartbeatMetrics_PerProductData": {
        "properties": {
          "channelsInUse": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "providerName": {
            "type": "string"
          },
          "target": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "VoiceChatVoiceChatHeartbeatMetrics_PerProviderData": {
        "properties": {
          "isLoggedIn": {
            "type": "boolean"
          },
          "providerName": {
            "type": "string"
          },
          "target": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "XboxAccountAuthorization": {
        "properties": {
          "user_hash": {
            "type": "string"
          },
          "xsts_token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "XboxAccountAuthorizationParameters": {
        "properties": {
          "authenticatorUrl": {
            "type": "string"
          },
          "showUserSelector": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "XboxAccountAuthorizationResponse": {
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/XboxAccountAuthorization",
            "nullable": true
          },
          "error_code": {
            "$ref": "#/components/schemas/XboxAccountErrorCode",
            "nullable": true
          }
        },
        "type": "object"
      },
      "XboxAccountErrorCode": {
        "enum": [
          "aborted",
          "signed_out",
          "user_not_found",
          "no_default_user"
        ],
        "type": "string"
      },
      "XboxAccountOnlinePlatform": {
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "garena",
          "playstation",
          "switch",
          "xbox"
        ],
        "type": "string"
      },
      "XboxAccountPlatformUser": {
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/XboxAccountOnlinePlatform",
            "default": "unknown"
          }
        },
        "type": "object"
      },
      "XboxAccountSelectUserParameters": {
        "properties": {
          "options": {
            "$ref": "#/components/schemas/XboxAccountSignInOptions",
            "default": "show_user_selector"
          },
          "shouldRetryOnAbort": {
            "default": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "XboxAccountSignInOptions": {
        "enum": [
          "add_default_user_allowing_ui",
          "show_user_selector",
          "allow_guests"
        ],
        "type": "string"
      },
      "basicOperatingSystemInfo": {
        "description": "User Experience Settings Operating System Information",
        "properties": {
          "edition": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "versionMajor": {
            "type": "string"
          },
          "versionMinor": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "basicSystemInfo": {
        "description": "User Experience Settings System Information",
        "properties": {
          "operatingSystem": {
            "$ref": "#/components/schemas/basicOperatingSystemInfo"
          },
          "physicalMemory": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "physicalProcessorCores": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          },
          "processorSpeed": {
            "format": "int32",
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "title": "",
    "version": "1.0.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/Exit": {
      "post": {
        "operationId": "Exit",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Closes the connection.",
        "tags": [
          "builtin"
        ]
      }
    },
    "/Help": {
      "post": {
        "description": "With no arguments, returns a list of all available functions and types along with a short description. If a function or type is specified, returns detailed information about it.",
        "operationId": "Help",
        "parameters": [
          {
            "description": "Name of the function or type to describe",
            "in": "query",
            "name": "target",
            "required": false,
            "type": "string"
          },
          {
            "description": "Format for returned information",
            "enum": [
              "Full",
              "Epytext",
              "Brief",
              "Console"
            ],
            "in": "query",
            "name": "format",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns information on available functions and types",
        "tags": [
          "builtin"
        ]
      }
    },
    "/Subscribe": {
      "post": {
        "operationId": "Subscribe",
        "parameters": [
          {
            "description": "Name of the event to subscribe to",
            "in": "query",
            "name": "eventName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Desired format to receive events in. If unspecified, events will be sent in the active result format at the time.",
            "enum": [
              "JSON",
              "YAML",
              "MsgPack"
            ],
            "in": "query",
            "name": "format",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Subscribes to a given event",
        "tags": [
          "builtin"
        ]
      }
    },
    "/Unsubscribe": {
      "post": {
        "operationId": "Unsubscribe",
        "parameters": [
          {
            "description": "Name of the event to unsubscribe from",
            "in": "query",
            "name": "eventName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Unsubscribes from a given event",
        "tags": [
          "builtin"
        ]
      }
    },
    "/accounts-security/v1/access": {
      "get": {
        "operationId": "GetAccountsSecurityV1Access",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsSecurityAccountsSecurity"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the action need to be done and outbound URL for it",
        "tags": [
          "Plugins",
          "Plugin accounts-security"
        ]
      }
    },
    "/age-restriction/v1/age-restriction/products/{productId}": {
      "get": {
        "operationId": "GetAgeRestrictionV1AgeRestrictionProductsByProductId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgeRestrictionAgeRestriction"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the age-restriction state for the productId",
        "tags": [
          "Plugins",
          "Plugin age-restriction",
          "Subscribable"
        ]
      }
    },
    "/age-restriction/v1/debug/age-restriction/products/{productId}": {
      "put": {
        "operationId": "PutAgeRestrictionV1DebugAgeRestrictionProductsByProductId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "restricted"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgeRestrictionAgeRestriction"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "DEBUG: Sets the age-restriction state for the productId",
        "tags": [
          "Plugins",
          "Plugin age-restriction",
          "Internal"
        ]
      }
    },
    "/anti-addiction/v1/products/{productId}/anti-addiction-state": {
      "post": {
        "operationId": "PostAntiAddictionV1ProductsByProductIdAntiAddictionState",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AntiAddictionAntiAddictionState"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "antiAddictionState"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Test API for triggering anti-addiction state for testing purposes",
        "tags": [
          "Plugins",
          "Plugin anti-addiction"
        ]
      }
    },
    "/anti-addiction/v1/products/{productId}/policies/{policyType}/anti-addiction-state": {
      "get": {
        "operationId": "GetAntiAddictionV1ProductsByProductIdPoliciesByPolicyTypeAntiAddictionState",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "shutdown",
              "playTime",
              "warningMessage",
              "disableMatchMaking",
              "hopeWarning",
              "hopeRewardRate",
              "hopeShutdown",
              "hopeHeartbeat"
            ],
            "in": "path",
            "name": "policyType",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AntiAddictionAntiAddictionState"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns an anti-addiction state by productId and policy",
        "tags": [
          "Plugins",
          "Plugin anti-addiction",
          "Subscribable"
        ]
      }
    },
    "/app-command/submit": {
      "put": {
        "operationId": "PutAppCommandSubmit",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppCommandCommand"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "command"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Used to coerce an application to invoke a registered command.",
        "tags": [
          "Plugins",
          "Plugin app-command"
        ]
      }
    },
    "/app-command/v1/auth/status": {
      "delete": {
        "operationId": "DeleteAppCommandV1AuthStatus",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Deletes the stored authentication status",
        "tags": [
          "Plugins",
          "Plugin app-command"
        ]
      },
      "get": {
        "operationId": "GetAppCommandV1AuthStatus",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppCommandAuthStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the authentication status",
        "tags": [
          "Plugins",
          "Plugin app-command",
          "Subscribable"
        ]
      }
    },
    "/app-command/v1/focus-request": {
      "delete": {
        "description": "Delete the current app focus request, if one exists",
        "operationId": "DeleteAppCommandV1FocusRequest",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete the current app focus request, if one exists",
        "tags": [
          "Plugins",
          "Plugin app-command"
        ]
      },
      "get": {
        "description": "Get the current app focus request, if one exists",
        "operationId": "GetAppCommandV1FocusRequest",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppFocusRequest"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the current app focus request, if one exists",
        "tags": [
          "Plugins",
          "Plugin app-command",
          "Subscribable"
        ]
      }
    },
    "/chat/v1/debug": {
      "get": {
        "operationId": "GetChatV1Debug",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatDebugConfig"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "get debug config",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Internal"
        ]
      },
      "post": {
        "operationId": "PostChatV1Debug",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatDebugConfig"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "config"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "set debug config",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Internal"
        ]
      }
    },
    "/chat/v1/debug/finalize/initialize": {
      "post": {
        "operationId": "PostChatV1DebugFinalizeInitialize",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "debug finalize and initialize",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Internal"
        ]
      }
    },
    "/chat/v1/device-settings": {
      "get": {
        "operationId": "GetChatV1DeviceSettings",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatDeviceChatSettings"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the current values of the device settings related to chat.",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      },
      "put": {
        "operationId": "PutChatV1DeviceSettings",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatDeviceChatSettings"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "deviceSettings"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the device settings related to chat",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v1/session": {
      "get": {
        "description": "Chat notifies updated events on these endpoints, typically in this order:\n\n* `/chat/v1/session`    ->  { state: \"connecting\", pid: \"\", name: \"\", loaded: false }    //chat is now connecting (empty pid, name)\n* `/chat/v1/session`    ->  { state: \"connected\", pid: \"sum3530124@pvp.net\", name: \"Scarlet Witch\", loaded: false }    //chat is now connected initial data for showing the friends list in the UX is not loaded\n* `/chat/v#/presences`      //for all your friend presences (no way around this currently)\n* `/chat/v#/presences`      //for yourself\n* `/chat/v#/groups`         //batch of every group in your friends list\n* `/chat/v#/friends`        //batch\n* `/chat/v#/blocked`        //batch\n* `/chat/v#/conversations`  //recent conversations\n* `/chat/v#/messages`\n* `/chat/v#/participants`\n* `/chat/v1/session`     -> { state: \"connected\", pid: \"sum3530124@pvp.net\", name: \"Scarlet Witch\", loaded: true }    //chat is now connected and has loaded the initial data to show in the UX\n",
        "operationId": "GetChatV1Session",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatSession"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "get chat session state",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      }
    },
    "/chat/v1/session/connect": {
      "post": {
        "operationId": "PostChatV1SessionConnect",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "force to chat to connect & allow reconnects",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Internal"
        ]
      }
    },
    "/chat/v1/session/debug/terminate/{product}": {
      "post": {
        "operationId": "PostChatV1SessionDebugTerminateByProduct",
        "parameters": [
          {
            "in": "path",
            "name": "product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Simulate termination of a product to the chat plugin",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Internal"
        ]
      }
    },
    "/chat/v1/session/disconnect": {
      "post": {
        "operationId": "PostChatV1SessionDisconnect",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "force chat to disconnect & disallow reconnects",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Internal"
        ]
      }
    },
    "/chat/v1/session/platform": {
      "post": {
        "operationId": "PostChatV1SessionPlatform",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatSessionPlatform"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "update"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the chat session's League of Legends platform id",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v1/settings": {
      "get": {
        "description": "**Response:**\n\n```\n{\n  \"bounceDockIconEnabled\": [bounceDockIconEnabled], // If the dock icon will bounce when receiving a new message, game invite, etc\n  \"chat-status-message\": \"[status_message]\",      // The player's status message. This gets updated within chat when the \"status\" of the player is changed\n  \"chatFilterDisabled\": [chatFilterDisabled],       // If bad language is filtered in chat messages\n  \"chatGroupMobile\": [chatGroupMobile],             // If mobile friends are grouped in their own \"MOBILE\" folder\n  \"chatGroupOffline\": [chatGroupOffline],           // If offline friends are grouped in their own \"OFFLINE\" folder\n  \"chatWindow\": {                                   // The chat window settings\n    \"detached\": [detached],                         // If the chat window is docked or popped out\n    \"height\": [height],                             // The height of the chat window\n    \"left\": [left],                                 // The location of the left side of the chat window\n    \"top\": [top],                                   // The location of the top side of the chat window\n    \"width\": [width]                                // The width of the chat window\n  },\n  \"closed-conversations\": {                         // Which conversations have been closed. Used within chat to determine which recent convos to remove on startup. This gets updated\n                                                      // within chat when a conversation is deleted\n    \"[convo_id]\": [closed_timestamp],\n    ...\n  },\n  \"friendRequestToastsDisabled\": [friendRequestToastsDisabled], // If a toast appears when you receive a friend request\n  \"linkClickWarningEnabled\": [linkClickWarningEnabled],         // If a link warning will appear when clicking on links\n  \"messageNotificationsEnabled\": [messageNotificationsEnabled], // If a native toast or regular toast appears when receiving a message\n  \"moreUnreadsEnabled\": [moreUnreadsEnabled],                   // If a \"more unreads\" indicator appears for unread items not currently in scroll view\n  \"muted-conversations\": {                                      // A list of 1:1 muted conversations. This gets updated within chat when the \"muted\" state of a conversation is changed\n    \"[convo_id]\": 1\n  },                       \n  \"recentlyPlayedOpen\": [recentlyPlayedOpen],                  // If the \"recently played\" folder is open\n  \"roster-group-collapsed\": {                                  // A list of each folder's collapsed state. This gets updated within chat when the \"collapsed\" state of a group is changed\n    \"[group_folder_name]\": [collapsed],\n    ...\n  },\n  \"showWhenTypingEnabled\": [showWhenTypingEnabled],            // If an indicator is shown to other players when writing a message to them\n  \"sortBy\": \"[sort_type]\"                                    // How to sort friends in the friends list (ex. by \"availability\" vs \"alphabetical\")\n}\n```\n\nMost of these chat settings are straightforward and only require an update when a player enables or disables a setting. For example, when they check or uncheck a box for the setting.\n",
        "operationId": "GetChatV1Settings",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatAccountChatSettings"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the account settings related to chat",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      },
      "patch": {
        "operationId": "PatchChatV1Settings",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "settings"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the account settings related to chat, partial update using only given fields",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      },
      "put": {
        "operationId": "PutChatV1Settings",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatAccountChatSettings"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "settings"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the account settings related to chat, complete overwrite",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v1/social": {
      "post": {
        "operationId": "PostChatV1Social",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatSocialDataReq"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "product"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatSocialData"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get game/product social data for building the friend list UI",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v2/me": {
      "delete": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v3/me'.",
        "operationId": "DeleteChatV2Me",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatPresenceProduct"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete multi-game presence of a specific product",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      },
      "put": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v3/me'.",
        "operationId": "PutChatV2Me",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatChatGamePresence"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "gamePresence"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Put/update a multi-game presence for a specific product. This implicitly sets the product's chat session state to `active`.",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      }
    },
    "/chat/v2/session/connect": {
      "post": {
        "operationId": "PostChatV2SessionConnect",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "force to chat to connect & allow reconnects",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Internal"
        ]
      }
    },
    "/chat/v2/session/debug/terminate/{product}": {
      "post": {
        "operationId": "PostChatV2SessionDebugTerminateByProduct",
        "parameters": [
          {
            "in": "path",
            "name": "product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Simulate termination of a product to the chat plugin",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Internal"
        ]
      }
    },
    "/chat/v2/session/disconnect": {
      "post": {
        "operationId": "PostChatV2SessionDisconnect",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "force chat to disconnect & disallow reconnects",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Internal"
        ]
      }
    },
    "/chat/v2/session/platform": {
      "post": {
        "operationId": "PostChatV2SessionPlatform",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatSessionPlatform"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "update"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the chat session's League of Legends platform id",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v2/session/state": {
      "get": {
        "operationId": "GetChatV2SessionState",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatSessionState"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "get chat product session state",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      },
      "put": {
        "operationId": "PutChatV2SessionState",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatProductSessionState"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "update"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "edit session state for specific product",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v3/blocked": {
      "delete": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v4/blocked'.",
        "operationId": "DeleteChatV3Blocked",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatBlockPid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Unblock a player",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      },
      "get": {
        "description": "**Response**:\n\n```\n{\n  \"blocked\": [\n    {\n      \"action\": \"[action]\",         // \"deny\" for blocked\n      \"name\": \"[name]\",             // player name\n      \"order\": \"[order],            // order in block list\n      \"pid\": \"[pid]\"                // player id\n    }\n  ]\n}\n```\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/blocked'.",
        "operationId": "GetChatV3Blocked",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "puuid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatBlockedList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get blocked players",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "post": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v4/blocked'.",
        "operationId": "PostChatV3Blocked",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatBlockPid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Block a player",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      }
    },
    "/chat/v3/errors": {
      "delete": {
        "operationId": "DeleteChatV3Errors",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatErrorId"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete a specific error",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      },
      "get": {
        "description": "**Response:** list of error objects (could have zero or more entries):\n\n```\n{ \"errors\": [\n              { \"class\":   \"[class]\",        //source of error (muc, presence, friend, etc)\n                \"subtype\": \"[subtype]\",      //extra detail; usually most descriptive - along with text field\n                \"type\":    \"[type]\",         //detail - usually action based on error??? (cancel, ignore, etc)\n                \"code\":    \"[code]\",         //numeric error code\n                \"text\":    \"[description]\",  //if available; usually most descriptive (when provided) - along with subtype field\n                \"[key]\":   \"[value]\",        //extra available data, such as...\n                \"pid\":     \"[{pid}]\",        //player id if available\n                \"cid\":     \"[{cid}]\",        //conversation id if available\n                \"id\":      \"[error id]\",     //unique among all errors\n                \"ts\":      \"[timestamp]\"     //integer value: milliseconds UTC\n              },\n              { \"class\":   \"muc\",           //EXAMPLE ERROR OF FAILURE TO JOIN MUC\n                \"subtype\": \"not-allowed\",\n                \"type\":    \"cancel\",\n                \"text\":    \"\",\n                \"code\":    \"405\",\n                \"pid\":     \"sum3530124@pvp.net\",\n                \"cid\":     \"2785eb60-495f-4037-9fa0-98d70bac1b00@pgc.pvp.net\",\n                \"id\":      \"e_1491935420384\"\n                \"ts\":      \"1491935419627\"\n              },\n              { \"class\":   \"auth\",          //EXAMPLE ERROR OF FAILURE TO LOGIN TO CHAT\n                \"id\":      \"e_auth\",\n                \"code\":    \"401\",\n                \"type\":    \"temporary-auth-failure\"\n                \"ts\":      \"1497989043000\",\n                \"cid\":     \"\",\n                \"pid\":     \"\",\n                \"subtype\": \"\",\n                \"text\":    \"\",\n              },\n              ...\n            ]\n}\n```\n\n**Notes:**\n\n* Errors for group chat (multi-user chat: MUC) will have \"class\":\"muc\" and a \"cuuid\" field\n* Usually the \"subtype\" and the \"text\" fields are most descriptive, if they exist\n",
        "operationId": "GetChatV3Errors",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatErrorList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get a specific error",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      }
    },
    "/chat/v3/friendrequests": {
      "delete": {
        "description": "Endpoint deleted July 2021; Please use '/chat/v6/friendrequests'.",
        "operationId": "DeleteChatV3Friendrequests",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequestPid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Remove or decline friend request",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      },
      "get": {
        "description": "**Response:** named requests root object: a flat list of friend request property groups with 'pid' and 'name' inside (could have zero or more entries):\n\n```\n{\n  \"requests\": [\n    {\n      \"name\":         \"[friend name]\",\n      \"note\":         \"[friend note]\",     // Can be set to contain information about the friend request. (ex. recofriender saves the player name from social media here)\n      \"pid\":          \"[friend pid]\",\n      \"subscription\": \"pending_out\"        //either \"pending_out\" or \"pending_in\" (sent or received request)\n    }\n  ]\n}\n```\n\n\nEndpoint deleted July 2021; Please use '/chat/v6/friendrequests'.",
        "operationId": "GetChatV3Friendrequests",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFriendRequestList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get friend requests",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "post": {
        "description": "Endpoint deleted July 2021; Please use '/chat/v6/friendrequests'.",
        "operationId": "PostChatV3Friendrequests",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendRequestAdd"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Add friend request / invite friend",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      }
    },
    "/chat/v3/friends": {
      "delete": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v4/friends'.",
        "operationId": "DeleteChatV3Friends",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendPid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Remove friend",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      },
      "get": {
        "description": "**Response:** named friends root object: a flat list of friend property groups with 'pid' and 'name' inside (could have zero or more entries):```\n{\n  \"friends\": [\n    {\n      \"displayGroup\": \"[display group name]\",   // The current display group of this friend. This will either be the regular group or a meta group (ex. \"MOBILE\", \"OFFLINE\")\n      \"group\":        \"[group name]\",           // The group this friend is a part of\n      \"name\":         \"[friend name]\",\n      \"note\":         \"[friend note]\",\n      \"pid\":          \"[friend pid]\",\n      \"priority\":     \"[group priority value]\"\n    }\n    ...\n  ]\n}\n```\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/friends'.",
        "operationId": "GetChatV3Friends",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "puuid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatFriends"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get friends",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "put": {
        "description": "**Data:**\n\n```\n{\n  \"puuid\":  \"[puuid]\",           //specify player to update\n  \"pid\":    \"[pid]\",             //specify player to update, JID format, if not using puuid\n  \"group\":  \"[new group name]\",  //if moving friend to different group, specify it here\n  \"note\":   \"[new friend note]\"  //if changing friend note, specify it here\n}\n```\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/friends'.",
        "operationId": "PutChatV3Friends",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendUpdate"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update a friend",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      }
    },
    "/chat/v3/groups": {
      "delete": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v4/groups'.",
        "operationId": "DeleteChatV3Groups",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendGroupName"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete a friend group",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      },
      "get": {
        "description": "**Response:** named groups root object: an ordered list of friend groups. First is highest displayed.  Could have one or more entries, always has a default group:\n\n```\n{\n  \"groups\": [\n    {\n      \"collapsed\":    [collapsed],                  // If the group is open or closed\n      \"isMetaGroup\":  [isMetaGroup],                // If the group is a meta group (ex. \"MOBILE\", \"OFFLINE\")\n      \"name\":        \"[group name]\"\n    }\n    ...\n  ]\n}\n```\n\n**Mobile and Offline Groups**\n\nThe mobile and offline groups will appear in the list of groups if the \"chatGroupMobile\" or \"chatGroupOffline\" settings are set to true. They will appear like this:\n\n```\n{\n  \"groups\": [\n    ...\n    {\n      \"collapsed\": [collapsed],\n      \"isMetaGroup\": true,\n      \"name\": \"MOBILE\"\n    },\n    ...\n    {\n      \"collapsed\": [collapsed],\n      \"isMetaGroup\": true,\n      \"name\": \"OFFLINE\"\n    }\n    ...\n  ]\n}\n```\n\nFriends who are either in the \"offline\" or \"mobile\" state will automatically be given the corresponding \"displayGroup\" (ex. either \"OFFLINE\" or \"MOBILE\") in place of their regular group name. If the settings are turned off the groups will be removed and the friends' \"displayGroup\"s will be set back to their regular group names.\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/groups/order'.",
        "operationId": "GetChatV3Groups",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatGroupList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get groups",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "post": {
        "description": "**Data:**\n\n```\n{\n\"name\":  \"[new group name]\"\n}\n```\nRequirements to create a friend group:\n\n1. name can't be empty --> error 400\n2. name can't happen to be the default group \"**Default\" --> error 403\n3. name can't happen to be a meta group, neither \"OFFLINE\" nor \"MOBILE\" --> error 403\n4. name can't already be the name of another group --> error 409\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/groups'.",
        "operationId": "PostChatV3Groups",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendGroupCreate"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "group"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Create a friend group",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      },
      "put": {
        "description": "**Data:**\n\n```\n{\n\"collapsed\": [new collapsed]   //if collapsing or uncollapsing, specify it here\n\"name\":      \"[current name]\", //current name of group\n\"new_name\":  \"[new name]\",     //same name, or new name if renaming\n}\n```\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/groups'.",
        "operationId": "PutChatV3Groups",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatChatGroupUpdate"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update a friend group",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      }
    },
    "/chat/v3/groups/order": {
      "put": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v4/groups/order'.",
        "operationId": "PutChatV3GroupsOrder",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendGroupOrder"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Order the friend groups",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      }
    },
    "/chat/v3/me": {
      "delete": {
        "operationId": "DeleteChatV3Me",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatPresenceProduct"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete multi-game presence of a specific product",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      },
      "put": {
        "operationId": "PutChatV3Me",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatChatGamePresence"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "gamePresence"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Put/update a multi-game presence for a specific product. This implicitly sets the product's chat session state to `active`.",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v3/me/debug-jwt": {
      "post": {
        "operationId": "PostChatV3MeDebugJwt",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatDebugChatGamePresence"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "gamePresence"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Simulate updating a game presence with jwt (server authoritative info)",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Internal"
        ]
      }
    },
    "/chat/v4/blocked": {
      "delete": {
        "operationId": "DeleteChatV4Blocked",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatBlockPid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Unblock a player",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      },
      "get": {
        "description": "**Response**:\n\n```\n{\n  \"blocked\": [\n    {\n      \"action\": \"[action]\",         // \"deny\" for blocked\n      \"name\": \"[name]\",             // player name\n      \"order\": \"[order],            // order in block list\n      \"pid\": \"[pid]\"                // player id\n    }\n  ]\n}\n```\n",
        "operationId": "GetChatV4Blocked",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "puuid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatBlockedList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get blocked players",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      },
      "post": {
        "operationId": "PostChatV4Blocked",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatBlockPid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Block a player",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v4/conversations/{cid}/participants": {
      "get": {
        "description": "**Response:** named participants root object: a flat list of conversation participant property groups (could have zero or more entries):\n\n```\n{ \"participants\": [\n                      { \"cid\":  \"[cid]\",\n                        \"pid\":  \"[pid]\",\n                        \"name\": \"[name]\"\n                      },\n                      { \"cid\":  \"[cid]\",\n                        \"pid\":  \"[pid]\",\n                        \"name\": \"[name]\"\n                      },\n                        ...\n                      ]}\n```\n",
        "operationId": "GetChatV4ConversationsByCidParticipants",
        "parameters": [
          {
            "in": "path",
            "name": "cid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatPlayerParticipants"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the participants in a conversation",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      }
    },
    "/chat/v4/conversations/{cid}/participants/{pid}": {
      "get": {
        "description": "**Response:** named participants root object: a flat list of conversation participant property groups (could have zero or more entries):\n\n```\n{ \"participants\": [\n                      { \"cid\":  \"[cid]\",\n                        \"pid\":  \"[pid]\",\n                        \"name\": \"[name]\"\n                      },\n                      { \"cid\":  \"[cid]\",\n                        \"pid\":  \"[pid]\",\n                        \"name\": \"[name]\"\n                      },\n                        ...\n                      ]}\n```\n",
        "operationId": "GetChatV4ConversationsByCidParticipantsByPid",
        "parameters": [
          {
            "in": "path",
            "name": "cid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatPlayerParticipants"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get specific participant in a conversation",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      }
    },
    "/chat/v4/friendrequests": {
      "delete": {
        "description": "Endpoint deleted October 2022; Please use '/chat/v6/friendrequests'.",
        "operationId": "DeleteChatV4Friendrequests",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequestPid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Remove or decline friend request",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      },
      "get": {
        "description": "**Response:** named requests root object: a flat list of friend request property groups with 'pid' and 'name' inside (could have zero or more entries):\n\n```\n{\n  \"requests\": [\n    {\n      \"name\":         \"[friend name]\",\n      \"note\":         \"[friend note]\",     // Can be set to contain information about the friend request. (ex. recofriender saves the player name from social media here)\n      \"pid\":          \"[friend pid]\",\n      \"subscription\": \"pending_out\"        //either \"pending_out\" or \"pending_in\" (sent or received request)\n    }\n  ]\n}\n```\n\n\nEndpoint deleted October 2022; Please use '/chat/v6/friendrequests'.",
        "operationId": "GetChatV4Friendrequests",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFriendRequestList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get friend requests",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "post": {
        "description": "Endpoint deleted October 2022; Please use '/chat/v6/friendrequests'.",
        "operationId": "PostChatV4Friendrequests",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendRequestAdd"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFriendRequestList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Add friend request / invite friend",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      }
    },
    "/chat/v4/friends": {
      "delete": {
        "operationId": "DeleteChatV4Friends",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendPid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Remove friend",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      },
      "get": {
        "description": "**Response:** named friends root object: a flat list of friend property groups with 'pid' and 'name' inside (could have zero or more entries):```\n{\n  \"friends\": [\n    {\n      \"displayGroup\":   \"[display group name]\",   // The current display group of this friend. This will either be the regular group or a meta group (ex. \"MOBILE\", \"OFFLINE\")\n      \"group\":          \"[group name]\",           // The group this friend is a part of\n      \"name\":           \"[friend name]\",\n      \"note\":           \"[friend note]\",\n      \"pid\":            \"[friend pid]\",\n      \"priority\":       \"[group priority value]\"\n      \"last_online_ts\": \"[last online timestamp]\"\n    }\n    ...\n  ]\n}\n```\n",
        "operationId": "GetChatV4Friends",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "puuid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatFriends"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get friends",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      },
      "put": {
        "description": "**Data:**\n\n```\n{\n  \"puuid\":  \"[puuid]\",           //specify player to update\n  \"pid\":    \"[pid]\",             //specify player to update, JID format, if not using puuid\n  \"group\":  \"[new group name]\",  //if moving friend to different group, specify it here\n  \"note\":   \"[new friend note]\"  //if changing friend note, specify it here\n}\n```\n",
        "operationId": "PutChatV4Friends",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendUpdate"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update a friend",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v4/groups": {
      "delete": {
        "operationId": "DeleteChatV4Groups",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendGroupName"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete a friend group",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      },
      "get": {
        "description": "**Response:** named groups root object: an ordered list of friend groups. First is highest displayed.  Could have one or more entries, always has a default group:\n\n```\n{\n  \"groups\": [\n    {\n      \"collapsed\":    [collapsed],                  // If the group is open or closed\n      \"isMetaGroup\":  [isMetaGroup],                // If the group is a meta group (ex. \"MOBILE\", \"OFFLINE\")\n      \"name\":        \"[group name]\"\n    }\n    ...\n  ]\n}\n```\n\n**Mobile and Offline Groups**\n\nThe mobile and offline groups will appear in the list of groups if the \"chatGroupMobile\" or \"chatGroupOffline\" settings are set to true. They will appear like this:\n\n```\n{\n  \"groups\": [\n    ...\n    {\n      \"collapsed\": [collapsed],\n      \"isMetaGroup\": true,\n      \"name\": \"MOBILE\"\n    },\n    ...\n    {\n      \"collapsed\": [collapsed],\n      \"isMetaGroup\": true,\n      \"name\": \"OFFLINE\"\n    }\n    ...\n  ]\n}\n```\n\nFriends who are either in the \"offline\" or \"mobile\" state will automatically be given the corresponding \"displayGroup\" (ex. either \"OFFLINE\" or \"MOBILE\") in place of their regular group name. If the settings are turned off the groups will be removed and the friends' \"displayGroup\"s will be set back to their regular group names.\n",
        "operationId": "GetChatV4Groups",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatGroupList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get groups",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      },
      "post": {
        "description": "**Data:**\n\n```\n{\n\"name\":  \"[new group name]\"\n}\n```\nRequirements to create a friend group:\n\n1. name can't be empty --> error 400\n2. name can't happen to be the default group \"**Default\" --> error 403\n3. name can't happen to be a meta group, neither \"OFFLINE\" nor \"MOBILE\" --> error 403\n4. name can't already be the name of another group --> error 409\n",
        "operationId": "PostChatV4Groups",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendGroupCreate"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "group"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Create a friend group",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      },
      "put": {
        "description": "**Data:**\n\n```\n{\n\"collapsed\": [new collapsed]   //if collapsing or uncollapsing, specify it here\n\"name\":      \"[current name]\", //current name of group\n\"new_name\":  \"[new name]\",     //same name, or new name if renaming\n}\n```\n",
        "operationId": "PutChatV4Groups",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatChatGroupUpdate"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update a friend group",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v4/groups/order": {
      "put": {
        "operationId": "PutChatV4GroupsOrder",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendGroupOrder"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Order the friend groups",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v4/presences": {
      "get": {
        "operationId": "GetChatV4Presences",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "puuid",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "product",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMultiGamePresenceList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get multi-game presences",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      }
    },
    "/chat/v5/conversations": {
      "delete": {
        "description": "Endpoint deleted July 2021; Please use '/chat/v7/conversations'.",
        "operationId": "DeleteChatV5Conversations",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoCid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete or leave a conversation",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      },
      "get": {
        "description": "Endpoint deleted July 2021; Please use '/chat/v7/conversations' or '/chat/v7/conversations/{domain}'.",
        "operationId": "GetChatV5Conversations",
        "parameters": [
          {
            "in": "query",
            "name": "cid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get a conversation by cid",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "post": {
        "description": "Endpoint deleted July 2021; Please use '/chat/v7/conversations'. It supports federated chat better.",
        "operationId": "PostChatV5Conversations",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoJoin"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "convo"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Create or join a conversation",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      },
      "put": {
        "description": "Endpoint deleted July 2021; Please use '/chat/v7/conversations'.",
        "operationId": "PutChatV5Conversations",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoUpdate"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "update"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Edit conversation",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      }
    },
    "/chat/v5/friendrequests": {
      "delete": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v6/friendrequests'.",
        "operationId": "DeleteChatV5Friendrequests",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequestPuuid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Remove or decline friend request",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      },
      "get": {
        "description": "**Response:** named requests root object: a flat list of friend request property groups with 'puuid' and GnT info inside (could have zero or more entries in list):\n\n```\n{\n  \"requests\": [\n    {\n      \"gameName\":     \"[friend gameName]\",\n      \"tagLine\":      \"[friend tagLine]\",\n      \"note\":         \"[friend note]\",     // Can be set to contain information about the friend request. (ex. recofriender saves the player name from social media here)\n      \"puuid\":        \"[friend puuid]\",\n      \"subscription\": \"pending_out\"        //either \"pending_out\" or \"pending_in\" (sent or received request)\n    }\n  ]\n}\n```\n\n\nEndpoint deleted August 2021; Please use '/chat/v6/friendrequests'.",
        "operationId": "GetChatV5Friendrequests",
        "parameters": [
          {
            "in": "query",
            "name": "puuid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFriendRequestListPuuid"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get friend requests",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "post": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v6/friendrequests'.",
        "operationId": "PostChatV5Friendrequests",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendRequestPost"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFriendRequestListPuuid"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Add friend request / invite friend",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      }
    },
    "/chat/v5/messages": {
      "delete": {
        "description": "Endpoint deleted August 2021; Please use 'chat/v6/messages'.",
        "operationId": "DeleteChatV5Messages",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoCid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Clear conversation message history",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      },
      "get": {
        "description": "**Response**: named messages root object: a flat list of message property groups (could have zero or more entries):\n\n```\n{ \"messages\": [\n                  { \"body\": \"[message]\",            //actual text of this message\n                    \"pid\":  \"[{pid}]\",              //pid of sender\n                    \"name\": \"[name]\",               //name of sender\n                    \"ts\":   \"[timestamp]\",          //integer value: milliseconds UTC\n                    \"cid\":  \"[cid]\",                //conversation id\n                    \"id\":   \"[message id]\",         //unique key within the conversation - for storage\n                    \"read\": true/false,               //whether message has been marked as read or not\n                    \"type\": \"[chat, groupchat, dm]\" //how the message was sent: from friend, from group chat, or a direct message from player in a group chat\n                  },\n                  { \"body\": \"[message]\",\n                    \"pid\":  \"[{pid}]\",\n                    \"ts\":   \"[timestamp]\",\n                    \"cid\":  \"[cid]\",\n                    \"id\":   \"[message id]\",\n                    \"read\": true/false,\n                    \"type\": \"[chat, groupchat, dm]\"\n                  },\n                  ...\n                ]\n}\n```\n\n**NOTE**: messages are sorted by time-stamp, earliest first, latest last\n\n\nEndpoint deleted August 2021; Please use 'chat/v6/messages'.",
        "operationId": "GetChatV5Messages",
        "parameters": [
          {
            "in": "query",
            "name": "cid",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "mid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatMessageList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get conversation messages",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "post": {
        "description": "**Sending A Message**\nA conversation id (cid) can be a MUC cid or for peer to peer messages, a player id (pid) can be used as a cid.\n\n```\nPOST /chat/v3/conversations/{cid}/messages      //cid is the conversation id passed as a path argument\n```\nData:\n\n```\n{\n  \"message\": \"[message]\" //the text to send\n  \"type\"   : \"[chat, groupchat, dm]\"\n}\n```\nAdditional notes:\n\n* type - used to specify the type of message (inferred from conversation type if left blank)\n  * chat: for P2P messages with friends\n  * groupchat: for group messages within a group chat\n  * dm: for Direct Messages with somebody in a group chat with you, or with a friend\n\nAs players post messages to a conversation, chat notifies on REST in this order:\n\n* /chat/v3/conversations/\n  * with updated data:  \"unread_count\" and the last message ID in the conversation\n* /chat/v3/conversations/{cid}/messages\n  * a list of new messages for the conversation (earliest first, latest last, but many times just one new message)\n\n**Direct Messages (private messages within a group chat)**\n\nPrivate messages between players that are not friends are possible, and this messaging is always tied to a JWT authenticated group chat (MUC) that both players are a part of. The MUC they are a part of has its own conversation-id (cid) and the private conversation between participants includes that cid in its derived cid.  For example if players \"Brad\" and \"Sue\" are both in MUC \"lobby01@league.pvp.net\" and Brad sends a direct message to Sue, then his client will...\n\n```\nPOST /chat/v3/conversations/{cid}/messages      //where cid = \"lobby01@league.pvp.net/Sue\"\n```\nNOTE: all {cid} values should be URL encoded, so the example cid when sent url encoded is \"lobby01%40league.pvp.net%2FSue\"\n\nData:\n\n```\n{\n  \"message\": \"[message]\" //the text to send\n  \"type\"   : \"dm\"\n}      \n```\nAdditional notes:\n\n* The conversation object (and child objects like messages) from Brad's perspective will be at: /chat/v3/conversations/lobby01%40league.pvp.net%2FSue\n* The conversation from Sue's perspective will be at:  /chat/v3/conversations/lobby01%40league.pvp.net%2FBrad\n* All operations (GET participants, GET messages, POST messages, etc) are the same as regular conversations\n* for direct messaging, the conversation \"type\" and the message \"type\" will always be \"dm\" \n\n\nEndpoint deleted August 2021; Please use 'chat/v6/messages'.",
        "operationId": "PostChatV5Messages",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessagePost"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "message"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatMessageList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Send a new chat message to a room or individual",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      }
    },
    "/chat/v5/messages/{domain}": {
      "get": {
        "description": "Endpoint deleted August 2021; Please use 'chat/v6/messages/{domain}'.",
        "operationId": "GetChatV5MessagesByDomain",
        "parameters": [
          {
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatMessageList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get messages by domain (optional query args: cid &/or mid)",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable",
          "Deprecated"
        ]
      }
    },
    "/chat/v5/participants": {
      "get": {
        "operationId": "GetChatV5Participants",
        "parameters": [
          {
            "in": "query",
            "name": "cid",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "pid",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "puuid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatParticipants"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get specific participant in a conversation",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      },
      "put": {
        "operationId": "PutChatV5Participants",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatParticipantEdit"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "edit"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "edit a player to mute or unmute them, across all conversations",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v5/participants/{domain}": {
      "get": {
        "operationId": "GetChatV5ParticipantsByDomain",
        "parameters": [
          {
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatParticipants"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get conversations by domain (optional query arg: cid)",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      }
    },
    "/chat/v6/conversations": {
      "delete": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "operationId": "DeleteChatV6Conversations",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoCid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete or leave a conversation",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      },
      "get": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "operationId": "GetChatV6Conversations",
        "parameters": [
          {
            "in": "query",
            "name": "cid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get a conversation by cid",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "post": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "operationId": "PostChatV6Conversations",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoJoinFederated"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "convo"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Create or join a conversation",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      },
      "put": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "operationId": "PutChatV6Conversations",
        "parameters": [
          {
            "in": "header",
            "name": "rchat-blocking",
            "required": false,
            "type": "boolean"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoUpdate"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "update"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Edit conversation",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      }
    },
    "/chat/v6/conversations/active": {
      "delete": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "operationId": "DeleteChatV6ConversationsActive",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Clear active conversation",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      },
      "get": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "operationId": "GetChatV6ConversationsActive",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get active conversation",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "put": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "operationId": "PutChatV6ConversationsActive",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatActiveConvo"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "convo"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Set active conversation",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      }
    },
    "/chat/v6/conversations/read": {
      "post": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "operationId": "PostChatV6ConversationsRead",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoCid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Mark conversation as read",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Deprecated"
        ]
      }
    },
    "/chat/v6/conversations/{domain}": {
      "get": {
        "description": "Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "operationId": "GetChatV6ConversationsByDomain",
        "parameters": [
          {
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get conversations by domain (optional query arg: cid)",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable",
          "Deprecated"
        ]
      }
    },
    "/chat/v6/friendrequests": {
      "delete": {
        "operationId": "DeleteChatV6Friendrequests",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequestPuuid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Remove or decline friend request",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      },
      "get": {
        "description": "**Response:** named requests root object: a flat list of friend request property groups with 'puuid' and GnT info inside (could have zero or more entries in list):\n\n```\n{\n  \"requests\": [\n    {\n      \"gameName\":     \"[friend gameName]\",\n      \"tagLine\":      \"[friend tagLine]\",\n      \"note\":         \"[friend note]\",     // Can be set to contain information about the friend request. (ex. recofriender saves the player name from social media here)\n      \"puuid\":        \"[friend puuid]\",\n      \"subscription\": \"pending_out\"        //either \"pending_out\" or \"pending_in\" (sent or received request)\n    }\n  ]\n}\n```\n",
        "operationId": "GetChatV6Friendrequests",
        "parameters": [
          {
            "in": "query",
            "name": "puuid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFriendRequestListPuuid"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get friend requests",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      },
      "post": {
        "operationId": "PostChatV6Friendrequests",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendRequestPost"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFriendRequestListPuuid"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Add friend request / invite friend",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v6/messages": {
      "delete": {
        "operationId": "DeleteChatV6Messages",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoCid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Clear conversation message history",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      },
      "get": {
        "description": "**Response**: named messages root object: a flat list of message property groups (could have zero or more entries):\n\n```\n{ \"messages\": [\n                  { \"body\": \"[message]\",            //actual text of this message\n                    \"pid\":  \"[{pid}]\",              //pid of sender\n                    \"name\": \"[name]\",               //name of sender\n                    \"ts\":   \"[timestamp]\",          //integer value: milliseconds UTC\n                    \"cid\":  \"[cid]\",                //conversation id\n                    \"id\":   \"[message id]\",         //unique key within the conversation - for storage\n                    \"read\": true/false,               //whether message has been marked as read or not\n                    \"type\": \"[chat, groupchat, dm]\" //how the message was sent: from friend, from group chat, or a direct message from player in a group chat\n                  },\n                  { \"body\": \"[message]\",\n                    \"pid\":  \"[{pid}]\",\n                    \"ts\":   \"[timestamp]\",\n                    \"cid\":  \"[cid]\",\n                    \"id\":   \"[message id]\",\n                    \"read\": true/false,\n                    \"type\": \"[chat, groupchat, dm]\"\n                  },\n                  ...\n                ]\n}\n```\n\n**NOTE**: messages are sorted by time-stamp, earliest first, latest last\n",
        "operationId": "GetChatV6Messages",
        "parameters": [
          {
            "in": "query",
            "name": "cid",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "mid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatMessageList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get conversation messages",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      },
      "post": {
        "description": "**Sending A Message**\nA conversation id (cid) can be a MUC cid or for peer to peer messages, a player id (pid) can be used as a cid.\n\n```\nPOST /chat/v3/conversations/{cid}/messages      //cid is the conversation id passed as a path argument\n```\nData:\n\n```\n{\n  \"message\": \"[message]\" //the text to send\n  \"type\"   : \"[chat, groupchat, dm]\"\n}\n```\nAdditional notes:\n\n* type - used to specify the type of message (inferred from conversation type if left blank)\n  * chat: for P2P messages with friends\n  * groupchat: for group messages within a group chat\n  * dm: for Direct Messages with somebody in a group chat with you, or with a friend\n\nAs players post messages to a conversation, chat notifies on REST in this order:\n\n* /chat/v3/conversations/\n  * with updated data:  \"unread_count\" and the last message ID in the conversation\n* /chat/v3/conversations/{cid}/messages\n  * a list of new messages for the conversation (earliest first, latest last, but many times just one new message)\n\n**Direct Messages (private messages within a group chat)**\n\nPrivate messages between players that are not friends are possible, and this messaging is always tied to a JWT authenticated group chat (MUC) that both players are a part of. The MUC they are a part of has its own conversation-id (cid) and the private conversation between participants includes that cid in its derived cid.  For example if players \"Brad\" and \"Sue\" are both in MUC \"lobby01@league.pvp.net\" and Brad sends a direct message to Sue, then his client will...\n\n```\nPOST /chat/v3/conversations/{cid}/messages      //where cid = \"lobby01@league.pvp.net/Sue\"\n```\nNOTE: all {cid} values should be URL encoded, so the example cid when sent url encoded is \"lobby01%40league.pvp.net%2FSue\"\n\nData:\n\n```\n{\n  \"message\": \"[message]\" //the text to send\n  \"type\"   : \"dm\"\n}      \n```\nAdditional notes:\n\n* The conversation object (and child objects like messages) from Brad's perspective will be at: /chat/v3/conversations/lobby01%40league.pvp.net%2FSue\n* The conversation from Sue's perspective will be at:  /chat/v3/conversations/lobby01%40league.pvp.net%2FBrad\n* All operations (GET participants, GET messages, POST messages, etc) are the same as regular conversations\n* for direct messaging, the conversation \"type\" and the message \"type\" will always be \"dm\" \n",
        "operationId": "PostChatV6Messages",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessagePost"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "message"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatMessageList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Send a new chat message to a room or individual",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v6/messages/{domain}": {
      "get": {
        "operationId": "GetChatV6MessagesByDomain",
        "parameters": [
          {
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatMessageList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get messages by domain (optional query args: cid &/or mid)",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      }
    },
    "/chat/v7/conversations": {
      "delete": {
        "operationId": "DeleteChatV7Conversations",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoCid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete or leave a conversation",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      },
      "get": {
        "operationId": "GetChatV7Conversations",
        "parameters": [
          {
            "in": "query",
            "name": "cid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get a conversation by cid",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      },
      "post": {
        "operationId": "PostChatV7Conversations",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoJoinFederated"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "convo"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Create or join a conversation",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      },
      "put": {
        "operationId": "PutChatV7Conversations",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoUpdate"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "update"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Edit conversation",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v7/conversations/active": {
      "delete": {
        "operationId": "DeleteChatV7ConversationsActive",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Clear active conversation",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      },
      "get": {
        "operationId": "GetChatV7ConversationsActive",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get active conversation",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      },
      "put": {
        "operationId": "PutChatV7ConversationsActive",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatActiveConvo"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "convo"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Set active conversation",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v7/conversations/read": {
      "post": {
        "operationId": "PostChatV7ConversationsRead",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoCid"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Mark conversation as read",
        "tags": [
          "Plugins",
          "Plugin chat"
        ]
      }
    },
    "/chat/v7/conversations/{domain}": {
      "get": {
        "operationId": "GetChatV7ConversationsByDomain",
        "parameters": [
          {
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get conversations by domain (optional query arg: cid)",
        "tags": [
          "Plugins",
          "Plugin chat",
          "Subscribable"
        ]
      }
    },
    "/client-config/v1/authorization": {
      "delete": {
        "operationId": "DeleteClientConfigV1Authorization",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Removes the authorization. Triggers revocation of player configuration.",
        "tags": [
          "Plugins",
          "Plugin client-config",
          "Internal"
        ]
      },
      "put": {
        "operationId": "PutClientConfigV1Authorization",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientConfigRiotClientAuthAuthorization"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "update"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Updates the authorization information for this plugin. Pushed by the ClientConfigDepInjector. If this is the first authorization of session, triggers an initial fetch of player configuration.",
        "tags": [
          "Plugins",
          "Plugin client-config",
          "Internal"
        ]
      }
    },
    "/client-config/v1/config": {
      "get": {
        "operationId": "GetClientConfigV1Config",
        "parameters": [
          {
            "enum": [
              "public",
              "player"
            ],
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "app",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "version",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "patchline",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "namespace",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the configuration for the application. If config is not already cached locally, will make a blocking external request.",
        "tags": [
          "Plugins",
          "Plugin client-config"
        ]
      }
    },
    "/client-config/v1/config/{name}": {
      "get": {
        "operationId": "GetClientConfigV1ConfigByName",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "public",
              "player"
            ],
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "app",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "version",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "patchline",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the single configuration value. If config is not already cached locally, will make a blocking external request.",
        "tags": [
          "Plugins",
          "Plugin client-config"
        ]
      }
    },
    "/client-config/v1/refresh-config-status": {
      "put": {
        "operationId": "PutClientConfigV1RefreshConfigStatus",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Refresh config status.",
        "tags": [
          "Plugins",
          "Plugin client-config",
          "Internal"
        ]
      }
    },
    "/client-config/v1/sessions": {
      "put": {
        "operationId": "PutClientConfigV1Sessions",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientConfigSessionsUpdate"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "update"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Updates the cached sessions.",
        "tags": [
          "Plugins",
          "Plugin client-config",
          "Internal"
        ]
      }
    },
    "/client-config/v1/status/{type}": {
      "get": {
        "operationId": "GetClientConfigV1StatusByType",
        "parameters": [
          {
            "enum": [
              "public",
              "player"
            ],
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientConfigConfigStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the status for the given config type which primarily indicates if the config type is ready for use.",
        "tags": [
          "Plugins",
          "Plugin client-config",
          "Subscribable"
        ]
      }
    },
    "/client-config/v1/url": {
      "get": {
        "operationId": "GetClientConfigV1Url",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the URL of the external service",
        "tags": [
          "Plugins",
          "Plugin client-config"
        ]
      }
    },
    "/client-config/v2/config/{name}": {
      "get": {
        "description": "Returns an individual configuration field for the requesting application. Both Public and Player types are checked. Subscribing to a configuration field that does not exist results in event UPDATE notifications with an `BindingProperty::Empty` data field. If the receiving module intends to handle the does-not-exist case, the event handler should accept a BindingProperty, not a concrete resource type. \n\n* This call does not block. If config is not already cached locally, an async request will be dispatched.\n\n* If configuration has not yet been fetched, an HTTP 202 is returned. When the configuration is available, a resource notification will be sent to subscribers.\n\n* Configuration is automatically refreshed on state change (login, logout, or notification of change), and apps may be notified by subscribing to this endpoint.\n\n* Connecting game applications will have product information automatically applied to outgoing configuration requests (i.e. app name, version, patchline). This allows configuration overrides to be applied specifically for the app.\n\nResponse codes:\n- 200 If the field exists. The body will be the configuration value.\n- 202 If configuration has not yet been fetched, and updates can be received via subscription notifications.\n- 204 If the field does not exist, and all configuration has been successfully fetched.",
        "operationId": "GetClientConfigV2ConfigByName",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Non-blocking request for a specific configuration field.",
        "tags": [
          "Plugins",
          "Plugin client-config",
          "Subscribable"
        ]
      }
    },
    "/client-config/v2/entitlements-token": {
      "delete": {
        "operationId": "DeleteClientConfigV2EntitlementsToken",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Deletes the entitlements token, if set. Triggers revocation of player configuration.",
        "tags": [
          "Plugins",
          "Plugin client-config",
          "Internal"
        ]
      },
      "put": {
        "operationId": "PutClientConfigV2EntitlementsToken",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientConfigTokenV2"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "update"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Accepts updated entitlements token. Pushed by the ClientConfigDepInjector. Changes in entitlements trigger refresh of player configuration.",
        "tags": [
          "Plugins",
          "Plugin client-config",
          "Internal"
        ]
      }
    },
    "/client-config/v2/namespace-changes": {
      "put": {
        "operationId": "PutClientConfigV2NamespaceChanges",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientConfigConfigNamespaceUpdate"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "namespaces"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Refresh config status.",
        "tags": [
          "Plugins",
          "Plugin client-config",
          "Internal"
        ]
      }
    },
    "/client-config/v2/namespace/{namespace}": {
      "get": {
        "description": "Returns the configuration for the requesting application in the given namespace for both Public and Player types.\n\n* This call does not block. If config is not already cached locally, an async request will be dispatched.\n\n* If configuration has not yet been fetched, an HTTP 202 is returned. When the configuration is available, a resource notification will be sent to subscribers.\n\n* Configuration is automatically refreshed on state change (login, logout, or notification of change), and apps may be notified by subscribing to this endpoint.\n\n* Connecting game applications will have product information automatically applied to outgoing configuration requests (i.e. app name, version, patchline). This allows configuration overrides to be applied specifically for the app.\n\n",
        "operationId": "GetClientConfigV2NamespaceByNamespace",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Non-blocking request for public+player configurations in a namespace.",
        "tags": [
          "Plugins",
          "Plugin client-config",
          "Subscribable"
        ]
      }
    },
    "/client-config/v2/namespace/{namespace}/player": {
      "get": {
        "description": "Returns the *player* configuration for the requesting application in the given namespace.\n\n* This call does not block. If config is not already cached locally, an async request will be dispatched.\n\n* If configuration has not yet been fetched, an HTTP 202 is returned. When the configuration is available, a resource notification will be sent to subscribers.\n\n* Configuration is automatically refreshed on state change (login, logout, or notification of change), and apps may be notified by subscribing to this endpoint.\n\n* Connecting game applications will have product information automatically applied to outgoing configuration requests (i.e. app name, version, patchline). This allows configuration overrides to be applied specifically for the app.\n\n* 'Player' configuration will have a delete notification sent to subscribers on logout.\n\n",
        "operationId": "GetClientConfigV2NamespaceByNamespacePlayer",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Non-blocking request for 'player' configurations in a namespace.",
        "tags": [
          "Plugins",
          "Plugin client-config",
          "Subscribable"
        ]
      }
    },
    "/client-config/v2/namespace/{namespace}/public": {
      "get": {
        "description": "Returns the *public* configuration for the requesting application in the given namespace.\n\n* This call does not block. If config is not already cached locally, an async request will be dispatched.\n\n* If configuration has not yet been fetched, an HTTP 202 is returned. When the configuration is available, a resource notification will be sent to subscribers.\n\n* Configuration is automatically refreshed on state change (login, logout, or notification of change), and apps may be notified by subscribing to this endpoint.\n\n* Connecting game applications will have product information automatically applied to outgoing configuration requests (i.e. app name, version, patchline). This allows configuration overrides to be applied specifically for the app.\n\n",
        "operationId": "GetClientConfigV2NamespaceByNamespacePublic",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Non-blocking request for 'public' configurations in a namespace.",
        "tags": [
          "Plugins",
          "Plugin client-config",
          "Subscribable"
        ]
      }
    },
    "/client-feature-flags/v1/debug/all-subscribed-flags": {
      "get": {
        "description": "*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nReturns the keys and values of all feature flags that are currently subscribed -- that is, in active use by code.",
        "operationId": "GetClientFeatureFlagsV1DebugAllSubscribedFlags",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns all the feature flags that are currently subscribed.",
        "tags": [
          "Plugins",
          "Plugin client-feature-flags",
          "Subscribable",
          "Internal"
        ]
      }
    },
    "/client-feature-flags/v1/debug/mock-data": {
      "get": {
        "description": "*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\n",
        "operationId": "GetClientFeatureFlagsV1DebugMockData",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientFeatureFlagsConfigurationSource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves the current set of mock data for the plugin.",
        "tags": [
          "Plugins",
          "Plugin client-feature-flags",
          "Internal"
        ]
      },
      "put": {
        "description": "*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nThe entire data set is replaced in one call; partial updates are not supported. The best way to edit the current set of data is to use `GET /debug/mock-data`, modify the result, and `PUT` using this endpoint.\n\nSome minor fixups are performed with the provided data to ensure it is consistent. The plugin treats this as a 'oh hey, there is new data for client-config' event, and behaves appropriately.",
        "operationId": "PutClientFeatureFlagsV1DebugMockData",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientFeatureFlagsConfigurationSource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "in"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Sets the current set of mock data for the plugin.",
        "tags": [
          "Plugins",
          "Plugin client-feature-flags",
          "Internal"
        ]
      }
    },
    "/client-feature-flags/v1/debug/mock-mode": {
      "delete": {
        "description": "*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nWhen leaving mock mode, all data is refreshed from client-config and restored to normal.",
        "operationId": "DeleteClientFeatureFlagsV1DebugMockMode",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Leaves mock mode, and deletes mock data.",
        "tags": [
          "Plugins",
          "Plugin client-feature-flags",
          "Internal"
        ]
      },
      "get": {
        "description": "*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nThe return type is a boolean -- `true` indicates that plugin data is currently being mocked.",
        "operationId": "GetClientFeatureFlagsV1DebugMockMode",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns whether the plugin is in mock mode or not.",
        "tags": [
          "Plugins",
          "Plugin client-feature-flags",
          "Internal"
        ]
      },
      "put": {
        "description": "*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nWhen entering mock mode, the current data set from client-config is copied, and further updates from client-config are ignored. The plugin otherwise tries to behave as it would normally.\n\nUse the `/debug/mock-data` endpoint to get/set mocked data in this mode.",
        "operationId": "PutClientFeatureFlagsV1DebugMockMode",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Enters mock mode, which allows using fake client-config data.",
        "tags": [
          "Plugins",
          "Plugin client-feature-flags",
          "Internal"
        ]
      }
    },
    "/client-feature-flags/v1/debug/overrides/flags": {
      "get": {
        "description": "*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nRetrieves the names and values of all currently set overrides.",
        "operationId": "GetClientFeatureFlagsV1DebugOverridesFlags",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves the values of all overridden flags.",
        "tags": [
          "Plugins",
          "Plugin client-feature-flags",
          "Internal"
        ]
      }
    },
    "/client-feature-flags/v1/debug/overrides/flags/{namespace}/{flag}": {
      "delete": {
        "description": "*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nRemoves the override for the specified feature flag. The value of the flag will immediately reflect that being reported by client-config.",
        "operationId": "DeleteClientFeatureFlagsV1DebugOverridesFlagsByNamespaceByFlag",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "flag",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Removes an override for a feature flag.",
        "tags": [
          "Plugins",
          "Plugin client-feature-flags",
          "Internal"
        ]
      },
      "put": {
        "description": "*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nForcibly sets the value of a particular feature flag. The override will be in place until a subsequent `DELETE` on the override.",
        "operationId": "PutClientFeatureFlagsV1DebugOverridesFlagsByNamespaceByFlag",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "flag",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "value"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Forcibly sets the value of a particular feature flag.",
        "tags": [
          "Plugins",
          "Plugin client-feature-flags",
          "Internal"
        ]
      }
    },
    "/client-feature-flags/v1/flags/{namespace}/{flag}": {
      "get": {
        "description": "*Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nRetrieves the value of a specific feature flag. Implicitly subscribes, and updates to the feature flag will be broadcast.\n\nFlags which are not currently defined (or entitled) will always return `false` as the default value.",
        "operationId": "GetClientFeatureFlagsV1FlagsByNamespaceByFlag",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "flag",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves the value of a specific feature flag.",
        "tags": [
          "Plugins",
          "Plugin client-feature-flags",
          "Subscribable"
        ]
      }
    },
    "/cookie-jar/v1/cookies": {
      "delete": {
        "operationId": "DeleteCookieJarV1Cookies",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CookieJarCookie"
                },
                "type": "array"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "cookies"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete existing cookies.",
        "tags": [
          "Plugins",
          "Plugin cookie-jar",
          "Internal"
        ]
      },
      "get": {
        "operationId": "GetCookieJarV1Cookies",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CookieJarCookie"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get all cookies.",
        "tags": [
          "Plugins",
          "Plugin cookie-jar"
        ]
      },
      "post": {
        "operationId": "PostCookieJarV1Cookies",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CookieJarCookie"
                },
                "type": "array"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "cookies"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Set new cookies.",
        "tags": [
          "Plugins",
          "Plugin cookie-jar",
          "Internal"
        ]
      }
    },
    "/data-store/v1/install-settings/{path}": {
      "get": {
        "operationId": "GetDataStoreV1InstallSettingsByPath",
        "parameters": [
          {
            "allowReserved": true,
            "description": "The path to the settings key",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the data for the specified key from the install settings.",
        "tags": [
          "data-store"
        ]
      },
      "post": {
        "operationId": "PostDataStoreV1InstallSettingsByPath",
        "parameters": [
          {
            "allowReserved": true,
            "description": "The path to the settings key",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "The data to assign to the key",
          "required": true,
          "x-param-name": "data"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Set the data for the specified key from the install settings.",
        "tags": [
          "data-store"
        ]
      }
    },
    "/data-store/v1/paths": {
      "get": {
        "operationId": "GetDataStoreV1Paths",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPaths"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the data store paths.",
        "tags": [
          "data-store"
        ]
      }
    },
    "/data-store/v1/private-settings/{path}": {
      "get": {
        "operationId": "GetDataStoreV1PrivateSettingsByPath",
        "parameters": [
          {
            "allowReserved": true,
            "description": "The path to the settings key",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the data for the specified key from the private settings.",
        "tags": [
          "data-store"
        ]
      },
      "post": {
        "operationId": "PostDataStoreV1PrivateSettingsByPath",
        "parameters": [
          {
            "allowReserved": true,
            "description": "The path to the settings key",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "The data to assign to the key",
          "required": true,
          "x-param-name": "data"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Set the data for the specified key from the private settings.",
        "tags": [
          "data-store"
        ]
      }
    },
    "/data-store/v1/product-settings/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "operationId": "GetDataStoreV1ProductSettingsProductsByProductIdPatchlinesByPatchlineId",
        "parameters": [
          {
            "description": "The product to get settings for",
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The patchline to get settings for",
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get all settings for the specified product.",
        "tags": [
          "data-store"
        ]
      },
      "post": {
        "operationId": "PostDataStoreV1ProductSettingsProductsByProductIdPatchlinesByPatchlineId",
        "parameters": [
          {
            "description": "The product to modify settings for",
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The patchline to modify settings for",
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "The data to assign to the key",
          "required": true,
          "x-param-name": "data"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Set all settings for the specified product.",
        "tags": [
          "data-store"
        ]
      }
    },
    "/data-store/v1/product-settings/products/{productId}/patchlines/{patchlineId}/{path}": {
      "get": {
        "operationId": "GetDataStoreV1ProductSettingsProductsByProductIdPatchlinesByPatchlineIdByPath",
        "parameters": [
          {
            "description": "The product to get settings for",
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The patchline to get settings for",
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          },
          {
            "allowReserved": true,
            "description": "The path to the settings key",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the data for the specified key from the settings for the specified product.",
        "tags": [
          "data-store"
        ]
      },
      "post": {
        "operationId": "PostDataStoreV1ProductSettingsProductsByProductIdPatchlinesByPatchlineIdByPath",
        "parameters": [
          {
            "description": "The product to modify settings for",
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The patchline to modify settings for",
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          },
          {
            "allowReserved": true,
            "description": "The path to the settings key",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "The data to assign to the key",
          "required": true,
          "x-param-name": "data"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Set the data for the specified key from the settings for the specified product.",
        "tags": [
          "data-store"
        ]
      }
    },
    "/data-store/v1/reload-product-settings/products/{productId}/patchlines/{patchlineId}": {
      "post": {
        "operationId": "PostDataStoreV1ReloadProductSettingsProductsByProductIdPatchlinesByPatchlineId",
        "parameters": [
          {
            "description": "The product to reload settings for",
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The patchline to reload settings for",
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Reload all settings for the specified product.",
        "tags": [
          "data-store"
        ]
      }
    },
    "/data-store/v1/system-settings/{path}": {
      "get": {
        "operationId": "GetDataStoreV1SystemSettingsByPath",
        "parameters": [
          {
            "allowReserved": true,
            "description": "The path to the settings key",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the setting for the specified key. This API is provided for host applications.",
        "tags": [
          "data-store"
        ]
      }
    },
    "/disambiguation/v1/magic-link": {
      "post": {
        "description": "This API endpoint is deprecated and will be removed by 3/1/2023. Please do not use.",
        "operationId": "PostDisambiguationV1MagicLink",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves the magic disambiguation link for the current auth'd account.",
        "tags": [
          "Plugins",
          "Plugin disambiguation",
          "Deprecated"
        ]
      }
    },
    "/entitlements/v1/token": {
      "get": {
        "description": "Callers should prefer /v2/token in order to acquire both access and ID token\n\nReturns HTTP 400 if the token is not ready.",
        "operationId": "GetEntitlementsV1Token",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementsToken"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get V1 entitlements token, which contains the RSO access token.",
        "tags": [
          "Plugins",
          "Plugin entitlements",
          "Subscribable"
        ]
      }
    },
    "/entitlements/v2/token": {
      "get": {
        "description": "'Authorization' pertains to the Riot Client application on desktop platforms and the host application for the embedded SDK.\n\nError codes:\n- Returns HTTP 404 if the token is not ready. Likely due to no authentication available.\n- 503 if Entitlements are disabled for this environment.",
        "operationId": "GetEntitlementsV2Token",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementsTokenV2"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get V2 Entitlements token, which contains the default RSO authorization.",
        "tags": [
          "Plugins",
          "Plugin entitlements",
          "Subscribable"
        ]
      }
    },
    "/eula/v1/agreement": {
      "get": {
        "operationId": "GetEulaV1Agreement",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EulaAgreement"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns an object containing metadata about the most recent published EULA, and a field, 'acceptance', indicating whether the user has accepted this agreement or not. (The 'acceptance' field is accessible separately via the /acceptance endpoint.\n\nWhen the 'acceptance' field is 'WaitingForAllServiceData', we don't have the data for the latest EULA, nor its acceptance state, and all other fields are invalid.",
        "tags": [
          "Plugins",
          "Plugin eula",
          "Subscribable"
        ]
      }
    },
    "/eula/v1/agreement/acceptance": {
      "get": {
        "operationId": "GetEulaV1AgreementAcceptance",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EulaAcceptance"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the acceptance state of the most recent EULA for the current user. Possible values are:\n\n- WaitingForAllServiceData: The user is signed out, we have yet to retrieve client-config, or we are otherwise waiting for data to determine if the user has accepted the latest agreement.\n- AcceptanceRequired: The user has never accepted a EULA, or has not accepted the most recent version.\n- Accepted: The user has accepted the most recent EULA.",
        "tags": [
          "Plugins",
          "Plugin eula",
          "Subscribable"
        ]
      },
      "put": {
        "operationId": "PutEulaV1AgreementAcceptance",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Accepts the most recent EULA for the current user.",
        "tags": [
          "Plugins",
          "Plugin eula"
        ]
      }
    },
    "/eula/v1/agreement/content": {
      "get": {
        "operationId": "GetEulaV1AgreementContent",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the content of the current version EULA.",
        "tags": [
          "Plugins",
          "Plugin eula",
          "Subscribable"
        ]
      }
    },
    "/eula/v1/debug/agreement/force-requirement": {
      "post": {
        "operationId": "PostEulaV1DebugAgreementForceRequirement",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Forces client into requiring acceptance",
        "tags": [
          "Plugins",
          "Plugin eula",
          "Internal"
        ]
      }
    },
    "/eula/v1/debug/agreement/short-agreement-content": {
      "put": {
        "operationId": "PutEulaV1DebugAgreementShortAgreementContent",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Simulate short agreement content. This is disabled in public builds.",
        "tags": [
          "Plugins",
          "Plugin eula",
          "Internal"
        ]
      }
    },
    "/eula/v1/external-legal-links": {
      "get": {
        "operationId": "GetEulaV1ExternalLegalLinks",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EulaExternalLegalLinks"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the web URLs for Terms of Service and Privacy Noticeaccording to the most appropriate locale for the agreement you are bound to",
        "tags": [
          "Plugins",
          "Plugin eula",
          "Subscribable"
        ]
      }
    },
    "/eula/v1/privacy-policy": {
      "get": {
        "operationId": "GetEulaV1PrivacyPolicy",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EulaPrivacyPolicy"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the current privacy policy data.",
        "tags": [
          "Plugins",
          "Plugin eula",
          "Subscribable"
        ]
      }
    },
    "/eula/v1/privacy-policy/content": {
      "get": {
        "operationId": "GetEulaV1PrivacyPolicyContent",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the content of the current privacy policy.",
        "tags": [
          "Plugins",
          "Plugin eula",
          "Subscribable"
        ]
      }
    },
    "/eula/v1/product-context": {
      "delete": {
        "operationId": "DeleteEulaV1ProductContext",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Resets the current product context.",
        "tags": [
          "Plugins",
          "Plugin eula"
        ]
      },
      "get": {
        "operationId": "GetEulaV1ProductContext",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EulaProductContext"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Gets the current product context.",
        "tags": [
          "Plugins",
          "Plugin eula",
          "Subscribable"
        ]
      },
      "put": {
        "operationId": "PutEulaV1ProductContext",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EulaProductContext"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "ProductContext"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Set the current product context.",
        "tags": [
          "Plugins",
          "Plugin eula"
        ]
      }
    },
    "/first-party-fulfillment/v1/fulfill": {
      "post": {
        "description": "\n**Description**\n\nThis API will check if the user has made any purchases on the first party store and will attempt to fulfill them.\nThis should typically be called when the game is launched or resumed.\n\nNOTE: Currently, this endpoint only supports PlayStation 4 and PlayStation 5 fulfillment. Xbox and Switch support will be added in the future.\n\n** Request Arguments **\n\nRequest Body:\n* `firstPartyAuthToken`: Authentication token for the first party platform required to perform fulfillment.\n    * On Nintendo Switch, provide the NSA ID token if available. Otherwise, RiotGamesApi will fetch the NSA ID token itself.\n    * On Playstation 4 and Playstation 5, provide an NP auth code.\n    * On Xbox, no token is required and an empty string can be provided.\n* `fulfillmentId`: UUID that identifies a unique fulfillment attempt.\n* `fulfillmentReason`: The reason why the fulfillment attempt was made. Possible options are listed below:\n    * `GameLaunched`: Fulfillment was initiated because a purchase may have occurred while the game was not running.\n    * `GameReturnedToForeground`: Fulfillment was initiated because a purchase may have occurred while the game was in the background.\n    * `PurchaseCompleted`: Fulfillment was initiated because a purchase was completed (likely from the in-game store).\n    * `Other`: DO NOT USE without consulting the SDK Features team first. This is a fallback reason for why a fulfillment was initiated if it\n      is not covered by any of the existing reasons. However, you should only use this if SDK Features is not able to add a reason that covers\n      your use case before you need to use it and once SDK Features does add the reason, you are expected to update to using it as soon as it\n      has been made available in the next SDK release.\n\n** Returns **\n\nResponse Body:\n* `FulfillmentResponse` Object:\n    * `fulfillmentRequired`: Bool indicating whether the player owned anything that needed to be fulfilled.\n    * `fulfilledItems`: An `ItemFulfillmentSuccessInfo` object\n        * `itemId`: A string that identifies the item that was fulfilled.\n        * `quantity`: An integer representing how many of the item was fulfilled.\n    * `unfulfilledItems`: An `ItemFulfillmentFailureInfo` object\n        * `itemId`: A string that identifies the item that was unable to be fulfilled.\n        * `quantity`: An integer representing how many of the item could not be fulfilled.\n        * `reason`: A string describing why the item could not be fulfilled.\n",
        "operationId": "PostFirstPartyFulfillmentV1Fulfill",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Initiate a fulfillment attempt",
        "tags": [
          "Plugins",
          "Plugin first-party-fulfillment"
        ]
      }
    },
    "/first-party-fulfillment/v1/mock-api/state": {
      "put": {
        "description": "\n**Description**\n\nSets whether or not the plugin should use a mock fulfillment API or not, and if it should, how the mock API should behave.\n\n**Argument**\n\n* `state`: String value determining if the mock fulfillment API should be used, and if so, how it will behave. Possible values are listed below:\n    * `NoMock`: The plugin will not use the mock API and will toggle back to using the fulfillment API it was initialized with.\n    * `NoFulfillmentRequired`: The plugin is set to use the mock API. The mock API will return that no fulfillment is required.\n    * `FirstPartyQueryFailed`: The plugin is set to use the mock API. The mock API will return an error when attempting to query if there are\n      items to fulfill.\n    * `FirstPartyAuthorizationFailed`: The plugin is set to use the mock API. The mock API will return an error when attempting to fetch the\n      first party authorization.\n    * `FirstPartyQueryByRiotPayFailed`: The plugin is set to use the mock API. The mock API will return an error indicating RiotPay could not\n      call the first party services to verify the fulfillment request.\n    * `RiotPayFulfillmentFailed`: The plugin is set to use the mock API. The mock API will return an error indicating RiotPay failed to complete\n      the fulfillment request entirely.\n    * `PartialFulfillmentCompleted`: The plugin is set to use the mock API. The mock API will return a response indicating that RiotPay managed\n      to fulfill some items, but failed to fulfill others.\n    * `Success`: The plugin is set to use the mock API. The mock API will return as if all items have been fulfilled successfully.\n",
        "operationId": "PutFirstPartyFulfillmentV1MockApiState",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentMockApiState"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "state"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Set whether the plugin should use a mock fulfillment API or not and if so, how the mock API should behave",
        "tags": [
          "Plugins",
          "Plugin first-party-fulfillment",
          "Internal"
        ]
      }
    },
    "/friends/v2/make-platform-blocks-riot-blocks": {
      "get": {
        "description": "\n**Description**\nThis endpoint queries the console for blocked users, looks them up in the Riot system, and checks if all of them are blocked in the Riot ecosystem.\nIf not, the blocks are 'promoted' to Riot blocks. Game teams are required to determined where this endpoint should be invoked in their app lifecycle.\n",
        "operationId": "GetFriendsV2MakePlatformBlocksRiotBlocks",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Request a synchronization of blocked users from console to Riot ecosystem",
        "tags": [
          "Plugins",
          "Plugin friends"
        ]
      }
    },
    "/friends/v2/mock-api/state": {
      "put": {
        "description": "\n**Description**\n-- To be filled out when Mock implementation is done.\nSDKFEAT-1393: [Mock] Get Console Blocked User List\n",
        "operationId": "PutFriendsV2MockApiState",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FriendsFriendsV2MockApiState"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "state"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Set whether the plugin should use a mock friends API or not and if so, how the mock API should behave",
        "tags": [
          "Plugins",
          "Plugin friends",
          "Internal"
        ]
      }
    },
    "/friends/v2/namesets-for-puuid/{puuid}": {
      "get": {
        "description": "\n**Description**\nRetrieves the namesets for the PUUID provided.\nA Nameset contains the user's name on the given platform.\nExample: SwitchNameset.name would be the Switch username associated with the user's PUUID on Switch\n\n** URL Argument **\n\n\"puuid\" - PUUIDs to retrieve namesets for\n    \nResponse Body:\n\nNamesetsResponseElement:\n    \"puuid\" - PUUID (String)\n    \"switchNameset\" - A SwitchNameset\n    \"playstationNameset\" - A PlaystationNameset\n    \"xboxNameset\" - An XboxNameset\n    \"alias\" - A RiotAlias\n    \"error\" - A String containing any errors\n\nSwitchNameset:\n    \"name\" - A String with the Switch name associated to the requested PUUID\n\nPlaystationNameset:\n    \"name\" - A String with the Playstation name associated to the requested PUUID\n\nXboxNameset:\n    \"name\" - A String with the Xbox name associated to the requested PUUID\n\nRiotAlias:\n    \"gameName\" - The users Game Name (String)\n    \"tagLine\" - The users Tag Line (String)\n\n",
        "operationId": "GetFriendsV2NamesetsForPuuidByPuuid",
        "parameters": [
          {
            "in": "path",
            "name": "puuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendsFriendsV1NamesetsResponseElement"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves the namesets for a single PUUID",
        "tags": [
          "Plugins",
          "Plugin friends"
        ]
      }
    },
    "/friends/v2/namesets-for-puuids": {
      "post": {
        "description": "\n**Description**\nRetrieves the namesets for each PUUID provided.\nA Nameset contains the user's name on the given platform.\nExample: SwitchNameset.name would be the Switch username associated with the user's PUUID on Switch\n\n** Request Arguments **\n\nRequest Body Object:\nNamesetsRequest Object:\n    \"puuids\" - A list of PUUIDs to retrieve namesets for\n    \n\nResponse Body:\n    \"namesets\" - A list of NamesetsResponseElements\n\n\n\nNamesetsResponseElement:\n    \"puuid\" - PUUID (String)\n    \"switchNameset\" - A SwitchNameset\n    \"playstationNameset\" - A PlaystationNameset\n    \"xboxNameset\" - An XboxNameset\n    \"alias\" - A RiotAlias\n    \"error\" - A String containing any errors\n\nSwitchNameset:\n    \"name\" - A String with the Switch name associated to the requested PUUID\n\nPlaystationNameset:\n    \"name\" - A String with the Playstation name associated to the requested PUUID\n\nXboxNameset:\n    \"name\" - A String with the Xbox name associated to the requested PUUID\n\nRiotAlias:\n    \"gameName\" - The users Game Name (String)\n    \"tagLine\" - The users Tag Line (String)\n\n",
        "operationId": "PostFriendsV2NamesetsForPuuids",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FriendsFriendsV1NamesetsRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendsFriendsV1NamesetsResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves the namesets for each PUUID provided",
        "tags": [
          "Plugins",
          "Plugin friends"
        ]
      }
    },
    "/friends/v2/puuids-for-consoleids": {
      "post": {
        "description": "\n**Description**\nRetrieves the PUUIDs for each Console ID provided.\n\n** Request Arguments **\n\nRequest Body Object:\nConsoleIdsToPuuidsRequest Object:\n    \"consoleIds\" - A list of console IDs to retrieve PUUIDs for\n    \"environment\" - A String name for the platform environment (e.g. \"sp-int\")\n\nResponse Body:\n    \"response\" - A list of ConsoleIdToPuuidResponseElements\n\n\nConsoleIdToPuuidResponseElement:\n    \"puuid\" - The PUUID associated with the Console ID\n    \"providerId\" - A String ID for the provider (e.g. as \"123abc123\")\n    \"error\" - A String containing any errors (e.g. \"No matching account found.\")\n\n",
        "operationId": "PostFriendsV2PuuidsForConsoleids",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "consoleIds"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendsFriendsConsoleIdsToPuuidsResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves the PUUIDs for each Console ID provided",
        "tags": [
          "Plugins",
          "Plugin friends"
        ]
      }
    },
    "/ga-restriction/v1/debug/caller-id/mock-id": {
      "delete": {
        "description": "Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "operationId": "DeleteGaRestrictionV1DebugCallerIdMockId",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Stops mocking the caller ID for Swagger calls",
        "tags": [
          "Plugins",
          "Plugin ga-restriction",
          "Internal"
        ]
      },
      "get": {
        "description": "Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "operationId": "GetGaRestrictionV1DebugCallerIdMockId",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GaRestrictionPluginCallerId_MockCallerId"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Checks the caller ID in use when APIs are called from Swagger",
        "tags": [
          "Plugins",
          "Plugin ga-restriction",
          "Internal"
        ]
      },
      "put": {
        "description": "Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "operationId": "PutGaRestrictionV1DebugCallerIdMockId",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GaRestrictionPluginCallerId_MockCallerId"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "callerId"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Sets the caller ID to use when calling this plugin from Swagger",
        "tags": [
          "Plugins",
          "Plugin ga-restriction",
          "Internal"
        ]
      }
    },
    "/ga-restriction/v1/debug/penalty-notifications-data": {
      "delete": {
        "operationId": "DeleteGaRestrictionV1DebugPenaltyNotificationsData",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete all penalty notifications for all products.",
        "tags": [
          "Plugins",
          "Plugin ga-restriction",
          "Internal"
        ]
      },
      "get": {
        "operationId": "GetGaRestrictionV1DebugPenaltyNotificationsData",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationsByMessageId"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the raw data for the cached Penalty Notifications that this plugin received. This intended for debugging only.",
        "tags": [
          "Plugins",
          "Plugin ga-restriction",
          "Internal"
        ]
      }
    },
    "/ga-restriction/v1/debug/penalty-notifications-data/{messageId}": {
      "delete": {
        "operationId": "DeleteGaRestrictionV1DebugPenaltyNotificationsDataByMessageId",
        "parameters": [
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete the penalty notification for a specific message ID. Note that you'll still be able to see the message until your next relog.",
        "tags": [
          "Plugins",
          "Plugin ga-restriction",
          "Internal"
        ]
      },
      "put": {
        "operationId": "PutGaRestrictionV1DebugPenaltyNotificationsDataByMessageId",
        "parameters": [
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GaRestrictionCachedPenaltyNotificationDtoV1"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Add some arbitrary penalty notification. Uses your current callerId's productId. Note that if you acknowledge or delete this message, the plugin will still attempt to tell Mailbox, which may result in an error log.",
        "tags": [
          "Plugins",
          "Plugin ga-restriction",
          "Internal"
        ]
      }
    },
    "/ga-restriction/v1/debug/time": {
      "delete": {
        "operationId": "DeleteGaRestrictionV1DebugTime",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Deletes the current mocked time, so that we use the real time again.",
        "tags": [
          "Plugins",
          "Plugin ga-restriction",
          "Internal"
        ]
      },
      "get": {
        "operationId": "GetGaRestrictionV1DebugTime",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Check what the plugin is using as the current time. If the time is being mocked, uses the mock. Otherwise uses the real current time. Uses milliseconds since epoch.",
        "tags": [
          "Plugins",
          "Plugin ga-restriction",
          "Internal"
        ]
      }
    },
    "/ga-restriction/v1/debug/time/{millisSinceEpoch}": {
      "put": {
        "operationId": "PutGaRestrictionV1DebugTimeByMillisSinceEpoch",
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "minimum": 0,
            "name": "millisSinceEpoch",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Mock the current time. This can help you debug if the plugin automatically deletes messages. Note that we only try to delete messages when we receive or acknowledge messages. Uses milliseconds since epoch.",
        "tags": [
          "Plugins",
          "Plugin ga-restriction",
          "Internal"
        ]
      }
    },
    "/ga-restriction/v1/penalty-notifications": {
      "get": {
        "operationId": "GetGaRestrictionV1PenaltyNotifications",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/GaRestrictionPenaltyNotification"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Provides a list of penalty notifications to show to the player for the callerId.",
        "tags": [
          "Plugins",
          "Plugin ga-restriction",
          "Subscribable"
        ]
      }
    },
    "/ga-restriction/v1/penalty-notifications/{messageId}": {
      "put": {
        "operationId": "PutGaRestrictionV1PenaltyNotificationsByMessageId",
        "parameters": [
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Marks a penalty notification as read. Read messages will still be accessible, but they don't need to be immediately displayed to the player.",
        "tags": [
          "Plugins",
          "Plugin ga-restriction"
        ]
      }
    },
    "/ga-restriction/v1/unread-penalty-notifications": {
      "get": {
        "operationId": "GetGaRestrictionV1UnreadPenaltyNotifications",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/GaRestrictionPenaltyNotification"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Provides a list of unread penalty notifications to show to the player for the callerId.",
        "tags": [
          "Plugins",
          "Plugin ga-restriction",
          "Subscribable"
        ]
      }
    },
    "/ga-warning/v1/debug/caller-id/mock-id": {
      "delete": {
        "description": "Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "operationId": "DeleteGaWarningV1DebugCallerIdMockId",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Stops mocking the caller ID for Swagger calls",
        "tags": [
          "Plugins",
          "Plugin ga-warning",
          "Internal"
        ]
      },
      "get": {
        "description": "Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "operationId": "GetGaWarningV1DebugCallerIdMockId",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GaWarningPluginCallerId_MockCallerId"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Checks the caller ID in use when APIs are called from Swagger",
        "tags": [
          "Plugins",
          "Plugin ga-warning",
          "Internal"
        ]
      },
      "put": {
        "description": "Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "operationId": "PutGaWarningV1DebugCallerIdMockId",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GaWarningPluginCallerId_MockCallerId"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "callerId"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Sets the caller ID to use when calling this plugin from Swagger",
        "tags": [
          "Plugins",
          "Plugin ga-warning",
          "Internal"
        ]
      }
    },
    "/ga-warning/v1/debug/simulate-warning/{category}": {
      "post": {
        "description": "\n**Data**\n\n* `category`: The category is a key used to create the localized message for the player. As an example, `INAPPROPRIATE_TEXT` is the category\nsent when a player was flagged for inappropriate chat. If the category is unrecognized, a fallback message will be used.\n",
        "operationId": "PostGaWarningV1DebugSimulateWarningByCategory",
        "parameters": [
          {
            "in": "path",
            "name": "category",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Simulate sending a game-agnostic warning message to this player with a specific category. Endpoint not available in public builds.",
        "tags": [
          "Plugins",
          "Plugin ga-warning",
          "Internal"
        ]
      }
    },
    "/ga-warning/v1/warnings": {
      "get": {
        "description": "\n**Description**\n\nYou will only get warnings for the current game. To make testing easier, there are debug endpoints on this plugin that allow you to mock your current game.\n\n**Response Body**\n\n* `gaWarningMessage`: Top-level response field. If there are no unacknowledged warnings, this will be empty object `{}`.\nOtherwise it will contain unacknowledged warnings keyed by their ID.\n* `gaWarningMessage.{id}`: Represents a single unacknowledged warning.\n  * `gaWarningMessage.{id}.category`: Category of the warning message--internal string.\n  * `gaWarningMessage.{id}.locale`: Detected locale of player and what locale the message was localized to.\n  * `gaWarningMessage.{id}.message`: Localized message to display to player.\n  * `gaWarningMessage.{id}.title`: Localized message title to display to player.\n  * `gaWarningMessage.{id}.acknowledgeText`: Localized text player must type to acknowledge the warning.\n  * (OPTIONAL) `gaWarningMessage.{id}.seeMoreUrl`: Hyperlink to give players more context about community guidelines. This field and `seeMoreLabel` won't always be present and you should build your UI to account for that.\n  * (OPTIONAL) `gaWarningMessage.{id}.seeMoreLabel`: Label for `seeMoreUrl`. Do not display the raw link, use this label instead. This field and `seeMoreUrl` won't always be present and you should build your UI to account for that.\n\n**Response Codes**\n* `200`: Success.\n* `401`: Player must be logged in.\n",
        "operationId": "GetGaWarningV1Warnings",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GaWarningWarningResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Provides a list of unacknowledged localized game-agnostic warnings to show the player.",
        "tags": [
          "Plugins",
          "Plugin ga-warning",
          "Subscribable"
        ]
      }
    },
    "/ga-warning/v1/warnings/ack": {
      "delete": {
        "operationId": "DeleteGaWarningV1WarningsAck",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Acknowledges all warnings for the current game.",
        "tags": [
          "Plugins",
          "Plugin ga-warning"
        ]
      }
    },
    "/ga-warning/v1/warnings/ack/{id}": {
      "delete": {
        "description": "\n**Description**\n\nAcknowledges warning that has ID with {id}. See GET warnings endpoint for more info on how to find `{id}`.\n\n**Response Codes**\n* `404`: No warning with that ID found.\n* `204`: Warning found and acknowledged (deleted).\n",
        "operationId": "DeleteGaWarningV1WarningsAckById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Acknowledges a specific GA player warning.",
        "tags": [
          "Plugins",
          "Plugin ga-warning"
        ]
      }
    },
    "/game-session/v1/clusters": {
      "get": {
        "operationId": "GetGameSessionV1Clusters",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameSessionGameSessionV1ClusterList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Gets a list of all available clusters. Cluster IDs arrive asynchronously and may not be immediately avaiable. The logic of selecting the optimal cluster for a player is up to the game team.",
        "tags": [
          "Plugins",
          "Plugin game-session",
          "Subscribable"
        ]
      }
    },
    "/game-session/v1/debug/caller-id/mock-id": {
      "delete": {
        "description": "Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "operationId": "DeleteGameSessionV1DebugCallerIdMockId",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Stops mocking the caller ID for Swagger calls",
        "tags": [
          "Plugins",
          "Plugin game-session",
          "Internal"
        ]
      },
      "get": {
        "description": "Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "operationId": "GetGameSessionV1DebugCallerIdMockId",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameSessionPluginCallerId_MockCallerId"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Checks the caller ID in use when APIs are called from Swagger",
        "tags": [
          "Plugins",
          "Plugin game-session",
          "Internal"
        ]
      },
      "put": {
        "description": "Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "operationId": "PutGameSessionV1DebugCallerIdMockId",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameSessionPluginCallerId_MockCallerId"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "callerId"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Sets the caller ID to use when calling this plugin from Swagger",
        "tags": [
          "Plugins",
          "Plugin game-session",
          "Internal"
        ]
      }
    },
    "/game-session/v1/sessions": {
      "post": {
        "description": "Creates a GAPS Session Funnel request that interacts with 1-3 services based on the supplied options. Requests are handle asynchronously and reported by through changes to the `state` property of this resource. Use the generated `id` field as a path parameter to subscribe to this specific funnel instance.\n\nPlayers exiting the funnel will exit with one of several known states indicated by the `message` field of theis resource. Session heartbeats and queue polling are handled transparently, as are server-side kicks.",
        "operationId": "PostGameSessionV1Sessions",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameSessionGameSessionV1GameSessionRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameSessionGameSessionV1GameSessionId"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Creates a request for GAPS login queue, bypass queue, and session services.",
        "tags": [
          "Plugins",
          "Plugin game-session"
        ]
      }
    },
    "/game-session/v1/sessions/{sessionId}": {
      "delete": {
        "operationId": "DeleteGameSessionV1SessionsBySessionId",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Requests to disconnect the player from the session.",
        "tags": [
          "Plugins",
          "Plugin game-session"
        ]
      },
      "get": {
        "operationId": "GetGameSessionV1SessionsBySessionId",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameSessionGameSessionV1GameSessionResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Gets the status of the specified session.",
        "tags": [
          "Plugins",
          "Plugin game-session",
          "Subscribable"
        ]
      }
    },
    "/info-radiator/v1/custom-heartbeat-metric/{name}": {
      "delete": {
        "operationId": "DeleteInfoRadiatorV1CustomHeartbeatMetricByName",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete a custom heartbeat metric, if it exists",
        "tags": [
          "Plugins",
          "Plugin info-radiator"
        ]
      },
      "put": {
        "operationId": "PutInfoRadiatorV1CustomHeartbeatMetricByName",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "value"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Create or update the value of a custom heartbeat metric",
        "tags": [
          "Plugins",
          "Plugin info-radiator"
        ]
      }
    },
    "/info-radiator/v1/time-sample/{phaseName}/end": {
      "post": {
        "operationId": "PostInfoRadiatorV1TimeSampleByPhaseNameEnd",
        "parameters": [
          {
            "in": "path",
            "name": "phaseName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Mark the end of the time phase sample and send an event to Analytics Platform conforming to the `riotclient__TimeSample__v4` schema.",
        "tags": [
          "Plugins",
          "Plugin info-radiator"
        ]
      }
    },
    "/info-radiator/v1/time-sample/{phaseName}/start": {
      "post": {
        "operationId": "PostInfoRadiatorV1TimeSampleByPhaseNameStart",
        "parameters": [
          {
            "in": "path",
            "name": "phaseName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Track the start time for a time phase sample of interest. Call `/info-radiator/v1/time-sample/{phase}/end` to mark the end of the sample.",
        "tags": [
          "Plugins",
          "Plugin info-radiator"
        ]
      }
    },
    "/jwt-authenticator/v1/verify": {
      "post": {
        "operationId": "PostJwtAuthenticatorV1Verify",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JwtAuthenticatorJWTVerifyResource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "JWT"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Verify a JWT",
        "tags": [
          "Plugins",
          "Plugin jwt-authenticator"
        ]
      }
    },
    "/kr-account/config/v1/config": {
      "get": {
        "description": "Debug information allowing the ability to introspect the current plugin config.",
        "operationId": "GetKrAccountConfigV1Config",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KrAccountKrAccountPluginConfig"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "The current plugin configuration.",
        "tags": [
          "Plugins",
          "Plugin kr-account"
        ]
      }
    },
    "/kr-account/promotion/v1/session": {
      "get": {
        "operationId": "GetKrAccountPromotionV1Session",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KrAccountAccountPromotionSession"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get KR account session token for KR Account Promotion flow",
        "tags": [
          "Plugins",
          "Plugin kr-account"
        ]
      }
    },
    "/loyalty/v1/debug/set-loyalty-resource/{pcbId}": {
      "post": {
        "operationId": "PostLoyaltyV1DebugSetLoyaltyResourceByPcbId",
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "pcbId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyV2PCBangInfo"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Sets a loyalty resource for testing purposes - DEBUG ONLY",
        "tags": [
          "Plugins",
          "Plugin loyalty-v2",
          "Internal"
        ]
      }
    },
    "/loyalty/v1/loyalty-resource": {
      "get": {
        "operationId": "GetLoyaltyV1LoyaltyResource",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyV2PCBangInfo"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns loyalty resource including pcbId if player's playing from pcbang or not found exception",
        "tags": [
          "Plugins",
          "Plugin loyalty-v2",
          "Subscribable"
        ]
      }
    },
    "/mailbox/v1/check-new-mail": {
      "get": {
        "description": "\n**Description**\n\nThis API is subscribable and for notifications that new mail is available.\n",
        "operationId": "GetMailboxV1CheckNewMail",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailboxMailboxStatusUpdated"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns if the mailbox has new mail",
        "tags": [
          "Plugins",
          "Plugin mailbox",
          "Subscribable"
        ]
      }
    },
    "/mailbox/v1/check-new-product-mail/{productId}": {
      "get": {
        "description": "\n**Description**\n\nThis API is subscribable and for notifications that new mail is available. This is the internal implementation meant to be used by other plugins.\n\nRequired arguments:\n```\nproductId: A standard [product identifier](https://gh.riotgames.com/shared-static-data/rpg/tree/master/products)\n```\n",
        "operationId": "GetMailboxV1CheckNewProductMailByProductId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailboxMailboxStatusUpdated"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns if the mailbox has new mail",
        "tags": [
          "Plugins",
          "Plugin mailbox",
          "Subscribable",
          "Internal"
        ]
      }
    },
    "/mailbox/v1/debug/caller-id/mock-id": {
      "delete": {
        "description": "Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "operationId": "DeleteMailboxV1DebugCallerIdMockId",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Stops mocking the caller ID for Swagger calls",
        "tags": [
          "Plugins",
          "Plugin mailbox",
          "Internal"
        ]
      },
      "get": {
        "description": "Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "operationId": "GetMailboxV1DebugCallerIdMockId",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailboxPluginCallerId_MockCallerId"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Checks the caller ID in use when APIs are called from Swagger",
        "tags": [
          "Plugins",
          "Plugin mailbox",
          "Internal"
        ]
      },
      "put": {
        "description": "Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "operationId": "PutMailboxV1DebugCallerIdMockId",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailboxPluginCallerId_MockCallerId"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "callerId"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Sets the caller ID to use when calling this plugin from Swagger",
        "tags": [
          "Plugins",
          "Plugin mailbox",
          "Internal"
        ]
      }
    },
    "/mailbox/v1/enabled": {
      "get": {
        "description": "\n**Description**\n\nThis API is subscribable and use to verify the feature is enabled in the current loaded cluster config.\n\n",
        "operationId": "GetMailboxV1Enabled",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns whether or not the mailbox feature is enabled for this environment",
        "tags": [
          "Plugins",
          "Plugin mailbox",
          "Subscribable"
        ]
      }
    },
    "/mailbox/v1/mail": {
      "post": {
        "description": "\n**Description**\n\nThis API allows for retrieving mail and the product ID is inferred.\n\nRequired request parameters:\n```\nincludedStates : A list of message states, like READ or ACKNOWLEDGED, that should be included.\n```\n",
        "operationId": "PostMailboxV1Mail",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailboxRequestMailParameters"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MailboxMail"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns a list of player's mail.",
        "tags": [
          "Plugins",
          "Plugin mailbox"
        ]
      }
    },
    "/mailbox/v1/mail-state": {
      "put": {
        "description": "\n**Description**\n\nAllows marking mail as read or acknowledged -- 'new' is not a valid argument\n\nArgument Options:\n```\nACKNOWLEDGED,\nREAD\n```\n",
        "operationId": "PutMailboxV1MailState",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailboxUpdateMailStateRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the state of a message as read or acknowledged",
        "tags": [
          "Plugins",
          "Plugin mailbox"
        ]
      }
    },
    "/mailbox/v1/mail/{productId}": {
      "post": {
        "description": "\n**Description**\n\nThis API allows for retrieving mail. Here, the productId is required. This is an internal API to be used by other plugins.\n\nRequired arguments:\n```\nproductId: A standard [product identifier](https://gh.riotgames.com/shared-static-data/rpg/tree/master/products)\n```\n",
        "operationId": "PostMailboxV1MailByProductId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailboxRequestMailParameters"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MailboxMail"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Fetch mail for a player on behalf of a product.",
        "tags": [
          "Plugins",
          "Plugin mailbox",
          "Internal"
        ]
      }
    },
    "/mailbox/v1/ready": {
      "get": {
        "description": "\n**Description**\n\nSubscribe to this endpoint to know when it is safe to call other mailbox APIs.\n\nThe result is `true` when all of the following are true: mailbox has been enabled by configuration, the cluster configuration is loaded, player affinity is available, and the player is logged in.\n\nIf the result is `false`, do not attempt to call mailbox APIs.\n\n",
        "operationId": "GetMailboxV1Ready",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns whether or not the mailbox feature is enabled and ready to use for this environment",
        "tags": [
          "Plugins",
          "Plugin mailbox",
          "Subscribable"
        ]
      }
    },
    "/name-check/v1/validate": {
      "get": {
        "description": "This API endpoint is deprecated and will be removed by 3/1/2023. Please do not use.",
        "operationId": "GetNameCheckV1Validate",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NameCheckNameValidationResult"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Verify user input name.",
        "tags": [
          "Plugins",
          "Plugin name-check",
          "Deprecated"
        ]
      }
    },
    "/nintendo-account/v1/authorization": {
      "post": {
        "operationId": "PostNintendoAccountV1Authorization",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NintendoAccountAuthorizationParameters"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "AuthorizationParameters"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NintendoAccountAuthorization"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Gets authorization from the Nintendo Account of the player logged in the Nintendo Switch",
        "tags": [
          "Plugins",
          "Plugin nintendo-account"
        ]
      }
    },
    "/nintendo-account/v1/network-service-accountid-token": {
      "post": {
        "operationId": "PostNintendoAccountV1NetworkServiceAccountidToken",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NintendoAccountGetNetworkServiceAccountParameters"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "GetNetworkServiceAccountParameters"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NintendoAccountNetworkServiceAccount"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the Network Service Account ID (NSA) for the player logged in the Nintendo Switch",
        "tags": [
          "Plugins",
          "Plugin nintendo-account"
        ]
      }
    },
    "/nintendo-account/v1/player-nickname": {
      "get": {
        "operationId": "GetNintendoAccountV1PlayerNickname",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Gets the player nickname of the Nintendo Account for the player logged in the Nintendo Switch",
        "tags": [
          "Plugins",
          "Plugin nintendo-account"
        ]
      }
    },
    "/patch/v1/configuration": {
      "get": {
        "operationId": "GetPatchV1Configuration",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchConfiguration"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve the configuration",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      },
      "put": {
        "description": "\n**Data**\n* `cache_path`:  Path to the global cache used to store downloaded chunks.\n* `cache_size`: Cache size in bytes.\n",
        "operationId": "PutPatchV1Configuration",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchConfiguration"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "params"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Configure plugin settings such as cache size and location",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v1/installs": {
      "get": {
        "operationId": "GetPatchV1Installs",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get list of installs on disk",
        "tags": [
          "Plugins",
          "Plugin patch",
          "Subscribable"
        ]
      }
    },
    "/patch/v1/installs/{install-id}": {
      "delete": {
        "description": "\nDelete an install resource. All outstanding requests will be cancelled but the files on disk will be left intact.\n",
        "operationId": "DeletePatchV1InstallsByInstallId",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete the install resource",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      },
      "get": {
        "operationId": "GetPatchV1InstallsByInstallId",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchInstall"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get detailed information about an install, including current requests and status.",
        "tags": [
          "Plugins",
          "Plugin patch",
          "Subscribable"
        ]
      },
      "put": {
        "description": "\n**Data**\n* `excluded_paths`: List of paths (relative to the install root) that are excluded from the update. Files under these paths won't be checked during the verification and repair processes.\n* `metadata_path`:  The location for the install .db and .manifest files. The extension will be directly appended to this path.\n* `seed_path`: The location where updated chunks will be stored for this install when performing a seed operation, and the location where chunks will be sourced from when performing a patch operation.\n",
        "operationId": "PutPatchV1InstallsByInstallId",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchInstallParams"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "params"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Register a new install",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v1/installs/{install-id}/requests/patch": {
      "delete": {
        "description": "\nDelete the patch request, interrupting any ongoing patching operations.\n",
        "operationId": "DeletePatchV1InstallsByInstallIdRequestsPatch",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete patch request for install",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      },
      "put": {
        "description": "\n**Note**\n* If a request already exists it will be replaced by the new resource.\n\n**Data**\n* `headers`: Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n* `url`: Url for the release manifest.\n* `max_download_speed`: Maximum download speed, in bytes/sec. If zero then no limits will be applied.\n* `repair`: Whether a full repair should be performed prior to the update.\n* `tags`: Tags to filter which content gets patched. https://riotsdk.rpg.riotgames.com/docs/for-users/patching/onboarding/localization/\n* `stage`: Only patch up to the specified stage.\n* `temp_path`: (Optional) Custom directory to use for working storage during patching.\n* `delete_foreign_paths`:  (optional) If true, paths that are not considered part of the install will be checked during the verification and repair processes and removed.\n",
        "operationId": "PutPatchV1InstallsByInstallIdRequestsPatch",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchPatchRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "params"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Submit patch request for install",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v1/installs/{install-id}/requests/preview": {
      "delete": {
        "description": "\nDelete the preview request, interrupting any ongoing preview operations.\n",
        "operationId": "DeletePatchV1InstallsByInstallIdRequestsPreview",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete preview request for install",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      },
      "put": {
        "description": "\n**Notes**\n* The request contains all the info needed, including the full url to the release manifest, http headers and tags.\n* If a request already exists it will be replaced by the new resource.\n\n**Data**\n* `headers`: Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n* `url`: Url for the release manifest.\n* `stage`: Only patch up to the specified stage.\n* `fast`: Whether to perform a fast (but less accurate) estimation.\n* `tags`: Tags to filter which content gets patched. https://riotsdk.rpg.riotgames.com/docs/for-users/patching/onboarding/localization/\n",
        "operationId": "PutPatchV1InstallsByInstallIdRequestsPreview",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchPreviewRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "params"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Submit preview request for install",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v1/installs/{install-id}/requests/repair": {
      "delete": {
        "operationId": "DeletePatchV1InstallsByInstallIdRequestsRepair",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete the repair request, interrupting any ongoing repair operations.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      },
      "put": {
        "description": "\n**Notes**\n* Allows you to perform a repair on a set of files or a full repair without having to wait or game client to exit. Only use this if you're\nabsolutely certain that the files are not currently in use.\n* Game is responsible for displaying repair progress and can get progress using the GET /patch/v1/installs/{install-id}/status/repair endpoint.\n\n**Data**\n* `files`: a list of file paths for files that need to be repaired. If none specified then the patcher will perform a full repair. File paths must\nbe relative to the install root.\n* `manifest_url`: Url for the release manifest.\n* `headers`: Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n* `max_download_speed`: Maximum download speed, in bytes/sec. If zero then no limits will be applied.\n* `allowed_http_fallback_hostnames`: List of hostnames for which we'll fall back to HTTP instead of HTTPS if they resolve to an RFC1918 private IP address.\n* `delete_foreign_paths`:  (optional) If true, paths that are not considered part of the install will be checked during the verification and repair processes and removed.\n",
        "operationId": "PutPatchV1InstallsByInstallIdRequestsRepair",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRepairRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "params"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Triggers a repair operation",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v1/installs/{install-id}/requests/seed": {
      "delete": {
        "description": "\nDelete the seed request, interrupting any ongoing seed operations.\n",
        "operationId": "DeletePatchV1InstallsByInstallIdRequestsSeed",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete seed request for install",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      },
      "put": {
        "description": "\n**Notes**\n* Seeding will download any chunks needed to the seed path, but will not modify any files in the install directory. The seed path is specified in the install.\n* If a request already exists it will be replaced by the new resource. https://riotsdk.rpg.riotgames.com/docs/for-users/patching/concepts/seeding/\n\n**Data**\n* `headers`: Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n* `url`: Url for the release manifest.\n* `max_download_speed`: Maximum download speed, in bytes/sec. If zero then no limits will be applied.\n* `stage`: Only patch up to the specified stage.\n* `tags`: Tags to filter which content gets patched. https://riotsdk.rpg.riotgames.com/docs/for-users/patching/onboarding/localization/\n* `delete_foreign_paths`:  (optional) If true, paths that are not considered part of the install will be checked during the verification and repair processes and removed.\n",
        "operationId": "PutPatchV1InstallsByInstallIdRequestsSeed",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchSeedRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "params"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Submit seed request for install",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v1/installs/{install-id}/status": {
      "get": {
        "description": "\n**Note**\n* The status is always relative to a manifest and set of tags, specified by the `url` and `tags` fields respectively.\n* If there is any work in progress, `url` and `tags` will match those from the request.\n* If there are no pending requests, `url` and `tags` will match the files in the install folder.\n\n**Responses**\n\n**Patch**\n* `updating`: Currently performing a patching / seeding request.\n* `out_of_date`: The last request was partially completed and more work needs to be done before all files are in sync with the release manifest.\n* `up_to_date`: The last request completed successfully and files are in sync with the release manifest.\n* `not_installed`: The last request completed successfully and detected that the install-id is not installed.\n* `pending_verify`: The last request has not completed verification step.\n\n**Seed**\n* `seeding`: Currently performing a seeding request.\n* `out_of_date`: The last request was partially completed and more work needs to be done before all data needed to update the install has been downloaded.\n* `up_to_date`: The last request completed successfully and all data needed to update the install has been downloaded.\n* `pending_verify`: The last request has not completed verification step.\n\n**Preview**\n* `pending`: The preview request has not finished.\n* `done`: The last preview request completed successfully.\n\n**Repair**\n* `manifest_url`: the url of the release manifest.\n* `repair_progress`: The progress of the repair operation. Contains:\n    * `bytes_to_repair`: Total number of bytes to read.\n    * `files_to_repair`: Total number of files to read.\n    * `repaired_bytes`: Number of bytes read from disk so far.\n    * `repaired_files`: Number of files read from disk so far.\n* `state`: The overall state of the repair operation. Possible states include:\n    * `pending`: No repair requests have been made.\n    * `in_progress`: Repair is in progress.\n    * `canceled`: The repair operation was canceled.\n    * `done`: Repair operation is complete.\n",
        "operationId": "GetPatchV1InstallsByInstallIdStatus",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve the current patch, preview and seed statuses of an install resource",
        "tags": [
          "Plugins",
          "Plugin patch",
          "Subscribable"
        ]
      }
    },
    "/patch/v1/installs/{install-id}/status/patch": {
      "get": {
        "description": "\n**Notes**\n* The status is always relative to a manifest and set of tags, specified by the `url` and `tags` fields respectively.\n* If there is any work in progress, `url` and `tags` will match those from the request.\n* If there are no pending requests, `url` and `tags` will match the files in the install folder.\n\n**Response**\n\nThe `state` field will is populated based on the current work with the following values:\n* `updating`: Currently performing a patching / seeding request.\n* `out_of_date`: The last request was partially completed and more work needs to be done before all files are in sync with the release manifest.\n* `up_to_date`: The last request completed successfully and files are in sync with the release manifest.\n* `not_installed`: The last request completed successfully and detected that the install-id is not installed.\n* `pending_verify`: The last request has not completed verification step.\n",
        "operationId": "GetPatchV1InstallsByInstallIdStatusPatch",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchPatchStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve the current patch status of an install.",
        "tags": [
          "Plugins",
          "Plugin patch",
          "Subscribable"
        ]
      }
    },
    "/patch/v1/installs/{install-id}/status/preview": {
      "get": {
        "description": "\n**Response**\n\nThe `state` field will is populated based on the current work with the following values:\n* `pending`: The preview request has not finished.\n* `done`: The last preview request completed successfully.\n",
        "operationId": "GetPatchV1InstallsByInstallIdStatusPreview",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchPreviewStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve the current preview status of an install.",
        "tags": [
          "Plugins",
          "Plugin patch",
          "Subscribable"
        ]
      }
    },
    "/patch/v1/installs/{install-id}/status/repair": {
      "get": {
        "description": "\n**Response**\n* `manifest_url`: the url of the release manifest.\n* `repair_progress`: The progress of the repair operation. Contains:\n    * `bytes_to_repair`: Total number of bytes to read.\n    * `files_to_repair`: Total number of files to read.\n    * `repaired_bytes`: Number of bytes read from disk so far.\n    * `repaired_files`: Number of files read from disk so far.\n* `state`: The overall state of the repair operation.\n    * `pending`: No repair requests have been made.\n    * `in_progress`: Repair is in progress.\n    * `canceled`: The repair operation was canceled.\n    * `done`: Repair operation is complete.\n",
        "operationId": "GetPatchV1InstallsByInstallIdStatusRepair",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchRepairStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve the current repair status of an install.",
        "tags": [
          "Plugins",
          "Plugin patch",
          "Subscribable"
        ]
      }
    },
    "/patch/v1/installs/{install-id}/status/seed": {
      "get": {
        "description": "\n**Notes**\n* If there is any work in progress, `url` and `tags` will match those from the request.\n* If there are no pending requests, `url` and `tags` will match the files in the install folder.\n\n**Response**\n\nThe `state` field will is populated based on the current work with the following values:\n* `seeding`: Currently performing a seeding request.\n* `out_of_date`: The last request was partially completed and more work needs to be done before all files are in sync with the release manifest.\n* `up_to_date`: The last request completed successfully and files are in sync with the release manifest.\n* `pending_verify`: The last request has not completed verification step.\n",
        "operationId": "GetPatchV1InstallsByInstallIdStatusSeed",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchSeedStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve the current seed status of an install.",
        "tags": [
          "Plugins",
          "Plugin patch",
          "Subscribable"
        ]
      }
    },
    "/patch/v2/configuration": {
      "get": {
        "operationId": "GetPatchV2Configuration",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchV2Configuration"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve the configuration",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      },
      "put": {
        "description": "\n**Data**\n* `chunkBatchSize`:     Maximum size in bytes of each batched chunk request. Downloads are split into requests of this size in order to better parallelize the download of chunks across connections. Default: 2097152 (2MB)\n* `chunkingThreads`:    Number of threads to use for rechunking, in case a repair is needed. Note: By default, the patcher will select the number of chunking threads automatically. If the drive is detected as an SSD, it will use as many threads as there are processors, otherwise it will use a single thread. This option can be used to override this detection and use the specified number of threads.\n* `connections`:        Number of concurrent connections to use for downloading. Default: 8\n* `dnsTTL`:             Time in seconds to keep resolved IP addresses before performing another name resolution operation. This allows the download process to operate with the latest available CDN edge server addresses in case they change rapidly. Default:60\n* `downloadBuffer`:     Specifies the size of the libcurl receive buffer. Larger receive buffers can help with throughput for high-latency links when using HTTP/3. Default: 64KB\n* `downloadLimit`:      Maximum amount of downloaded chunk data that will be kept in memory at any one time. The patcher won't issue additional chunk downloads until downloaded data goes under this limit. The limit is important to ensure that even in the event of very fast downloads and very slow disk operations memory usage doesn't grow uncontrollably. Default: 128MB\n* `ipv4Only`:           Whether to ignore any non-IPv4 addresses that download servers resolve to. Use this if your DNS server returns IPv6 addresses but you don't have IPv6 connectivity.\n* `maxByteRanges`:      Maximum number of discontiguous byte ranges to request from the server. The chunk downloader will split a request if it would result in more than this many ranges in the range request. This helps prevent issues when communicating with edge servers that can't support large amounts of independent ranges. Default: 64\n* `maxDownloadSpeed`:   Maximum download speed. Default: 0 (no limit)\n* `maxManifestSize`:    Maximum release manifest size that we're willing to load. If zero, the size is unlimited. Default: 64MB\n* `receiveBuffer`:      Specifies the size of the TCP receive buffer. Larger receive buffers can help with TCP throughput for high-latency links.\n* `sliceSize`:          Size in bytes of each slice, that is, the size of the write buffer used when updating files. Default: 65536 (64 MB)\n* `timeout`:            Time in seconds to wait before canceling an update that is not making any progress. If zero, this timeout is disabled. Default: 60\n",
        "operationId": "PutPatchV2Configuration",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchV2Configuration"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "params"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Configure patcher settings such as thread count and timeout.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/debug/set-up": {
      "post": {
        "operationId": "PostPatchV2DebugSetUp",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDebugSetup"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "params"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Takes care of setup and returns a patch url and bundles url that can be used to issue patch, seed, partial-repair, full-repair and preview requests.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/installs": {
      "get": {
        "operationId": "GetPatchV2Installs",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get list of installs on disk",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/installs/{install-id}": {
      "get": {
        "operationId": "GetPatchV2InstallsByInstallId",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchInstallState"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the state of the entire install along with the state of its components.",
        "tags": [
          "Plugins",
          "Plugin patch",
          "Subscribable"
        ]
      },
      "put": {
        "description": "\n**Data**\n* `components`: List of components. A component is a patchable artifact that is part of the install of a specific product. For example, League of Legends has a Client component and a Game component.\n    * `id`:                     The id of the component.\n    * `installPath`:            The install location of the component. Absolute file path required.\n    * `metadataPath`:           The location for the install .db and .manifest files. The extension will be directly appended to this path. Absolute file path required.\n    * `seedPath`:               The location where updated chunks will be stored for this install when performing a seed operation, and the location where chunks will be sourced from when performing a patch operation. Absolute file path required.\n    * `deleteForeignPaths`:     If set, extra paths that don't belong to the release will be deleted during the repair processes.\n    * `excludedPaths`:          List of paths (relative to the install root) that are excluded from the update. Files under these paths won't be checked during the verification and repair processes.\n    * `tags`:                   Tags to filter which content gets patched. These are different from the params used to fetch the release from Patchsieve https://riotsdk.rpg.riotgames.com/docs/for-users/patching/onboarding/localization/.\n    * `sieveProductId`:         The id used to fetch a product in the Patchsieve service. It can differ from the product-id.\n    * `versionSet`:             The id used to fetch a version set of a specific product in the Patchsieve Service.\n    * `params`:                 Params/Labels used to filter which release is fetched from Patchsieve Service.\n",
        "operationId": "PutPatchV2InstallsByInstallId",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchInstallRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "install"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Register a new install",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/installs/{install-id}/components/{component-id}": {
      "get": {
        "operationId": "GetPatchV2InstallsByInstallIdComponentsByComponentId",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "component-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchComponent"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the state of a component.",
        "tags": [
          "Plugins",
          "Plugin patch",
          "Subscribable"
        ]
      },
      "put": {
        "description": "\n**Data**\n* `installPath`:            The install location of the component. Absolute file path required.\n* `metadataPath`:           The location for the install .db and .manifest files. The extension will be directly appended to this path. Absolute file path required.\n* `seedPath`:               The location where updated chunks will be stored for this install when performing a seed operation, and the location where chunks will be sourced from when performing a patch operation. Absolute file path required.\n* `deleteForeignPaths`:     If set, extra paths that don't belong to the release will be deleted during the repair processes.\n* `excludedPaths`:          List of paths (relative to the install root) that are excluded from the update. Files under these paths won't be checked during the verification and repair processes.\n* `dependsOn`:              The id of the component it is depedent on. If set, will keep artifact version id's in lockstep while the primary component is running.\n* `tags`:                   Tags to filter which content gets patched. These are different from the params used to fetch the release from Patchsieve https://riotsdk.rpg.riotgames.com/docs/for-users/patching/onboarding/localization/.\n* `sieveProductId`:         The id used to fetch a product in the Patchsieve service. It can differ from the product-id.\n* `versionSet`:             The id used to fetch a version set of a specific product in the Patchsieve Service.\n* `params`:                 Params/Labels used to filter which release is fetched from Patchsieve Service.\n",
        "operationId": "PutPatchV2InstallsByInstallIdComponentsByComponentId",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "component-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchComponentRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "component"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Register a new component.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/installs/{install-id}/components/{component-id}/start-full-repair": {
      "post": {
        "description": "\n**Data**\n* `headers`:                (Required on Mobile) Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n",
        "operationId": "PostPatchV2InstallsByInstallIdComponentsByComponentIdStartFullRepair",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "component-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchStartFullRepairRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "params"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchRequestStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Schedules a full repair operation.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/installs/{install-id}/components/{component-id}/start-partial-repair": {
      "post": {
        "description": "\n**Notes**\n* Allows caller to perform a repair on a set of files without having to wait or game client to exit. Only use this if absolutely certain that the files are not currently in use.\n\n**Data**\n* `files`:                  A list of file paths for files that need to be repaired. File paths must be relative to the install root.\n* `headers`:                (Required on Mobile) Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n",
        "operationId": "PostPatchV2InstallsByInstallIdComponentsByComponentIdStartPartialRepair",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "component-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchStartPartialRepairRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "params"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchRequestStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Schedules a partial repair operation.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/installs/{install-id}/components/{component-id}/start-patching": {
      "post": {
        "description": "\n**Data**\n* `headers`:                (Required on Mobile) Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n* `stage`:                  (Optional) Only patch up to the specified stage.\n* `tempPath`:               (Optional) Custom directory to use for working storage during patching.\n",
        "operationId": "PostPatchV2InstallsByInstallIdComponentsByComponentIdStartPatching",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "component-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchStartPatchingOrSeedingRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "params"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchRequestStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Schedules a patching operation.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/installs/{install-id}/components/{component-id}/start-preview": {
      "post": {
        "description": "\n**Data**\n* `headers`:                (Required on Mobile) Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n* `stage`:                  (Optional) Only preview the specified stage.\n",
        "operationId": "PostPatchV2InstallsByInstallIdComponentsByComponentIdStartPreview",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "component-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchStartPreviewRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "params"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchRequestStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Schedules a preview operation.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/installs/{install-id}/components/{component-id}/start-seeding": {
      "post": {
        "description": "\n**Data**\n* `headers`:                (Required on Mobile) Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n* `stage`:                  (Optional) Only patch up to the specified stage.\n* `tempPath`:               (Optional) Custom directory to use for working storage during patching.\n",
        "operationId": "PostPatchV2InstallsByInstallIdComponentsByComponentIdStartSeeding",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "component-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchStartPatchingOrSeedingRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "params"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchRequestStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Schedules a seed operation.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/installs/{install-id}/components/{component-id}/start-verify": {
      "post": {
        "operationId": "PostPatchV2InstallsByInstallIdComponentsByComponentIdStartVerify",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "component-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchRequestStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Schedules a verify operation.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/installs/{install-id}/components/{component-id}/stop-full-repair": {
      "post": {
        "operationId": "PostPatchV2InstallsByInstallIdComponentsByComponentIdStopFullRepair",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "component-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Stop a full repair operation.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/installs/{install-id}/components/{component-id}/stop-partial-repair": {
      "post": {
        "operationId": "PostPatchV2InstallsByInstallIdComponentsByComponentIdStopPartialRepair",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "component-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Stop a partial operation.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/installs/{install-id}/components/{component-id}/stop-patching": {
      "post": {
        "operationId": "PostPatchV2InstallsByInstallIdComponentsByComponentIdStopPatching",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "component-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Stop a patching operation.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/installs/{install-id}/components/{component-id}/stop-preview": {
      "post": {
        "operationId": "PostPatchV2InstallsByInstallIdComponentsByComponentIdStopPreview",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "component-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Stop a preview operation.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/installs/{install-id}/components/{component-id}/stop-seeding": {
      "post": {
        "operationId": "PostPatchV2InstallsByInstallIdComponentsByComponentIdStopSeeding",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "component-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Stop a seed operation.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/installs/{install-id}/components/{component-id}/stop-verify": {
      "post": {
        "operationId": "PostPatchV2InstallsByInstallIdComponentsByComponentIdStopVerify",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "component-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Stop a verify operation.",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/patchsieve": {
      "post": {
        "operationId": "PostPatchV2Patchsieve",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchPatchsieveRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchPatchsieveReleases"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Fetch component state from info",
        "tags": [
          "Plugins",
          "Plugin patch"
        ]
      }
    },
    "/patch/v2/requests/{request-id}": {
      "get": {
        "operationId": "GetPatchV2RequestsByRequestId",
        "parameters": [
          {
            "in": "path",
            "name": "request-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchRequestStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the state of a component for a specific request.",
        "tags": [
          "Plugins",
          "Plugin patch",
          "Subscribable"
        ]
      }
    },
    "/payments/v1/initialize-purchase": {
      "post": {
        "operationId": "PostPaymentsV1InitializePurchase",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsInitializedPurchase"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Begin the purchase flow, receiving the URL to a web client.",
        "tags": [
          "Plugins",
          "Plugin payments"
        ]
      }
    },
    "/platform-login/v1/status": {
      "get": {
        "operationId": "GetPlatformLoginV1Status",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformLoginLoginStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the current login state of the client",
        "tags": [
          "Plugins",
          "Plugin platform-login",
          "Subscribable"
        ]
      }
    },
    "/platform-ui/v1/enabled": {
      "get": {
        "operationId": "GetPlatformUiV1Enabled",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns true if UI is enabled",
        "tags": [
          "Plugins",
          "Plugin platform-ui"
        ]
      }
    },
    "/platform-ui/v1/status": {
      "get": {
        "operationId": "GetPlatformUiV1Status",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformUiPlatformUIState"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns current status of UI",
        "tags": [
          "Plugins",
          "Plugin platform-ui",
          "Subscribable"
        ]
      }
    },
    "/play-restrictions/v1/debug/caller-id/mock-id": {
      "delete": {
        "description": "Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "operationId": "DeletePlayRestrictionsV1DebugCallerIdMockId",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Stops mocking the caller ID for Swagger calls",
        "tags": [
          "Plugins",
          "Plugin play-restrictions",
          "Internal"
        ]
      },
      "get": {
        "description": "Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "operationId": "GetPlayRestrictionsV1DebugCallerIdMockId",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayRestrictionsPluginCallerId_MockCallerId"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Checks the caller ID in use when APIs are called from Swagger",
        "tags": [
          "Plugins",
          "Plugin play-restrictions",
          "Internal"
        ]
      },
      "put": {
        "description": "Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "operationId": "PutPlayRestrictionsV1DebugCallerIdMockId",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayRestrictionsPluginCallerId_MockCallerId"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "callerId"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Sets the caller ID to use when calling this plugin from Swagger",
        "tags": [
          "Plugins",
          "Plugin play-restrictions",
          "Internal"
        ]
      }
    },
    "/play-restrictions/v1/restrictions": {
      "get": {
        "operationId": "GetPlayRestrictionsV1Restrictions",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayRestrictionsPlayRestrictionV1Data"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the current play restrictions",
        "tags": [
          "Plugins",
          "Plugin play-restrictions",
          "Subscribable"
        ]
      },
      "put": {
        "description": "\n**Description**\nAllows game teams to configure how various services pertaining to play restrictions (being able to communicate with other players in-game) are configured.\n\n**Argument**\n* `data`: A struct containing booleans for each service that comes under play-restrictions.\n",
        "operationId": "PutPlayRestrictionsV1Restrictions",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayRestrictionsPlayRestrictionV1Data"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "data"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Set the play restrictions for the SDK",
        "tags": [
          "Plugins",
          "Plugin play-restrictions"
        ]
      }
    },
    "/player-account/aliases/v1/active": {
      "get": {
        "operationId": "GetPlayerAccountAliasesV1Active",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountAliasesV1Alias"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the current active game name for the player.",
        "tags": [
          "Plugins",
          "Plugin player-account",
          "Subscribable"
        ]
      }
    },
    "/player-account/aliases/v1/aliases": {
      "get": {
        "operationId": "GetPlayerAccountAliasesV1Aliases",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountAliasesV1AliasList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Gets a list of all aliaes for the player.",
        "tags": [
          "Plugins",
          "Plugin player-account",
          "Subscribable"
        ]
      },
      "post": {
        "operationId": "PostPlayerAccountAliasesV1Aliases",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountAliasesV1AliasInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "names"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountAliasesV1StatusResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Sets a new set of aliaes for the player.",
        "tags": [
          "Plugins",
          "Plugin player-account"
        ]
      }
    },
    "/player-account/aliases/v1/eligibility": {
      "post": {
        "operationId": "PostPlayerAccountAliasesV1Eligibility",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountEligibilityResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Check if a player is eligible for a name change.",
        "tags": [
          "Plugins",
          "Plugin player-account"
        ]
      }
    },
    "/player-account/aliases/v1/generate-tagline": {
      "post": {
        "operationId": "PostPlayerAccountAliasesV1GenerateTagline",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountGenerateTaglineInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "gameName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountGenerateTaglineResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns a random tagline that is valid for the player.",
        "tags": [
          "Plugins",
          "Plugin player-account"
        ]
      }
    },
    "/player-account/aliases/v1/required": {
      "get": {
        "operationId": "GetPlayerAccountAliasesV1Required",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountAliasesV1RequiredResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Check if a player is required to set their name.",
        "tags": [
          "Plugins",
          "Plugin player-account",
          "Subscribable"
        ]
      }
    },
    "/player-account/aliases/v1/validity": {
      "post": {
        "operationId": "PostPlayerAccountAliasesV1Validity",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountAliasesV1AliasInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "names"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountAliasesV1StatusResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Checks a name for validity without saving it.",
        "tags": [
          "Plugins",
          "Plugin player-account"
        ]
      }
    },
    "/player-account/config/v1/config": {
      "get": {
        "description": "Debug information allowing the ability to introspect the current plugin config.",
        "operationId": "GetPlayerAccountConfigV1Config",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountPlayerAccountPluginConfig"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "The current plugin configuration.",
        "tags": [
          "Plugins",
          "Plugin player-account"
        ]
      }
    },
    "/player-account/promotion/v1/eligibility": {
      "get": {
        "operationId": "GetPlayerAccountPromotionV1Eligibility",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountPromotionV1EligibilityCheckResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Return the latest cached eligibility check.",
        "tags": [
          "Plugins",
          "Plugin player-account",
          "Subscribable"
        ]
      },
      "post": {
        "operationId": "PostPlayerAccountPromotionV1Eligibility",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountPromotionV1EligibilityCheckResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Check if a player is eligible for promotion.",
        "tags": [
          "Plugins",
          "Plugin player-account"
        ]
      }
    },
    "/player-account/promotion/v1/fields": {
      "get": {
        "description": "Returns an empty list until an eligibility check has been performed.",
        "operationId": "GetPlayerAccountPromotionV1Fields",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountPromotionV1UpdateableFieldsResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get a list of fields the player can update.",
        "tags": [
          "Plugins",
          "Plugin player-account",
          "Subscribable"
        ]
      }
    },
    "/player-account/promotion/v1/promotion": {
      "post": {
        "operationId": "PostPlayerAccountPromotionV1Promotion",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountPromotionV1AccountDetails"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "accountDetails"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountPromotionV1AccountPromotionResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Promote an account by providing missing details.",
        "tags": [
          "Plugins",
          "Plugin player-account"
        ]
      }
    },
    "/player-account/regions/v1/eligibility": {
      "get": {
        "operationId": "GetPlayerAccountRegionsV1Eligibility",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountRegionsV1EligibilityCheckResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Check if a player is eligible for regions selection.",
        "tags": [
          "Plugins",
          "Plugin player-account",
          "Subscribable"
        ]
      }
    },
    "/player-account/regions/v1/region/{regionCode}": {
      "post": {
        "operationId": "PostPlayerAccountRegionsV1RegionByRegionCode",
        "parameters": [
          {
            "in": "path",
            "name": "regionCode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountRegionsV1RegionAssignmentResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "assign the given region to player account",
        "tags": [
          "Plugins",
          "Plugin player-account"
        ]
      }
    },
    "/player-account/vng/v1/status/ready": {
      "get": {
        "operationId": "GetPlayerAccountVngV1StatusReady",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Whether VNG status endpoints are ready to handle requests (RSO access token exists)",
        "tags": [
          "Plugins",
          "Plugin player-account",
          "Subscribable"
        ]
      }
    },
    "/player-account/vng/v1/status/{productId}": {
      "get": {
        "operationId": "GetPlayerAccountVngV1StatusByProductId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountVngV1StatusResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Check cache to see if a player must register with the Vietnamese government; otherwise, check with VNG (via the Player Account Service).",
        "tags": [
          "Plugins",
          "Plugin player-account",
          "Subscribable"
        ]
      },
      "post": {
        "operationId": "PostPlayerAccountVngV1StatusByProductId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountVngV1StatusResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Check with VNG (via the Player Account Service) to see if a player must register with the Vietnamese government.",
        "tags": [
          "Plugins",
          "Plugin player-account"
        ]
      }
    },
    "/player-account/vng/v1/web-url/{productId}": {
      "post": {
        "operationId": "PostPlayerAccountVngV1WebUrlByProductId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountVngV1WebUrlRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "webUrlRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountVngV1WebUrlResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Create the external web url with the given redirect-uri",
        "tags": [
          "Plugins",
          "Plugin player-account"
        ]
      }
    },
    "/player-affinity/affinity/v1/token": {
      "post": {
        "description": "Endpoint deleted November 2021; Please use 'player-affinity/service/v2/token'.",
        "operationId": "PostPlayerAffinityAffinityV1Token",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAffinityAffinityV1AffinityInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "input"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityToken"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get a player affinity token.",
        "tags": [
          "Plugins",
          "Plugin player-affinity",
          "Deprecated"
        ]
      }
    },
    "/player-affinity/config/v1/config": {
      "get": {
        "description": "Debug information allowing the ability to introspect the current plugin config.",
        "operationId": "GetPlayerAffinityConfigV1Config",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityPluginConfig"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "The current plugin configuration.",
        "tags": [
          "Plugins",
          "Plugin player-affinity"
        ]
      }
    },
    "/player-affinity/config/v1/status": {
      "get": {
        "description": "Returns the current readiness of the plugin.",
        "operationId": "GetPlayerAffinityConfigV1Status",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityPluginStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "The current plugin readiness.",
        "tags": [
          "Plugins",
          "Plugin player-affinity",
          "Subscribable"
        ]
      }
    },
    "/player-affinity/product/v1/token": {
      "post": {
        "description": "Endpoint deleted November 2021; Please use 'player-affinity/product/v2/token'.",
        "operationId": "PostPlayerAffinityProductV1Token",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAffinityAffinityV2AffinityProductInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "input"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityTokenProduct"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get a player product affinity token, save it to the local cache, and notify subscribers. Retrieve from local cache on error.",
        "tags": [
          "Plugins",
          "Plugin player-affinity",
          "Deprecated"
        ]
      }
    },
    "/player-affinity/product/v1/token/debug": {
      "post": {
        "description": "Endpoint deleted November 2021; Please use 'player-affinity/product/v2/token/debug.",
        "operationId": "PostPlayerAffinityProductV1TokenDebug",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityTokenProduct"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "input"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityTokenProduct"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "DEBUG: For debugging subscribers. Save a new product affinity token to the local cache then notify subscribers.",
        "tags": [
          "Plugins",
          "Plugin player-affinity",
          "Deprecated",
          "Internal"
        ]
      }
    },
    "/player-affinity/product/v1/token/{product}": {
      "get": {
        "description": "Endpoint deleted November 2021; Please use 'player-affinity/product/v2/token/{product}'.",
        "operationId": "GetPlayerAffinityProductV1TokenByProduct",
        "parameters": [
          {
            "in": "path",
            "name": "product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityTokenProduct"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the cached product affinity token.",
        "tags": [
          "Plugins",
          "Plugin player-affinity",
          "Subscribable",
          "Deprecated"
        ]
      }
    },
    "/player-affinity/product/v2/cached-affinity/{product}": {
      "get": {
        "operationId": "GetPlayerAffinityProductV2CachedAffinityByProduct",
        "parameters": [
          {
            "in": "path",
            "name": "product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityCachedProductAffinity"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the cached product affinity.",
        "tags": [
          "Plugins",
          "Plugin player-affinity",
          "Subscribable"
        ]
      }
    },
    "/player-affinity/product/v2/token": {
      "post": {
        "operationId": "PostPlayerAffinityProductV2Token",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAffinityProductAffinityInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "input"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityProductToken"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get a player product affinity token, save the affinity to the local cache, and notify subscribers.",
        "tags": [
          "Plugins",
          "Plugin player-affinity"
        ]
      }
    },
    "/player-affinity/product/v2/token/debug": {
      "post": {
        "operationId": "PostPlayerAffinityProductV2TokenDebug",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityProductToken"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "input"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityProductToken"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "DEBUG: For debugging subscribers. Save a new product affinity token to the local cache and notify subscribers.",
        "tags": [
          "Plugins",
          "Plugin player-affinity",
          "Internal"
        ]
      }
    },
    "/player-affinity/product/v2/token/{product}": {
      "get": {
        "operationId": "GetPlayerAffinityProductV2TokenByProduct",
        "parameters": [
          {
            "in": "path",
            "name": "product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityProductToken"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the player product affinity token.",
        "tags": [
          "Plugins",
          "Plugin player-affinity",
          "Subscribable"
        ]
      }
    },
    "/player-affinity/service/v1/token": {
      "post": {
        "description": "Endpoint deleted November 2021; Please use 'player-affinity/service/v2/token'.",
        "operationId": "PostPlayerAffinityServiceV1Token",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAffinityAffinityV1AffinityInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "input"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityToken"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get a player service affinity token.",
        "tags": [
          "Plugins",
          "Plugin player-affinity",
          "Deprecated"
        ]
      }
    },
    "/player-affinity/service/v2/cached-affinity/{service}": {
      "get": {
        "operationId": "GetPlayerAffinityServiceV2CachedAffinityByService",
        "parameters": [
          {
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityCachedServiceAffinity"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the cached service affinity.",
        "tags": [
          "Plugins",
          "Plugin player-affinity"
        ]
      }
    },
    "/player-affinity/service/v2/token": {
      "post": {
        "operationId": "PostPlayerAffinityServiceV2Token",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAffinityServiceAffinityInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "input"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityServiceToken"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get a player service affinity token and save the affinity to the local cache.",
        "tags": [
          "Plugins",
          "Plugin player-affinity"
        ]
      }
    },
    "/player-affinity/shard": {
      "put": {
        "operationId": "PutPlayerAffinityShard",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityShardInfo"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "shard"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Sets the current",
        "tags": [
          "Plugins",
          "Plugin player-affinity"
        ]
      }
    },
    "/player-preferences/v1/data-json/productId/{productId}/type/{type}": {
      "get": {
        "operationId": "GetPlayerPreferencesV1DataJsonProductIdByProductIdTypeByType",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get decompressed and decoded JSON player preferences information from a specified type from the Player Preferences service",
        "tags": [
          "Plugins",
          "Plugin player-preferences",
          "Internal"
        ]
      },
      "put": {
        "operationId": "PutPlayerPreferencesV1DataJsonProductIdByProductIdTypeByType",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "data"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Puts any valid JSON object for the specified type into the Player Preferences service",
        "tags": [
          "Plugins",
          "Plugin player-preferences",
          "Internal"
        ]
      }
    },
    "/player-preferences/v1/data-json/{type}": {
      "get": {
        "operationId": "GetPlayerPreferencesV1DataJsonByType",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get decompressed and decoded JSON player preferences information from a specified type from the Player Preferences service",
        "tags": [
          "Plugins",
          "Plugin player-preferences"
        ]
      },
      "put": {
        "operationId": "PutPlayerPreferencesV1DataJsonByType",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "data"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Puts any valid JSON object for the specified type into the Player Preferences service",
        "tags": [
          "Plugins",
          "Plugin player-preferences"
        ]
      }
    },
    "/player-preferences/v1/data/{type}": {
      "get": {
        "operationId": "GetPlayerPreferencesV1DataByType",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get decompressed and decoded player preferences information from a specified type from the Player Preferences service as string",
        "tags": [
          "Plugins",
          "Plugin player-preferences"
        ]
      },
      "put": {
        "operationId": "PutPlayerPreferencesV1DataByType",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "data"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Puts any string for the specified type into the Player Preferences service",
        "tags": [
          "Plugins",
          "Plugin player-preferences"
        ]
      }
    },
    "/player-preferences/v1/debug/caller-id/mock-id": {
      "delete": {
        "description": "Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "operationId": "DeletePlayerPreferencesV1DebugCallerIdMockId",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Stops mocking the caller ID for Swagger calls",
        "tags": [
          "Plugins",
          "Plugin player-preferences",
          "Internal"
        ]
      },
      "get": {
        "description": "Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "operationId": "GetPlayerPreferencesV1DebugCallerIdMockId",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerPreferencesPluginCallerId_MockCallerId"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Checks the caller ID in use when APIs are called from Swagger",
        "tags": [
          "Plugins",
          "Plugin player-preferences",
          "Internal"
        ]
      },
      "put": {
        "description": "Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "operationId": "PutPlayerPreferencesV1DebugCallerIdMockId",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerPreferencesPluginCallerId_MockCallerId"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "callerId"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Sets the caller ID to use when calling this plugin from Swagger",
        "tags": [
          "Plugins",
          "Plugin player-preferences",
          "Internal"
        ]
      }
    },
    "/player-preferences/v1/ready": {
      "get": {
        "operationId": "GetPlayerPreferencesV1Ready",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "True if the plugin is ready to be used",
        "tags": [
          "Plugins",
          "Plugin player-preferences",
          "Subscribable"
        ]
      }
    },
    "/player-reporting/v1/debug/simulate-reporter-feedback/{category}": {
      "post": {
        "description": "\n**Data**\n* `category`: The category is a key used to create the localized message for the player. As an example, `CHEATING` is the category\nsent when a player's report for cheating was utilized for penalizing a cheater. If the category is unrecognized, a fallback message will be used.\n",
        "operationId": "PostPlayerReportingV1DebugSimulateReporterFeedbackByCategory",
        "parameters": [
          {
            "in": "path",
            "name": "category",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Simulate sending a reporting feedback message to this player with a specific report category.",
        "tags": [
          "Plugins",
          "Plugin player-reporting",
          "Internal"
        ]
      }
    },
    "/player-reporting/v1/report": {
      "post": {
        "description": "\n**Data**\n* `categories`: List of category strings that player is reporting another player for. Different products use different categories.\n* `comment`: Comment associated with this report.\n* `location`: The location where the offending behavior occurred. Example: `in-game`.\n* `match_token`: The reporting player's match token, which is a signed JWT. See Platform docs for more info on match tokens.\n* `offender_puuid`: Whom the player is reporting.\n\n**Response**\n\nThis endpoint can return the following response codes:\n* `204`: Report successfully submitted. Note that in some cases it's intended UX that the submission is a \"success\" even if the report cannot be submitted.\n* `401`: Client is unable to retrieve current player's access token, which is required. Most common when trying to submit a report without having first logged in.\n\n\nEndpoint deleted June 2022; Please use '/player-reporting/v2/report'.",
        "operationId": "PostPlayerReportingV1Report",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerReportingPlayerReport"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "tags": [
          "Plugins",
          "Plugin player-reporting",
          "Deprecated"
        ]
      }
    },
    "/player-reporting/v1/reporter-feedback": {
      "get": {
        "description": "\n**Data**\n* Response is a JSON map of `id` --> individual reporter feedback messages. Example:\n```json\n{\n\"1\": {\n    \"locale\": \"en_US\",\n    \"category\": \"CHEATING\",\n    \"message\": \"Your report of cheating has been verified.\",\n    \"title\": \"Report Feedback\"\n}\n}\n```\n\n* `locale`: Detected locale of player and what locale the message was localized to.\n* `category`: Category of the report--an internal string. Category keys to different localized messages.\n* `message`: Localized message to display to player.\n* `title`: Localized message title to display to player.\n\nResponse will be an empty map `{}` if there are no reporter-feedback messages to display.\n",
        "operationId": "GetPlayerReportingV1ReporterFeedback",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/PlayerReportingLocalizedReporterFeedbackMessage"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Provides a list of unacknowledged localized reporter feedback messages to show the player.",
        "tags": [
          "Plugins",
          "Plugin player-reporting",
          "Subscribable"
        ]
      }
    },
    "/player-reporting/v1/reporter-feedback/ack": {
      "post": {
        "operationId": "PostPlayerReportingV1ReporterFeedbackAck",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Acknowledges all reporter feedbacks.",
        "tags": [
          "Plugins",
          "Plugin player-reporting"
        ]
      }
    },
    "/player-reporting/v1/reporter-feedback/ack/{id}": {
      "post": {
        "description": "\n**Description**\n\nSee GET reporter feedback endpoint for more info on how to find `{id}`.\n\n**Response**\nThis endpoint will always return a 2xx response code and a boolean response:\n* `true`: Reporter Feedback message with given ID was found and acknowledged.\n* `false`: No Reporter Feedback message with given ID was found.\n",
        "operationId": "PostPlayerReportingV1ReporterFeedbackAckById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Acknowledges a specific reporter feedback. Returns true if we can find a reporter feedback that matches that ID. Returns false if we can't.",
        "tags": [
          "Plugins",
          "Plugin player-reporting"
        ]
      }
    },
    "/player-reporting/v1/status": {
      "get": {
        "description": "\n**Description**\n\nReturns `true` if the plugin is ready to receive reports. Note that from the perspective of plugin customers submitting reports,\nreports can be \"successfully submitted\" even if the plugin is not ready to receive reports. This is an intended experience.\n",
        "operationId": "GetPlayerReportingV1Status",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "For Integration test & debugging use only.",
        "tags": [
          "Plugins",
          "Plugin player-reporting"
        ]
      }
    },
    "/player-reporting/v2/report": {
      "post": {
        "description": "\nReporting V2 is similar to v1, but the token can accept more types than just a MATCH_TOKEN to allow support for reporting guilds and potentially other entities in the future.\n**Data**\n* `categories`: List of category strings that player is reporting another player for. Different products use different categories.\n* `comment`: Player written comment associated with this report.\n* `location`: The location where the offending behavior occurred. Example: `in-game`.\n* `tokenType`: The type of information the token contains. Example: `MATCH_TOKEN`, `GUILD_TOKEN`.\n* `token`: A signed JWT with a format matching the tokenType. See Platform docs for more info on token formats and types.\n* `offenderId`: The id of the offender. For players this is their puuid.\n\n**Response**\n\nThis endpoint can return the following response codes:\n* `204`: Report successfully submitted. Note that in some cases it's intended UX that the submission is a \"success\" even if the report cannot be submitted.\n* `401`: Client is unable to retrieve current player's access token, which is required. Most common when trying to submit a report without having first logged in.\n",
        "operationId": "PostPlayerReportingV2Report",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerReportingPlayerReportV2"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "tags": [
          "Plugins",
          "Plugin player-reporting"
        ]
      }
    },
    "/player-session-lifecycle/v1/session": {
      "delete": {
        "operationId": "DeletePlayerSessionLifecycleV1Session",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete the current lifecycle session",
        "tags": [
          "Plugins",
          "Plugin player-session-lifecycle"
        ]
      },
      "get": {
        "operationId": "GetPlayerSessionLifecycleV1Session",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerSessionLifecyclePlayerSessionState"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the login info of the player. Subscribe to this endpoint then make a POST to be notified when player has been logged in",
        "tags": [
          "Plugins",
          "Plugin player-session-lifecycle",
          "Subscribable"
        ]
      },
      "post": {
        "description": "Automatically attempt to handle RSO processing up to the point the player is logged in.",
        "operationId": "PostPlayerSessionLifecycleV1Session",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerSessionLifecycleInitiateLoginSessionRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "InitiateLoginSessionRequest"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Create a session used to retrieve common player authentication information.",
        "tags": [
          "Plugins",
          "Plugin player-session-lifecycle"
        ]
      },
      "put": {
        "operationId": "PutPlayerSessionLifecycleV1Session",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerSessionLifecycleInitiateLoginSessionRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "InitiateLoginSessionRequest"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update a session used to retrieve common player authentication information.",
        "tags": [
          "Plugins",
          "Plugin player-session-lifecycle"
        ]
      }
    },
    "/playstation-account/v1/authorization": {
      "post": {
        "operationId": "PostPlaystationAccountV1Authorization",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaystationAccountAuthorizationParameters"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "AuthorizationParameters"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaystationAccountAuthorizationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Gets authorization from the Playstation Network Account of the player logged in the Playstation Network",
        "tags": [
          "Plugins",
          "Plugin playstation-account"
        ]
      }
    },
    "/playstation-account/v1/authorization-consent": {
      "get": {
        "operationId": "GetPlaystationAccountV1AuthorizationConsent",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Authorization consent status for PlayStation",
        "tags": [
          "Plugins",
          "Plugin playstation-account",
          "Subscribable"
        ]
      },
      "put": {
        "operationId": "PutPlaystationAccountV1AuthorizationConsent",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "AuthorizationConsent"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update authorization consent status for PlayStation",
        "tags": [
          "Plugins",
          "Plugin playstation-account"
        ]
      }
    },
    "/playstation-account/v1/player-nickname": {
      "get": {
        "operationId": "GetPlaystationAccountV1PlayerNickname",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Gets the player nickname of the Playstation Account for the player logged in the Playstation device",
        "tags": [
          "Plugins",
          "Plugin playstation-account"
        ]
      }
    },
    "/playstation-account/v1/user": {
      "get": {
        "operationId": "GetPlaystationAccountV1User",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaystationAccountUser"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve Playstation profile and PSN account info",
        "tags": [
          "Plugins",
          "Plugin playstation-account",
          "Subscribable"
        ]
      },
      "post": {
        "operationId": "PostPlaystationAccountV1User",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Tries to sign in a player",
        "tags": [
          "Plugins",
          "Plugin playstation-account"
        ]
      }
    },
    "/plugin-manager/v1/status": {
      "get": {
        "operationId": "GetPluginManagerV1Status",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginManagerResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the status of the plugin manager.",
        "tags": [
          "Plugins",
          "Plugin Manager",
          "Plugin Manager Diagnostics"
        ]
      }
    },
    "/plugin-manager/v2/descriptions": {
      "get": {
        "operationId": "GetPluginManagerV2Descriptions",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PluginDescriptionResource"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get all plugin descriptions.",
        "tags": [
          "Plugins",
          "Plugin Manager",
          "Plugin Manager Info"
        ]
      }
    },
    "/plugin-manager/v2/descriptions/{plugin}": {
      "get": {
        "operationId": "GetPluginManagerV2DescriptionsByPlugin",
        "parameters": [
          {
            "description": "Plugin name",
            "in": "path",
            "name": "plugin",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginDescriptionResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get a plugin description.",
        "tags": [
          "Plugins",
          "Plugin Manager",
          "Plugin Manager Info"
        ]
      }
    },
    "/plugin-manager/v2/plugins": {
      "get": {
        "operationId": "GetPluginManagerV2Plugins",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PluginResource"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get diagnostic information for all plugins.",
        "tags": [
          "Plugins",
          "Plugin Manager",
          "Plugin Manager Diagnostics"
        ]
      }
    },
    "/plugin-manager/v2/plugins/{plugin}": {
      "get": {
        "operationId": "GetPluginManagerV2PluginsByPlugin",
        "parameters": [
          {
            "description": "Plugin name",
            "in": "path",
            "name": "plugin",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get diagnostic information for a single plugin.",
        "tags": [
          "Plugins",
          "Plugin Manager",
          "Plugin Manager Diagnostics"
        ]
      }
    },
    "/prime-gaming/v1/login": {
      "delete": {
        "description": "\n**PrimeGamingPrimeGamingLoginResponse**\nLoginStatus consisting of:\n* `status`: The current state of the login with Amazon. One of: `logged_out`, `logging_in`, `logged_in`, `logging_out`, `error` (PrimeGamingPrimeGamingLoginStatus enum)\n* `amazonAccessToken`: The access token of the Amazon login, or empty `\"\"` if none is present.\n",
        "operationId": "DeletePrimeGamingV1Login",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrimeGamingPrimeGamingLoginResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Logout from Amazon",
        "tags": [
          "Plugins",
          "Plugin prime-gaming"
        ]
      },
      "get": {
        "description": "\n**PrimeGamingPrimeGamingLoginResponse**\n* `status`: The current state of the login with Amazon. One of: `logged_out`, `logging_in`, `logged_in`, `logging_out`, `error` (PrimeGamingPrimeGamingLoginStatus enum)\n* `amazonAccessToken`: The access token of the Amazon login, or empty `\"\"` if none is present.\n",
        "operationId": "GetPrimeGamingV1Login",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrimeGamingPrimeGamingLoginResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the Amazon login status",
        "tags": [
          "Plugins",
          "Plugin prime-gaming",
          "Subscribable"
        ]
      },
      "post": {
        "description": "\n**PrimeGamingPrimeGamingLoginResponse**\n* `status`: The current state of the login with Amazon. One of: `logged_out`, `logging_in`, `logged_in`, `logging_out`, `error` (PrimeGamingPrimeGamingLoginStatus enum)\n* `amazonAccessToken`: The access token of the Amazon login, or empty `\"\"` if none is present.",
        "operationId": "PostPrimeGamingV1Login",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrimeGamingPrimeGamingLoginResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Initiate Login with Amazon to enable Prime Gaming",
        "tags": [
          "Plugins",
          "Plugin prime-gaming"
        ]
      }
    },
    "/prime-gaming/v1/supported": {
      "get": {
        "description": "\n**PrimeGamingPrimeGamingSupportStatus**\n* `supported`: true if Prime Gaming is supported in this game, false otherwise\n* `details`: Description about why Prime Gaming may not be supported in this game. This is for debugging purposes only.\n",
        "operationId": "GetPrimeGamingV1Supported",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrimeGamingPrimeGamingSupportStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Check whether Prime Gaming is supported on the current platform",
        "tags": [
          "Plugins",
          "Plugin prime-gaming"
        ]
      }
    },
    "/privacy/v1/tracking": {
      "get": {
        "description": "\n**iOS specific considerations**\n\nWhen the setting is changed while the game is in the background, the RiotGamesApi currently does not\nimmediately get notified of a change in tracking permissions, but checks again as those permissions\nare required, and notifies on change. If games need real-time access to tracking settings after a\nbackground, calling this endpoint after a return from background will force the SDK to look for\nsetting changes immediately and will also trigger a notification if the value has changed.\n\n**Response Codes**\n- `200`: Privacy settings and state are available.\n\n**Data**\n- `canUseTracking`: If `true`, the player's tracking information can be used.\n- `canRequestTrackingPermission`: If `true`, POST /privacy/v1/tracking/request-permission to request\n  permission to track the player.\n- `state`: Indicates if we have not yet requested tracking permissions (`Unrequested`), if we are\n  in the process of requesting permission to track (`Requesting`), and if we have completed that\n  request at any time in the past (`Completed`).\n",
        "operationId": "GetPrivacyV1Tracking",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacyPrivacySettings"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves privacy tracking settings and state.",
        "tags": [
          "Plugins",
          "Plugin privacy"
        ]
      }
    },
    "/privacy/v1/tracking/request-permission": {
      "post": {
        "description": "\n**Response Codes**\n- `200`: Request is in flight, subscribe to `/privacy/v1/tracking` for updates.\n- `405`: Unable to request permission for this platform.\n- `409`: A request for permission is already in flight, or is unnecessary (for instance, if the\n  player has declined tracking.)\n- `500`: The Info.plist file for the app is missing a NSUserTrackingUsageDescription entry. The\n  Apple APIs cannot function without it.\n",
        "operationId": "PostPrivacyV1TrackingRequestPermission",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Ask the player for permission to track them via telemetry",
        "tags": [
          "Plugins",
          "Plugin privacy"
        ]
      }
    },
    "/private-settings/v1/settings": {
      "delete": {
        "operationId": "DeletePrivateSettingsV1Settings",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Clear all private settings",
        "tags": [
          "Plugins",
          "Plugin private-settings"
        ]
      }
    },
    "/private-settings/v1/settings/{userid}/{key}": {
      "get": {
        "operationId": "GetPrivateSettingsV1SettingsByUseridByKey",
        "parameters": [
          {
            "in": "path",
            "name": "userid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "For facilitating testing. Plugins should access private-settings via config key `private.user.<userid>.<key>`.",
        "tags": [
          "Plugins",
          "Plugin private-settings",
          "Internal"
        ]
      },
      "put": {
        "operationId": "PutPrivateSettingsV1SettingsByUseridByKey",
        "parameters": [
          {
            "in": "path",
            "name": "userid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "value"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update an individual private setting configuration. Upon success, configuration data within `private.user.<userid>.<key>` is updated and platform-specific settings 'save' systems are notified.",
        "tags": [
          "Plugins",
          "Plugin private-settings",
          "Internal"
        ]
      }
    },
    "/private-settings/v1/token/{userid}": {
      "get": {
        "description": "API only enabled when `private-settings.multi-user-mode` is set to `true` (Consoles default `true`, else `false`).\n\n`token` refers to a compressed and url-safe base64 encoded token of private settings for the user.\n\n`userId` in this API refers to the platform-specific identifier for an active profile or user account.\n\n * xbox: XUID\n * playstation: Account ID\n * switch: NSA ID\n\nPlatforms not listed do not need to use this API, as private settings persistence is managed by this SDK.",
        "operationId": "GetPrivateSettingsV1TokenByUserid",
        "parameters": [
          {
            "in": "path",
            "name": "userid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Only valid after a token has been restored or reset via PUT. Subscribe (or call) to this endpoint to receive updates on modifications to the private-settings for the given `userId`. Host applications should include this token with platform-specific data saves for the `userId`.",
        "tags": [
          "Plugins",
          "Plugin private-settings",
          "Subscribable"
        ]
      },
      "put": {
        "description": "Only call once per user, per session.\n\nAPI only enabled when `private-settings.multi-user-mode` is set to `true` (Consoles default `true`, else `false`).\n\n`token` refers to a compressed and url-safe base64 encoded token of private settings for the user.\n\n`userId` in this API refers to the platform-specific identifier for an active profile or user account.\n\n * xbox: XUID\n * playstation: Account ID\n * switch: NSA ID\n\nPlatforms not listed do not need to use this API, as private settings persistence is managed by this SDK.",
        "operationId": "PutPrivateSettingsV1TokenByUserid",
        "parameters": [
          {
            "in": "path",
            "name": "userid",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "",
          "required": false,
          "x-param-name": "token"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Submit settings token after loading last-known saved data for the current device user.\nIf no save data or token exists for user, submit an no token or an empty string to reset private-settings for user.",
        "tags": [
          "Plugins",
          "Plugin private-settings"
        ]
      }
    },
    "/product-integration-deps/v1/app-repair/apply-requests/products/{productId}/patchlines/{patchlineId}": {
      "delete": {
        "description": "This removes a apply request. This should be called once the repair has been completed.",
        "operationId": "DeleteProductIntegrationDepsV1AppRepairApplyRequestsProductsByProductIdPatchlinesByPatchlineId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Removes a apply request.",
        "tags": [
          "Plugins",
          "Plugin product-integration-deps"
        ]
      },
      "get": {
        "description": "It will return the apply request that matches the provided product/patchline for a running, or previously running game. Apply requests should be created via the product-integration plugin when games would like Riot Client to repair their game after it closes.",
        "operationId": "GetProductIntegrationDepsV1AppRepairApplyRequestsProductsByProductIdPatchlinesByPatchlineId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationDepsAppRepairApplyRequest"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the game repair request for the matching product/patchline",
        "tags": [
          "Plugins",
          "Plugin product-integration-deps",
          "Subscribable"
        ]
      },
      "put": {
        "description": "This adds a new apply request and notify out of the new resource. Apply requests should be created via the product-integration plugin when games would like Riot Client to repair their game after it closes.",
        "operationId": "PutProductIntegrationDepsV1AppRepairApplyRequestsProductsByProductIdPatchlinesByPatchlineId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationDepsAppRepairApplyRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "apply-request"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Applies a game repair by opening Riot Client and repairing the game (on Desktop).",
        "tags": [
          "Plugins",
          "Plugin product-integration-deps"
        ]
      }
    },
    "/product-integration-deps/v1/app-update/apply-requests/products/{productId}/patchlines/{patchlineId}": {
      "delete": {
        "description": "This removes a apply request. This should be called once the update has been completed.",
        "operationId": "DeleteProductIntegrationDepsV1AppUpdateApplyRequestsProductsByProductIdPatchlinesByPatchlineId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Removes a apply request.",
        "tags": [
          "Plugins",
          "Plugin product-integration-deps"
        ]
      },
      "get": {
        "description": "It will return the apply request that matches the provided product/patchline for a running, or previously running game. Apply requests should be created via the product-integration plugin when games would like Riot Client to update their game after it closes.",
        "operationId": "GetProductIntegrationDepsV1AppUpdateApplyRequestsProductsByProductIdPatchlinesByPatchlineId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationDepsAppUpdateApplyRequest"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the game update request for the matching product/patchline",
        "tags": [
          "Plugins",
          "Plugin product-integration-deps",
          "Subscribable"
        ]
      },
      "put": {
        "description": "This adds a new apply request and notify out of the new resource. Apply requests should be created via the product-integration plugin when games would like Riot Client to update their game after it closes.",
        "operationId": "PutProductIntegrationDepsV1AppUpdateApplyRequestsProductsByProductIdPatchlinesByPatchlineId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationDepsAppUpdateApplyRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "apply-request"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Applies a game update by opening Riot Client and patching the game (on Desktop) or exiting to the App Store (on Mobile).",
        "tags": [
          "Plugins",
          "Plugin product-integration-deps"
        ]
      }
    },
    "/product-integration-deps/v1/app-update/statuses/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "description": "This returns the app update status for a given product and patchline.",
        "operationId": "GetProductIntegrationDepsV1AppUpdateStatusesProductsByProductIdPatchlinesByPatchlineId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationDepsAppUpdateStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the current app update status for a given product and patchline",
        "tags": [
          "Plugins",
          "Plugin product-integration-deps",
          "Subscribable"
        ]
      },
      "put": {
        "description": "This sets the app update status for a given product and patchline, allowing a game to respond to whether or not it requires an update.",
        "operationId": "PutProductIntegrationDepsV1AppUpdateStatusesProductsByProductIdPatchlinesByPatchlineId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationDepsAppUpdateStatus"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "status"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Push the current app update status for a given product and patchline",
        "tags": [
          "Plugins",
          "Plugin product-integration-deps"
        ]
      }
    },
    "/product-integration/v1/app-repair/apply": {
      "delete": {
        "operationId": "DeleteProductIntegrationV1AppRepairApply",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Use this to cancel a game repair that was previously requested.",
        "tags": [
          "Plugins",
          "Plugin product-integration"
        ]
      },
      "put": {
        "description": "Applies a game repair by opening Riot Client and repairing the game once the game is closed (on Desktop).",
        "operationId": "PutProductIntegrationV1AppRepairApply",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationProductIntegrationAppRepairBody"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "repairBody"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Applies a game repair by opening Riot Client and repairing the game once the game is closed (on Desktop).",
        "tags": [
          "Plugins",
          "Plugin product-integration"
        ]
      }
    },
    "/product-integration/v1/app-repair/immediate-repair": {
      "put": {
        "description": "\n**Notes**\n* Allows you to perform a partial repair on a set of files without having to wait or game client to exit. Only use this if you're\nabsolutely certain that the files are not currently in use by the client.\n* Immediate repair does not open Riot Client so the game is responsible for displaying repair progress.\n\n**Data**\n* `files`: a list of file paths for files that need to be repaired. If none specified then the patcher will perform a full repair. File paths must\nbe relative to the install root. Does not accept wildcard * symbols or ~ for home directory.\n",
        "operationId": "PutProductIntegrationV1AppRepairImmediateRepair",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationProductIntegrationAppImmediateRepairRequestBody"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "file_paths"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationProductIntegrationAppImmediateRepairResponseBody"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Starts a game repair and returns a repair status callback path.",
        "tags": [
          "Plugins",
          "Plugin product-integration"
        ]
      }
    },
    "/product-integration/v1/app-update/apply": {
      "put": {
        "description": "Applies a game update by opening Riot Client and patching the game (on Desktop) or exiting to the App Store (on Mobile).",
        "operationId": "PutProductIntegrationV1AppUpdateApply",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Applies a game update by opening Riot Client and patching the game (on Desktop) or exiting to the App Store (on Mobile).",
        "tags": [
          "Plugins",
          "Plugin product-integration"
        ]
      }
    },
    "/product-integration/v1/app-update/status": {
      "get": {
        "description": "Indicates the state of the primary patchline (or App Store app) for the running game.",
        "operationId": "GetProductIntegrationV1AppUpdateStatus",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationProductIntegrationAppUpdateStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Indicates the state of the primary patchline (or App Store app) for the running game.",
        "tags": [
          "Plugins",
          "Plugin product-integration",
          "Subscribable"
        ]
      }
    },
    "/product-integration/v1/debug/app-repair/apply": {
      "delete": {
        "description": "The session id should match one from a running game",
        "operationId": "DeleteProductIntegrationV1DebugAppRepairApply",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "sessionId"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Debug endpoint to cancel a repair by session id",
        "tags": [
          "Plugins",
          "Plugin product-integration",
          "Internal"
        ]
      },
      "put": {
        "description": "The session id should match one from a running game",
        "operationId": "PutProductIntegrationV1DebugAppRepairApply",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationAppRepairApplyRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "debugRepairBody"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Debug endpoint to apply a repair by session id",
        "tags": [
          "Plugins",
          "Plugin product-integration",
          "Internal"
        ]
      }
    },
    "/product-integration/v1/debug/app-repair/immediate-repair": {
      "put": {
        "description": "\n**Notes**\n* Allows you to perform a partial repair on a set of files without having to wait or game client to exit. Only use this if you're\nabsolutely certain that the files are not currently in use by the client.\n* Immediate repair does not open Riot Client so the game is responsible for displaying repair progress.\n\n**Data**\n* `files`: a list of file paths for files that need to be repaired. If none specified then the patcher will perform a full repair. File paths must\nbe relative to the install root. Does not accept wildcard * symbols or ~ for home directory.\n",
        "operationId": "PutProductIntegrationV1DebugAppRepairImmediateRepair",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationAppImmediateRepairRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "file_paths"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationProductIntegrationAppImmediateRepairResponseBody"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Starts a game repair and returns a repair status callback path.",
        "tags": [
          "Plugins",
          "Plugin product-integration",
          "Internal"
        ]
      }
    },
    "/product-integration/v1/debug/app-update/apply": {
      "put": {
        "description": "The session id should match one from a running game",
        "operationId": "PutProductIntegrationV1DebugAppUpdateApply",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "sessionId"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Debug endpoint to apply an update by session id",
        "tags": [
          "Plugins",
          "Plugin product-integration",
          "Internal"
        ]
      }
    },
    "/product-integration/v1/debug/app-update/statuses": {
      "get": {
        "description": "This will return a map of session ids for open games to update statuses",
        "operationId": "GetProductIntegrationV1DebugAppUpdateStatuses",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ProductIntegrationDebugAppUpdateStatus"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Debug endpoint to get a list of all the app update statuses",
        "tags": [
          "Plugins",
          "Plugin product-integration",
          "Internal"
        ]
      }
    },
    "/product-integration/v1/debug/app-update/statuses/{sessionId}": {
      "get": {
        "description": "The session id should match one from a running game",
        "operationId": "GetProductIntegrationV1DebugAppUpdateStatusesBySessionId",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationProductIntegrationAppUpdateStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Debug endpoint to get an update status by session id",
        "tags": [
          "Plugins",
          "Plugin product-integration",
          "Internal"
        ]
      },
      "put": {
        "description": "Debug endpoint to update the app's update status by session id",
        "operationId": "PutProductIntegrationV1DebugAppUpdateStatusesBySessionId",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationProductIntegrationAppUpdateStatus"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "updateStatus"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Debug endpoint to update the app's update status by session id",
        "tags": [
          "Plugins",
          "Plugin product-integration",
          "Internal"
        ]
      }
    },
    "/product-integration/v1/detached-sessions": {
      "get": {
        "operationId": "GetProductIntegrationV1DetachedSessions",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProductIntegrationDetachedSession"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Finds standalone external product sessions from other closed or active instances of this application",
        "tags": [
          "Plugins",
          "Plugin product-integration"
        ]
      }
    },
    "/product-integration/v1/settings-token": {
      "post": {
        "operationId": "PostProductIntegrationV1SettingsToken",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationSettingsTokenRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationSettingsToken"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Generate a token that can be used to configure a standalone instance of the SDK running for a future instance of the given product",
        "tags": [
          "Plugins",
          "Plugin product-integration"
        ]
      }
    },
    "/product-integration/v1/signout": {
      "post": {
        "operationId": "PostProductIntegrationV1Signout",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Requests signout from the Riot Platform for all running products, if permitted for requesting product",
        "tags": [
          "Plugins",
          "Plugin product-integration"
        ]
      }
    },
    "/product-integration/v1/signout/permission": {
      "get": {
        "description": "If an error is returned, signout is not allowed. This is intended to be called by desktop games that are launched by Riot Client. Mobile and console products may call it and it will always be Allowed. Callers can use this information to take specific action (e.g. showing signout button or not).",
        "operationId": "GetProductIntegrationV1SignoutPermission",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationSignoutPermission"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Indicates if a product is allowed to request signout from the Riot Platform for all running products",
        "tags": [
          "Plugins",
          "Plugin product-integration"
        ]
      }
    },
    "/product-localization/v1/data": {
      "get": {
        "operationId": "GetProductLocalizationV1Data",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ProductLocalizationProductLocalizationData"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns loc plugin data - for triaging issues with bad or missing loc data",
        "tags": [
          "Plugins",
          "Plugin product-localization",
          "Subscribable",
          "Internal"
        ]
      }
    },
    "/product-localization/v1/products/{productId}/patchlines/{patchlineId}/translations/{locale}": {
      "get": {
        "operationId": "GetProductLocalizationV1ProductsByProductIdPatchlinesByPatchlineIdTranslationsByLocale",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "locale",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns translations for a specified patchline and locale or fetches them if they are not yet fetched",
        "tags": [
          "Plugins",
          "Plugin product-localization",
          "Subscribable"
        ]
      }
    },
    "/product-localization/v1/products/{productId}/translations/{locale}": {
      "get": {
        "operationId": "GetProductLocalizationV1ProductsByProductIdTranslationsByLocale",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "locale",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns translations for a specified product and locale or fetches them if they are not yet fetched",
        "tags": [
          "Plugins",
          "Plugin product-localization",
          "Subscribable"
        ]
      }
    },
    "/product-localization/v1/translate": {
      "post": {
        "operationId": "PostProductLocalizationV1Translate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductLocalizationTranslateRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductLocalizationTranslateResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "DEPRECATED - Returns a translation string(s) for given keys, if found, in Riot Client's locale",
        "tags": [
          "Plugins",
          "Plugin product-localization"
        ]
      }
    },
    "/product-localization/v2/translate": {
      "post": {
        "operationId": "PostProductLocalizationV2Translate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductLocalizationTranslateRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductLocalizationTranslateResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns a translation string(s) for given keys, if found",
        "tags": [
          "Plugins",
          "Plugin product-localization"
        ]
      }
    },
    "/product-metadata/v1/cookies": {
      "get": {
        "description": "Returns a list of cookies associated with URIs that point to patchline resources.\n\nIt's not necessary to use the results of this endpoint manually; when the list is updated, `/cookie-jar/v1/cookies` is automatically updated with the new set of cookies.",
        "operationId": "GetProductMetadataV1Cookies",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataCookieVector"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves all cookies necessary to access any URI associated with any patchline.",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Subscribable"
        ]
      }
    },
    "/product-metadata/v1/debug/mock-data/{source}": {
      "get": {
        "description": "`source` may be one of `public` or `player`, indiciating which data set from client-config the mock data represents.",
        "operationId": "GetProductMetadataV1DebugMockDataBySource",
        "parameters": [
          {
            "in": "path",
            "name": "source",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataDebugClientConfigSource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves the current set of mock data for the plugin.",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Internal"
        ]
      },
      "put": {
        "description": "`source` may be one of `public` or `player`, indiciating which data set from client-config the mock data represents.\n\nThe entire data set is replaced in one call; partial updates are not supported. The best way to edit the current set of data is to use `GET /debug/mock-data`, modify the result, and `PUT` using this endpoint.\n\nSome minor fixups are performed with the provided data to ensure it is consistent. The plugin treats this as a 'oh hey, there is new data for client-config' event, and behaves appropriately.",
        "operationId": "PutProductMetadataV1DebugMockDataBySource",
        "parameters": [
          {
            "in": "path",
            "name": "source",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductMetadataDebugClientConfigSource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "in"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Sets the current set of mock data for the plugin.",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Internal"
        ]
      }
    },
    "/product-metadata/v1/debug/mock-mode": {
      "delete": {
        "description": "When leaving mock mode, all data is refreshed from client-config and restored to normal.",
        "operationId": "DeleteProductMetadataV1DebugMockMode",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Leaves mock mode, and deletes mock data.",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Internal"
        ]
      },
      "get": {
        "description": "The return type is a boolean -- `true` indicates that plugin data is currently being mocked.",
        "operationId": "GetProductMetadataV1DebugMockMode",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns whether the plugin is in mock mode or not.",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Internal"
        ]
      },
      "put": {
        "description": "When entering mock mode, the current data set from client-config is copied, and further updates from client-config are ignored. The plugin otherwise tries to behave as it would normally, for instance, private products will only be listed when signed in.\n\nUse the `/debug/mock-data` endpoint to get/set mocked data in this mode.",
        "operationId": "PutProductMetadataV1DebugMockMode",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Enters mock mode, which allows using mock product and patchline data.",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Internal"
        ]
      }
    },
    "/product-metadata/v1/definitions/products": {
      "get": {
        "description": "Returns the same data available via the `/products` resource, except patchlines are returned as a list of patchline IDs, rather than full patchline definitions.",
        "operationId": "GetProductMetadataV1DefinitionsProducts",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataProductDefinitionMap"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve brief definitions of all entitled products.",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Subscribable"
        ]
      }
    },
    "/product-metadata/v1/definitions/products/{productId}": {
      "get": {
        "description": "Returns the same data available via the `/products/{productId}` resource, except patchlines are returned as a list of patchline IDs, rather than full patchline definitions.",
        "operationId": "GetProductMetadataV1DefinitionsProductsByProductId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataProductDefinition"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a brief definition of a specific product.",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Subscribable"
        ]
      }
    },
    "/product-metadata/v1/products/{productId}/patchlines/{patchlineId}/secondary-patchlines": {
      "get": {
        "description": "Returns a list of secondary patchlines from the specified patchline inside the specified product, including associated metadata.",
        "operationId": "GetProductMetadataV1ProductsByProductIdPatchlinesByPatchlineIdSecondaryPatchlines",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataSecondaryPatchlineMap"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves a list of secondary patchlines.",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Subscribable"
        ]
      }
    },
    "/product-metadata/v1/products/{productId}/patchlines/{patchlineId}/secondary-patchlines/{secondaryPatchlineId}": {
      "get": {
        "description": "Returns secondary patchline metadata from the specified patchline inside the specified product.",
        "operationId": "GetProductMetadataV1ProductsByProductIdPatchlinesByPatchlineIdSecondaryPatchlinesBySecondaryPatchlineId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "secondaryPatchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataSecondaryPatchlineMetadata"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves a secondary patchline within a patchline.",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Subscribable"
        ]
      }
    },
    "/product-metadata/v1/publish-states/{configType}": {
      "get": {
        "description": "Returns Published or NotPublished",
        "operationId": "GetProductMetadataV1PublishStatesByConfigType",
        "parameters": [
          {
            "in": "path",
            "name": "configType",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataPublishState"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves the publish state of products of config type (public or player).",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Subscribable"
        ]
      }
    },
    "/product-metadata/v2/products": {
      "get": {
        "description": "Returns all entitled products, with all metadata for patchlines and secondary patchlines associated with the product.",
        "operationId": "GetProductMetadataV2Products",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataProductMetadataMap"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves a full list of all entitled products and patchlines.",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Subscribable"
        ]
      }
    },
    "/product-metadata/v2/products/{productId}": {
      "get": {
        "description": "Returns a single entitled product, with all metadata for patchlines and secondary patchlines associated with the product.",
        "operationId": "GetProductMetadataV2ProductsByProductId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataProductMetadata"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves a single product and all its entitled patchlines.",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Subscribable"
        ]
      }
    },
    "/product-metadata/v2/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "description": "Returns a single patchline within a product, with all associated metadata, including any secondary patchlines.",
        "operationId": "GetProductMetadataV2ProductsByProductIdPatchlinesByPatchlineId",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataPatchlineMetadata"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves a single patchline.",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Subscribable"
        ]
      }
    },
    "/product-metadata/v2/products/{productId}/player-affinity-token": {
      "get": {
        "description": "Returns an id of single product with a map of its player affinities.",
        "operationId": "GetProductMetadataV2ProductsByProductIdPlayerAffinityToken",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataPlayerAffinityProductToken"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves player affinity token for a single product.",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Subscribable"
        ]
      }
    },
    "/product-metadata/v2/region-locale": {
      "get": {
        "operationId": "GetProductMetadataV2RegionLocale",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataRegionLocale"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the current region and locale.",
        "tags": [
          "Plugins",
          "Plugin product-metadata",
          "Subscribable"
        ]
      }
    },
    "/product-session/v1/data/path": {
      "get": {
        "operationId": "GetProductSessionV1DataPath",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the standard data folder for your application",
        "tags": [
          "Plugins",
          "Plugin product-session"
        ]
      }
    },
    "/product-session/v1/data/path/{patchline-name}": {
      "get": {
        "operationId": "GetProductSessionV1DataPathByPatchlineName",
        "parameters": [
          {
            "in": "path",
            "name": "patchline-name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the standard logs folder for a given full patchline name.",
        "tags": [
          "Plugins",
          "Plugin product-session"
        ]
      }
    },
    "/product-session/v1/external-sessions": {
      "get": {
        "operationId": "GetProductSessionV1ExternalSessions",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ProductSessionSession"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get all sessions across products external to Riot Client. e.g. just games and not the UX product.",
        "tags": [
          "Plugins",
          "Plugin product-session",
          "Subscribable"
        ]
      }
    },
    "/product-session/v1/external-sessions/{session-id}": {
      "get": {
        "operationId": "GetProductSessionV1ExternalSessionsBySessionId",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSessionSession"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the session for a specific session ID for a product external to Riot Client. e.g. just games and not the UX product.",
        "tags": [
          "Plugins",
          "Plugin product-session",
          "Subscribable"
        ]
      }
    },
    "/product-session/v1/heartbeat/{session-id}": {
      "get": {
        "operationId": "GetProductSessionV1HeartbeatBySessionId",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Deprecated. Please use POST /product-session/v2/heartbeat.",
        "tags": [
          "Plugins",
          "Plugin product-session"
        ]
      }
    },
    "/product-session/v1/host-session": {
      "get": {
        "description": "A 'host session' may be created for the application that Foundation is running within, used on mobile or console platforms.",
        "operationId": "GetProductSessionV1HostSession",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSessionSession"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Fetches the session of the 'host app', if it exists for this platform.",
        "tags": [
          "Plugins",
          "Plugin product-session",
          "Subscribable"
        ]
      },
      "post": {
        "description": "A 'host session' may be created for the application that Foundation is running within, used on mobile or console platforms.",
        "operationId": "PostProductSessionV1HostSession",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSessionSession"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "session"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Handles creation of a new session for the 'host app'",
        "tags": [
          "Plugins",
          "Plugin product-session"
        ]
      }
    },
    "/product-session/v1/host-session/id": {
      "get": {
        "description": "A 'host session' may be created for the application that Foundation is running within, used on mobile or console platforms.",
        "operationId": "GetProductSessionV1HostSessionId",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Fetches the session ID of the 'host app', if it exists for this platform.",
        "tags": [
          "Plugins",
          "Plugin product-session",
          "Subscribable"
        ]
      }
    },
    "/product-session/v1/logs/path": {
      "get": {
        "operationId": "GetProductSessionV1LogsPath",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the standard logs folder for your application",
        "tags": [
          "Plugins",
          "Plugin product-session"
        ]
      }
    },
    "/product-session/v1/logs/path/{patchline-name}": {
      "get": {
        "operationId": "GetProductSessionV1LogsPathByPatchlineName",
        "parameters": [
          {
            "in": "path",
            "name": "patchline-name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the standard logs folder for a given full patchline name.",
        "tags": [
          "Plugins",
          "Plugin product-session"
        ]
      }
    },
    "/product-session/v1/session-heartbeats/{session-id}": {
      "get": {
        "description": "The heartbeat is split out from the normal session endpoint because it changes frequently, and it would be slow to notify all the subscribers that care about game starting and stopping but not heartbeats.",
        "operationId": "GetProductSessionV1SessionHeartbeatsBySessionId",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSessionSessionHeartbeat"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "[Only intended to be called by product launchers, like Riot Client.] Get the heartbeat for a specific session ID.",
        "tags": [
          "Plugins",
          "Plugin product-session",
          "Subscribable"
        ]
      }
    },
    "/product-session/v1/sessions": {
      "get": {
        "operationId": "GetProductSessionV1Sessions",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ProductSessionSession"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get all sessions across products.",
        "tags": [
          "Plugins",
          "Plugin product-session",
          "Subscribable"
        ]
      }
    },
    "/product-session/v1/sessions/{session-id}": {
      "delete": {
        "operationId": "DeleteProductSessionV1SessionsBySessionId",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSessionSession"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "session"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "[Only intended to be called by product launchers, like Riot Client.] Handles deleting a session.",
        "tags": [
          "Plugins",
          "Plugin product-session"
        ]
      },
      "get": {
        "operationId": "GetProductSessionV1SessionsBySessionId",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSessionSession"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "[Only intended to be called by product launchers, like Riot Client.] Get the session for a specific session ID.",
        "tags": [
          "Plugins",
          "Plugin product-session",
          "Subscribable"
        ]
      },
      "post": {
        "operationId": "PostProductSessionV1SessionsBySessionId",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSessionSession"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "session"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Handles creation of a new session.",
        "tags": [
          "Plugins",
          "Plugin product-session"
        ]
      }
    },
    "/product-session/v2/heartbeat": {
      "post": {
        "description": "* Call this endpoint periodically to verify that Riot Client is still responding.\n\n* Upon your product entering the 'Gameplay' phase, Riot Client will lock patching and prevent updates to products or Riot Client in the case of a crash and restart, prioritizing launching the game promptly.\n\n* Products should include a 'User-Agent' header per RFC-0031d. \n\n* If this call fails and your sessionID is valid, then you can begin the recovery process specified in RFC-1064.\n\n* Riot Client expects this heartbeat from your application on a regular interval (once every 10-60 seconds) in order to make sure your application is not hung or otherwise unresponsive.",
        "operationId": "PostProductSessionV2Heartbeat",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSessionHeartbeatInfo"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "heartbeat-info"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Periodic heartbeat made by products to update Riot Client with state of gameplay, and to verify connectivity to Riot Client. \n\nSessionId is derived from 'session' HTTP header, or websocket authentication.",
        "tags": [
          "Plugins",
          "Plugin product-session"
        ]
      }
    },
    "/product-session/v2/heartbeat-internal/{session-id}": {
      "post": {
        "operationId": "PostProductSessionV2HeartbeatInternalBySessionId",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSessionHeartbeatInfo"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "heartbeat-info"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Internal endpoint for updating the heartbeat of an existing session.",
        "tags": [
          "Plugins",
          "Plugin product-session",
          "Internal"
        ]
      }
    },
    "/product-session/v2/heartbeat/{session-id}": {
      "post": {
        "description": "* Call this endpoint periodically to verify that Riot Client is still responding.\n\n* Upon your product entering the 'Gameplay' phase, Riot Client will lock patching and prevent updates to products or Riot Client in the case of a crash and restart, prioritizing launching the game promptly.\n\n* Products should include a 'User-Agent' header per RFC-0031d. \n\n* If this call fails and your sessionID is valid, then you can begin the recovery process specified in RFC-1064.\n\n* Riot Client expects this heartbeat from your application on a regular interval (once every 10-60 seconds) in order to make sure your application is not hung or otherwise unresponsive.",
        "operationId": "PostProductSessionV2HeartbeatBySessionId",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSessionHeartbeatInfo"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "heartbeat-info"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Periodic heartbeat made by products to update Riot Client with state of gameplay, and to verify connectivity to Riot Client. ",
        "tags": [
          "Plugins",
          "Plugin product-session"
        ]
      }
    },
    "/riot-client-auth/v1/authorization": {
      "get": {
        "description": "*Internal Riot Client API. Please don't use outside of Riot Client.*\n\nProvides the RSO Access Token for the SDK, intended for internal use by plugins that don't provide game-specific data.",
        "operationId": "GetRiotClientAuthV1Authorization",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotClientAuthApiAuthorization"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "The player's RSO tokens",
        "tags": [
          "Plugins",
          "Plugin riot-client-auth",
          "Subscribable"
        ]
      }
    },
    "/riot-client-auth/v1/home-base-country": {
      "get": {
        "description": "*Internal Riot Client API. Please don't use outside of Riot Client.*\n\nProvides the home base country provided by RSO, intended for internal use by plugins that don't provide game-specific data.",
        "operationId": "GetRiotClientAuthV1HomeBaseCountry",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotClientAuthApiHomeBaseCountry"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "The player's home base country",
        "tags": [
          "Plugins",
          "Plugin riot-client-auth",
          "Subscribable"
        ]
      }
    },
    "/riot-client-auth/v1/login-country": {
      "get": {
        "description": "*Internal Riot Client API. Please don't use outside of Riot Client.*\n\nProvides the login country provided by RSO, intended for internal use by plugins that don't provide game-specific data.",
        "operationId": "GetRiotClientAuthV1LoginCountry",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotClientAuthApiLoginCountry"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "The player's login country",
        "tags": [
          "Plugins",
          "Plugin riot-client-auth",
          "Subscribable"
        ]
      }
    },
    "/riot-client-auth/v1/rso-client": {
      "get": {
        "description": "*Internal Riot Client API. Please don't use outside of Riot Client.*\n\nProvides the RSO client ID and any other required client details for game-agnostic authorization business logic.\n\nSee [RSO's Client documentation](http://accounts.docs.rpg.riotgames.io/docs/clients/index/)For more context.",
        "operationId": "GetRiotClientAuthV1RsoClient",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotClientAuthApiClientDetails"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Fetch the SDK's RSO client details.",
        "tags": [
          "Plugins",
          "Plugin riot-client-auth",
          "Subscribable"
        ]
      }
    },
    "/riot-client-auth/v1/userinfo": {
      "get": {
        "description": "*Internal Riot Client API. Please don't use outside of Riot Client.*\n\nProvides game-agnostic, unencrypted claims about the player intended for use by Riot Client's UI and internal plugins. Note that these claims are neither signed nor encrypted, and should not be sent to remote services as authoritative.",
        "operationId": "GetRiotClientAuthV1Userinfo",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotClientAuthApiUserInfo"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Public claims about the player",
        "tags": [
          "Plugins",
          "Plugin riot-client-auth",
          "Subscribable"
        ]
      }
    },
    "/riot-login/v1/status": {
      "get": {
        "operationId": "GetRiotLoginV1Status",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotLoginLoginStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the current login state of the client",
        "tags": [
          "Plugins",
          "Plugin riot-login",
          "Subscribable"
        ]
      }
    },
    "/riot-messaging-service/v1/acknowledge": {
      "post": {
        "operationId": "PostRiotMessagingServiceV1Acknowledge",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiotMessagingServiceAcknowledgeBody"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "body"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "acknowledge RMS message received",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service"
        ]
      }
    },
    "/riot-messaging-service/v1/connect": {
      "delete": {
        "operationId": "DeleteRiotMessagingServiceV1Connect",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Schedule a disconnect request from RMS.",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service"
        ]
      },
      "post": {
        "operationId": "PostRiotMessagingServiceV1Connect",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "idToken"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Schedule a connect request to RMS.",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service"
        ]
      }
    },
    "/riot-messaging-service/v1/entitlements": {
      "delete": {
        "operationId": "DeleteRiotMessagingServiceV1Entitlements",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete session entitlements token",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service"
        ]
      },
      "post": {
        "operationId": "PostRiotMessagingServiceV1Entitlements",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiotMessagingServiceEntitlementsToken"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "token"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update session entitlements token",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service"
        ]
      }
    },
    "/riot-messaging-service/v1/message/{a}": {
      "get": {
        "description": "Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.",
        "operationId": "GetRiotMessagingServiceV1MessageByA",
        "parameters": [
          {
            "in": "path",
            "name": "a",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceMessage"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Util endpoint that responds with any cached messages for the resource based on component a",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Subscribable",
          "Deprecated"
        ]
      }
    },
    "/riot-messaging-service/v1/message/{a}/{b}": {
      "get": {
        "description": "Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.",
        "operationId": "GetRiotMessagingServiceV1MessageByAByB",
        "parameters": [
          {
            "in": "path",
            "name": "a",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "b",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceMessage"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Util endpoint that responds with any cached messages for the aggregate resource based on components a:b",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Subscribable",
          "Deprecated"
        ]
      }
    },
    "/riot-messaging-service/v1/message/{a}/{b}/{c}": {
      "get": {
        "description": "Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.",
        "operationId": "GetRiotMessagingServiceV1MessageByAByBByC",
        "parameters": [
          {
            "in": "path",
            "name": "a",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "b",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "c",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceMessage"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Subscribable",
          "Deprecated"
        ]
      }
    },
    "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}": {
      "get": {
        "description": "Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.",
        "operationId": "GetRiotMessagingServiceV1MessageByAByBByCByD",
        "parameters": [
          {
            "in": "path",
            "name": "a",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "b",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "c",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "d",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceMessage"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c:d",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Subscribable",
          "Deprecated"
        ]
      }
    },
    "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}": {
      "get": {
        "description": "Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.",
        "operationId": "GetRiotMessagingServiceV1MessageByAByBByCByDByE",
        "parameters": [
          {
            "in": "path",
            "name": "a",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "b",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "c",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "d",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "e",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceMessage"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c:d:e",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Subscribable",
          "Deprecated"
        ]
      }
    },
    "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}/{f}": {
      "get": {
        "description": "Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.",
        "operationId": "GetRiotMessagingServiceV1MessageByAByBByCByDByEByF",
        "parameters": [
          {
            "in": "path",
            "name": "a",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "b",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "c",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "d",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "e",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "f",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceMessage"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c:d:e:f",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Subscribable",
          "Deprecated"
        ]
      }
    },
    "/riot-messaging-service/v1/messages/{path}": {
      "get": {
        "description": "Subscriptions can be for a fully qualified path (mock/v1/resource), a wildcard (mock/v1/ *) or a recursive wildcard (mock/ **).\n\nNote that subscriptions for your application cannot overlap or conflict, such that a subscription for `mock/ **` cannot coincide with a subscription for `mock/v1/resource`.",
        "operationId": "GetRiotMessagingServiceV1MessagesByPath",
        "parameters": [
          {
            "allowReserved": true,
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceMessage"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Subscription endpoint to receive async notifications of push messages with the given resource path.",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Subscribable"
        ]
      }
    },
    "/riot-messaging-service/v1/reconnect": {
      "post": {
        "operationId": "PostRiotMessagingServiceV1Reconnect",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Schedule a reconnect request to RMS. For debug purposes only.",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Internal"
        ]
      }
    },
    "/riot-messaging-service/v1/session": {
      "delete": {
        "operationId": "DeleteRiotMessagingServiceV1Session",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Kill the current session, if any.",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service"
        ]
      },
      "get": {
        "operationId": "GetRiotMessagingServiceV1Session",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceSession"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Return the current session, if any.",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Subscribable"
        ]
      }
    },
    "/riot-messaging-service/v1/simulate-message": {
      "post": {
        "operationId": "PostRiotMessagingServiceV1SimulateMessage",
        "parameters": [
          {
            "in": "query",
            "name": "resource",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "payload"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Simulate an RMS message. For debug purposes only.",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Internal"
        ]
      }
    },
    "/riot-messaging-service/v1/socket": {
      "delete": {
        "operationId": "DeleteRiotMessagingServiceV1Socket",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Schedule a socket kill request. For debug purposes only.",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Internal"
        ]
      }
    },
    "/riot-messaging-service/v1/state": {
      "get": {
        "operationId": "GetRiotMessagingServiceV1State",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceState"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Return all state",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Subscribable"
        ]
      }
    },
    "/riot-messaging-service/v1/switch-servers": {
      "post": {
        "operationId": "PostRiotMessagingServiceV1SwitchServers",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Schedule a switching server request to RMS. For debug purposes only.",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Internal"
        ]
      }
    },
    "/riot-messaging-service/v1/token/refresh": {
      "post": {
        "operationId": "PostRiotMessagingServiceV1TokenRefresh",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Schedule a token refresh request to RMS. For debug purposes only.",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Internal"
        ]
      }
    },
    "/riot-messaging-service/v1/user": {
      "get": {
        "operationId": "GetRiotMessagingServiceV1User",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the PUUID that this plugin is currently authenticated for",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Subscribable"
        ]
      }
    },
    "/riot-messaging-service/v2/simulate-message": {
      "post": {
        "operationId": "PostRiotMessagingServiceV2SimulateMessage",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiotMessagingServiceMessage"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "message"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Simulate an RMS message. For debug purposes only.",
        "tags": [
          "Plugins",
          "Plugin riot-messaging-service",
          "Internal"
        ]
      }
    },
    "/riot-status/v1/debug/set-riotclient-patchline/{patchlineId}": {
      "post": {
        "operationId": "PostRiotStatusV1DebugSetRiotclientPatchlineByPatchlineId",
        "parameters": [
          {
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns raw JSON service status information for issues affecting multiple games",
        "tags": [
          "Plugins",
          "Plugin riot-status",
          "Internal"
        ]
      }
    },
    "/riot-status/v1/products/{productId}/patchlines/{patchlineId}/deployments/{deployment}": {
      "get": {
        "operationId": "GetRiotStatusV1ProductsByProductIdPatchlinesByPatchlineIdDeploymentsByDeployment",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deployment",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns raw JSON service status information for a specific game service cluster",
        "tags": [
          "Plugins",
          "Plugin riot-status"
        ]
      }
    },
    "/riot-status/v1/riotclient": {
      "get": {
        "operationId": "GetRiotStatusV1Riotclient",
        "parameters": [
          {
            "in": "query",
            "name": "patchlineId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns raw JSON service status information for issues affecting multiple games",
        "tags": [
          "Plugins",
          "Plugin riot-status"
        ]
      }
    },
    "/riotclient/app-name": {
      "get": {
        "operationId": "GetRiotclientAppName",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Application name without file extension",
        "tags": [
          "riotclient"
        ]
      }
    },
    "/riotclient/build-number": {
      "get": {
        "operationId": "GetRiotclientBuildNumber",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Numeric build number for this application",
        "tags": [
          "riotclient"
        ]
      }
    },
    "/riotclient/command-line-args": {
      "get": {
        "description": "Command line arguments are deprecated, and will be removed June 2022. Use configuration directly.",
        "operationId": "GetRiotclientCommandLineArgs",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the command line parameters for the application",
        "tags": [
          "riotclient",
          "Deprecated"
        ]
      }
    },
    "/riotclient/get_region_locale": {
      "get": {
        "operationId": "GetRiotclientGetRegionLocale",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegionLocale"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the current region and locale.",
        "tags": [
          "riotclient"
        ]
      }
    },
    "/riotclient/lifecycle": {
      "get": {
        "operationId": "GetRiotclientLifecycle",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LifecycleData"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the current lifecycle events.",
        "tags": [
          "riotclient"
        ]
      },
      "put": {
        "operationId": "PutRiotclientLifecycle",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LifecycleData"
              }
            }
          },
          "description": "AppMobile lifecycle resource",
          "required": true,
          "x-param-name": "data"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the current app lifecycle events.",
        "tags": [
          "riotclient"
        ]
      }
    },
    "/riotclient/machine-id": {
      "get": {
        "operationId": "GetRiotclientMachineId",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Base64 encoded uuid identifying the user's machine",
        "tags": [
          "riotclient"
        ]
      }
    },
    "/riotclient/new-args": {
      "post": {
        "description": "This endpoint is deprecated, and will be removed June 2022, use direct events instead (e.g. `/player-affinity/shard`.",
        "operationId": "PostRiotclientNewArgs",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "Vector of new command line arguments",
          "required": true,
          "x-param-name": "args"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Endpoint for passing in new data.",
        "tags": [
          "riotclient",
          "Deprecated"
        ]
      }
    },
    "/riotclient/product-locales/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "operationId": "GetRiotclientProductLocalesProductsByProductIdPatchlinesByPatchlineId",
        "parameters": [
          {
            "description": "The product id",
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The patchline id",
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Gets the locale of the product with the specified product and patchline id",
        "tags": [
          "riotclient"
        ]
      },
      "put": {
        "operationId": "PutRiotclientProductLocalesProductsByProductIdPatchlinesByPatchlineId",
        "parameters": [
          {
            "description": "The product id",
            "in": "path",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The patchline id",
            "in": "path",
            "name": "patchlineId",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The locale to set for the product",
          "required": true,
          "x-param-name": "locale"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Sets the locale of the product with the specified installId",
        "tags": [
          "riotclient"
        ]
      }
    },
    "/riotclient/region-locale": {
      "get": {
        "operationId": "GetRiotclientRegionLocale",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegionLocale"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the current region and locale.",
        "tags": [
          "riotclient"
        ]
      },
      "put": {
        "operationId": "PutRiotclientRegionLocale",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegionLocale"
              }
            }
          },
          "description": "Region and locale resource.",
          "required": true,
          "x-param-name": "data"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the region and locale.",
        "tags": [
          "riotclient"
        ]
      }
    },
    "/riotclient/secondary-args": {
      "get": {
        "description": "Command line arguments are deprecated, and will be removed June 2022. Use configuration directly.",
        "operationId": "GetRiotclientSecondaryArgs",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the command line parameters that occur after the '--' delimiter",
        "tags": [
          "riotclient",
          "Deprecated"
        ]
      }
    },
    "/riotclient/session-id": {
      "get": {
        "operationId": "GetRiotclientSessionId",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "UUID identifying a user interaction session. This value is created when the user session begins (i.e. mobile game open, Riot Client starts). Multiple instances of the SDK may share the same session ID if they were launched by the same Riot Client user session.",
        "tags": [
          "riotclient"
        ]
      }
    },
    "/riotclient/set_region_locale": {
      "post": {
        "operationId": "PostRiotclientSetRegionLocale",
        "parameters": [
          {
            "description": "Name of the region.",
            "in": "query",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the locale.",
            "in": "query",
            "name": "locale",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the region and locale.",
        "tags": [
          "riotclient"
        ]
      }
    },
    "/riotclient/system-info/v1/basic-info": {
      "get": {
        "operationId": "GetRiotclientSystemInfoV1BasicInfo",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/basicSystemInfo"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get basic system information: OS, memory, processor speed, and number of physical cores",
        "tags": [
          "riotclient"
        ]
      }
    },
    "/riotclient/trace": {
      "get": {
        "operationId": "GetRiotclientTrace",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves a completed scheduler trace.",
        "tags": [
          "riotclient"
        ]
      }
    },
    "/riotclient/v1/app-info": {
      "get": {
        "operationId": "GetRiotclientV1AppInfo",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppInfo"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Information about the application hosting the SDK",
        "tags": [
          "riotclient"
        ]
      }
    },
    "/riotclient/v1/platform-user": {
      "get": {
        "operationId": "GetRiotclientV1PlatformUser",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformUser"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Information about the currently active platform user",
        "tags": [
          "riotclient"
        ]
      },
      "put": {
        "operationId": "PutRiotclientV1PlatformUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformUser"
              }
            }
          },
          "description": "Platform identifier for the currently active user",
          "required": true,
          "x-param-name": "platformId"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the currently active platform user",
        "tags": [
          "riotclient"
        ]
      }
    },
    "/rnet-sanitizer/v1/containsSanitized": {
      "post": {
        "operationId": "PostRnetSanitizerV1ContainsSanitized",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnetSanitizerContainsSanitizedRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetSanitizerContainsSanitizedResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Determine if the request has a sanitized word",
        "tags": [
          "Plugins",
          "Plugin rnet-sanitizer"
        ]
      }
    },
    "/rnet-sanitizer/v1/sanitize": {
      "post": {
        "operationId": "PostRnetSanitizerV1Sanitize",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnetSanitizerSanitizeRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetSanitizerSanitizeResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Sanitize the input text(s)",
        "tags": [
          "Plugins",
          "Plugin rnet-sanitizer"
        ]
      }
    },
    "/rnet-sanitizer/v1/status": {
      "get": {
        "operationId": "GetRnetSanitizerV1Status",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetSanitizerSanitizerStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Gets the current status of the sanitizer plugin",
        "tags": [
          "Plugins",
          "Plugin rnet-sanitizer",
          "Subscribable"
        ]
      }
    },
    "/rso-auth/configuration/v3/amr-values-supported": {
      "get": {
        "operationId": "GetRsoAuthConfigurationV3AmrValuesSupported",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthConfigV3AMRValuesSupported"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns a list of supported authentication strategies.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/configuration/v3/client-id": {
      "get": {
        "operationId": "GetRsoAuthConfigurationV3ClientId",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the default client ID for this application. Only available once /v3/ready-state is marked as ready.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/configuration/v3/openid-configuration": {
      "get": {
        "operationId": "GetRsoAuthConfigurationV3OpenidConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthConfigV3OpenIdConfiguration"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the raw RSO openid configuration. This resource will be notified when the configuration is retrieved initially and when it's updated.",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Subscribable"
        ]
      }
    },
    "/rso-auth/configuration/v3/partner-auth-config": {
      "get": {
        "operationId": "GetRsoAuthConfigurationV3PartnerAuthConfig",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthConfigV3PartnerAuthConfig"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns a partner auth config",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/configuration/v3/ready-state": {
      "get": {
        "description": "The rso-auth plugin relies on asynchronous fetching of multiple resources. This endpoint reflects whether or not all of those resources have been retrieved.\n\nThis endpoint also supports subscriptions.",
        "operationId": "GetRsoAuthConfigurationV3ReadyState",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthConfigV3ReadyState"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the ready state of the rso-auth plugin",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Subscribable"
        ]
      }
    },
    "/rso-auth/v1/auth-hints/hint": {
      "delete": {
        "operationId": "DeleteRsoAuthV1AuthHintsHint",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Dismisses the current auth hint",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      },
      "get": {
        "operationId": "GetRsoAuthV1AuthHintsHint",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthHint"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the current auth hint",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Subscribable"
        ]
      },
      "post": {
        "operationId": "PostRsoAuthV1AuthHintsHint",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthAuthHint"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "hintRequest"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Creates a test auth hint",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v1/authorization": {
      "delete": {
        "description": "\nThis method destroys both the client-side authorization and revokes refresh tokens (if any) on the server. As a result, this request can fail if the authorization server is down. In the face of failure, the client still forgets the authorization, otherwise server-side downtime would prevent a player from logging out.\n\n",
        "operationId": "DeleteRsoAuthV1Authorization",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Revoke existing tokens, logging the user out.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      },
      "get": {
        "description": "When the user is logged in, this resource will be populated with data about the player:\n\n* **currentPlatformId** is the player's home platformId\n* **currentAccountId** is the account ID for the player on their home platform.\n* **subject** is the [RFC 0214g]()-defined globally unique identifier for the player.\n* **authenticationType** is the authentication mechanism used to establish the RSO session.\n\nWhile true that the player's `currentPlatformId` will usually match the `region` setting of the client, consuming plugins *must not* make this assumption. Applications *must not* create identifiers for the player by concatenating `currentAccountId` with the client's region setting. consuming plugins *should* use the `subject` to globally recognize players, but may use a concatenation of `currentPlatformId` and `currentAccountId` if subject is infeasible.\n\nIn addition, note that when a player transfers from region to region, the value of that player's `currentPlatformId` and `currentAccountId` will change, but the value of their `subject` will not.\n\n",
        "operationId": "GetRsoAuthV1Authorization",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorization"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a player's authorization status.",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Subscribable"
        ]
      }
    },
    "/rso-auth/v1/authorization/access-token": {
      "get": {
        "description": "If the player has a valid authorization, this API will return the player's access token, as well as their approximate expiration time and scope. This token can be used as the `Bearer` value of an `Authorization` header in order to make requets against services protected by RSO tokens. This token represents permission sets granted to the application by the player.\n\nAccess tokens expire. This plugin will handle refreshing access tokens automatically, but it's up to your plugin to either request an access token for each request, or subscribe to resource updated events for the token.\n\nAccess tokens are intended to be server-authoritative, despite being verifiable client-side as well. Scopes are included as a means for UIs to anticipate which scopes are available.\n\n**Note:** This API returns the token's expiry as seconds since the unix epoch. Do not trust this value locally in the client, as the player's system clock may be incorrect. This value is *deprecated*, and may be removed in a future version.\n\n",
        "operationId": "GetRsoAuthV1AuthorizationAccessToken",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAccessToken"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a player's access token.",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Subscribable"
        ]
      }
    },
    "/rso-auth/v1/authorization/error": {
      "get": {
        "description": "If the player has failed to log in via RSO, and the HTTP error code cannot uniquely disambiguate the error encountered, provides more information about the error encountered in the form of the error and errorDescription provided from RSO via OAuth errors.\n",
        "operationId": "GetRsoAuthV1AuthorizationError",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthError"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves any error received from RSO during the last authorization attempt.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v1/authorization/gas": {
      "post": {
        "description": "Executes OAuth2's [resource owner password credentials grant](https://tools.ietf.org/html/rfc6749#section-4.3) flow in order to log the user in. If successful, it will alter trigger a modification of the `/rso-auth/v1/authorization` resource and relevant sub-resources with details of the user's session. This flow is stateless, and does not create a session with the RSO server.\n\nIn circumstances where additional data is required to log the user in (such as captcha or multi-factor authentication, this method will simply fail.\n\n",
        "operationId": "PostRsoAuthV1AuthorizationGas",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthRSOPlayerCredentials"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "creds"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorization"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Log the user in with username, password and platformId.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v1/authorization/id-token": {
      "get": {
        "description": "If the player has a valid authorization, this API will return the player's id token, as well as their approximate expiration time and a JSON object of the data it includes. This token includes details about the player, signed as a means of trust. These details--called claims--are data about the player that the RSO server deems to be true at the time of authentication. There is no guarantee that these details have not changed in the interim.\n\nId tokens are only created at login, and cannot be refreshed, as the system's trust that the claims remain true decays over time. Expired Id tokens may continue to be used informationally, but *must not* be trusted.\n\n**Note:** This API returns the token's expiry as seconds since the unix epoch. Do not trust this value locally in the client, as the player's system clock may be incorrect. This value is *deprecated*, and may be removed in a future version.\n",
        "operationId": "GetRsoAuthV1AuthorizationIdToken",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthIdToken"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a player's ID token.",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Subscribable"
        ]
      }
    },
    "/rso-auth/v1/authorization/refresh": {
      "post": {
        "description": "Executes OAuth2's [refresh flow](https://tools.ietf.org/html/rfc6749#section-6) in order to refresh an expired authorization. This API is for debugging and testing only; the RSO plugin handles refresh automatically.\n\nRefreshes authorization for all clients that have currently active authorizations, the return value is from the main client RiotClient bootstraps with (the one from config)",
        "operationId": "PostRsoAuthV1AuthorizationRefresh",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorization"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Force a refresh of the RSO tokens.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v1/authorization/simulate-error": {
      "post": {
        "description": "Sets a simulated error response code to be used next time `POST`:`/rso-auth/v1/authorization/gas` occurs. Then resets to normal functionality",
        "operationId": "PostRsoAuthV1AuthorizationSimulateError",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "format": "int32",
                "maximum": 2147483647,
                "minimum": -2147483648,
                "type": "integer"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "errorCode"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Set simulated error response code for logging in",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Internal"
        ]
      }
    },
    "/rso-auth/v1/authorization/userinfo": {
      "delete": {
        "description": "This endpoint is not available until the OpenID configuration is retrieved.",
        "operationId": "DeleteRsoAuthV1AuthorizationUserinfo",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete the player userinfo",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      },
      "get": {
        "description": "If the player has a valid access token, and the userinfo has previously been fetched, this API will return the userinfo of the player as specified by the access token's scopes.\n\nThis endpoint is not available until the OpenID configuration is retrieved.",
        "operationId": "GetRsoAuthV1AuthorizationUserinfo",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthUserInfo"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a player's userinfo.",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Subscribable"
        ]
      },
      "post": {
        "description": "If the player has a valid access token, this API will invoke RSO's userinfo endpoint to retrieve the userinfo of the player as specified by the access token's scopes.\n\nThis endpoint is not available until the OpenID configuration is retrieved.",
        "operationId": "PostRsoAuthV1AuthorizationUserinfo",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthUserInfo"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a player's userinfo from RSO.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v1/device-id": {
      "post": {
        "description": "Provides client-side settings for collecting device ID information, including a session id, collector server and merchant id. The session ID is programmatically generated by the plugin at startup.\n\nThis endpoint is not available until the OpenID configuration is retrieved.",
        "operationId": "PostRsoAuthV1DeviceId",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthDeviceId"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves device ID configuration.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v1/key/request": {
      "post": {
        "operationId": "PostRsoAuthV1KeyRequest",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthAuthorizationKeyRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "authorizationKeyRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorizationKey"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Generates an authorization key from an existing authorization. An 'authorization key' is a code and code verifier encoded together.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v1/session": {
      "delete": {
        "description": "Destroys the login session locally and on the RSO server. Local sessions will also be destroyed and will require newly authenticating to login and create a new authentication session.",
        "operationId": "DeleteRsoAuthV1Session",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Destroy the login session.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      },
      "get": {
        "description": "Returns a `SessionResponse` with details of the current state of the session. This is a subscribable end-point that will update as the state is updated.\n\nWhen not set, the type of the `SessionResponse` will be set to `unknown_authentication_response`. The return value will also include the current state of the `persistLogin` value.\n",
        "operationId": "GetRsoAuthV1Session",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthSessionResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve the current session state.",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Subscribable"
        ]
      }
    },
    "/rso-auth/v1/session/credentials": {
      "put": {
        "description": "Progresses the login flow for the session with the required player credentials.\n\nThis API should be called when prompted for `needs_authentication` from the `/rso-auth/v2/authorizations` API. Along with the user's credentials, this API will also take the `trustDevice` boolean to tell the RSO service whether or not to record this device as a trusted device to remember for use when determining trust level requirements.\n\nThis API returns a response that contains a type to determine how to follow up in the login process. If the credentials are accepted then the type will be set to `authenticated`.\n\nIf further verification is required then the type may be set to `needs_multifactor_verification`, in which case details can be found in the `MultifactorDetails`, and the required input should be PUT to `/rso-auth/v2/authentication/multifactor`\n\nIn some error cases, the `error` string may be set to indicate more information about the authentication state.\n",
        "operationId": "PutRsoAuthV1SessionCredentials",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthSessionCredentials"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "sessionCredentials"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthSessionResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Update an authentication session with credentials to login.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v1/session/login-token": {
      "put": {
        "description": "Authenticates a player using a token from rso-authenticator",
        "operationId": "PutRsoAuthV1SessionLoginToken",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthSessionLoginToken"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "sessionLoginToken"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthSessionResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Update an authentication session with a token from rso-authenticator.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v1/session/multifactor": {
      "put": {
        "description": "Progresses the login flow for the session with the required multifactor authentication.\n\nThis API should be called when prompted for `needs_multifactor_verification` after providing credentials through `/rso-auth/v2/authentication/credentials`.\n\nThe `retry` boolean can be set when calling this API to cause MFA to push the multifactor message to the user again.\nIn some error cases, the `error` string may be set to indicate more information about the authentication state.\n",
        "operationId": "PutRsoAuthV1SessionMultifactor",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthSessionMultifactor"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "sessionMultifactor"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthSessionResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Update an authentication session with multifactor input to complete login.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v1/session/persistence": {
      "get": {
        "description": "Returns a `BindingProperty` representing the serialized cookies that maintains the current session that can later be `PUT` back to restore the session.\n\nThis endpoint is only available to Internal calls (plugin-to-plugin)\n",
        "operationId": "GetRsoAuthV1SessionPersistence",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves the persistence value of this session as a `BindingProperty` which can be serialized to local storage.",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Internal"
        ]
      },
      "put": {
        "description": "Takes the `BindingProperty` and tries to rehydrate the cookies to restore the session state which can be retrieved by doing a `GET` on this endpoint.\n\nThese cookies will automatically be appended to calls to `/v2/authorizations` and `/v1/session` endpoints as part of the session to restore, refresh and continue to use the session.\n\nThis endpoint is only available to Internal calls (plugin-to-plugin)\n",
        "operationId": "PutRsoAuthV1SessionPersistence",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "persistentSession"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Takes a `BindingProperty` and restores the session state.",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Internal"
        ]
      }
    },
    "/rso-auth/v1/session/reauthentication": {
      "put": {
        "description": "Reauthenticates the session with the player password.\n\nThis API should be called when prompted for `needs_reauthentication` from the `/rso-auth/v2/authorizations` API\n\nIf the password is accepted, then the type will be set to `authenticated`.\n\nIn some error cases, the `error` string may be set to indicate more information about the authentication state.\n",
        "operationId": "PutRsoAuthV1SessionReauthentication",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthSessionReauthentication"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "sessionReauthentication"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthSessionResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Update an authentication session with player password to reauthenticate.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v1/session/signup-token": {
      "put": {
        "description": "Authenticates a player using a token from signup-api",
        "operationId": "PutRsoAuthV1SessionSignupToken",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthSessionSignup"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "sessionSignup"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthSessionResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Update an authentication session with a token from signup-api.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v1/status-message": {
      "get": {
        "operationId": "GetRsoAuthV1StatusMessage",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthStatusMessage"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the current RSO status message",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Subscribable"
        ]
      },
      "post": {
        "operationId": "PostRsoAuthV1StatusMessage",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthStatusMessage"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "statusMessage"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the RSO auth status",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v1/userinfo/refresh": {
      "post": {
        "operationId": "PostRsoAuthV1UserinfoRefresh",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "This internal endpoint can be used to force a refresh of all current UserInfos.\nThis is an expensive operation and should be only used if necessary.",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Internal"
        ]
      }
    },
    "/rso-auth/v1/userinfo/{client-id}": {
      "delete": {
        "operationId": "DeleteRsoAuthV1UserinfoByClientId",
        "parameters": [
          {
            "in": "path",
            "name": "client-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "This endpoint is not available until the OpenID configuration is retrieved.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      },
      "get": {
        "description": "If the client-id has a valid access token managed by the implicit grant mode manager, this API will return the userinfo of the player for the client-id as specified by the access token's scopes.\n\nThis endpoint is not available until the OpenID configuration is retrieved.",
        "operationId": "GetRsoAuthV1UserinfoByClientId",
        "parameters": [
          {
            "in": "path",
            "name": "client-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthUserInfo"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a player's userinfo using the implicit grant mode managed client-id and access-token.",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Subscribable"
        ]
      },
      "post": {
        "description": "If the client-id has a valid access token managed by the implicit grant mode manager, this API will return the userinfo of the player for the client-id as specified by the access token's scopes.\n\nThis endpoint is not available until the OpenID configuration is retrieved.",
        "operationId": "PostRsoAuthV1UserinfoByClientId",
        "parameters": [
          {
            "in": "path",
            "name": "client-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthUserInfo"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Refresh a player's userinfo using the implicit grant mode managed client-id and access-token.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v2/authorizations": {
      "post": {
        "description": "Attempts to retrieve the authorization associated with the `client-id` set in the `authorizationRequest`. If the player has not been logged in, then this call will prompt that a login session be established.\n\nWhen POSTing a request for authorization, the body may optionally include an array of `scope`s to be included for the authorization. Likewise, an array of `trustLevels` can be set to set the level at which the authorization state is trusted.\n\nThis API returns type: `needs_authentication` if the client requires authentication before an authorization can be presented, or type: `needs_reauthorization` if the client requires reauthentication before a new authorization can be presented, or type: `authorized` along with the `ImplicitAuthorization` field populated.\n\n",
        "operationId": "PostRsoAuthV2Authorizations",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthAuthorizationRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "authorizationRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorizationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Create a new authorization request, or retrieves authorization for an existing request.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v2/authorizations/{client-id}": {
      "delete": {
        "description": "This API will delete the local instance of the authorization associated with the client-id. This can be retrieved again by first POSTing via the `/rso-auth/v2/authorizations` API.",
        "operationId": "DeleteRsoAuthV2AuthorizationsByClientId",
        "parameters": [
          {
            "in": "path",
            "name": "client-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Remove the local instance of the authorization for the client-id.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      },
      "get": {
        "description": "If an authorization request has been created, this API will return the `ImplicitAuthorization` associated with the `client-id`. If an authorization request has not been created, one will need to be created by successfully POSTing to `/rso-auth/v2/authorizations`.\n\nOn success, this API will return type: `authorized` along with the `ImplicitAuthorization` field populated.\n\n",
        "operationId": "GetRsoAuthV2AuthorizationsByClientId",
        "parameters": [
          {
            "in": "path",
            "name": "client-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorizationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve the authorization for the client-id.",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Subscribable"
        ]
      },
      "patch": {
        "description": "If an existing authorization exists for this client ID, it will update the request with any values provided and request a fresh authorization.\n\nWhen PATCHing a request to update an existing authorization, the body may optionally include an array of `scope`s to be included for the authorization. Likewise, an array of `trustLevels` can be set to set the level at which the authorization state is trusted.\n\nThis API returns type: `needs_authentication` if the client requires authentication before an authorization can be presented, or type: `needs_reauthorization` if the client requires reauthentication before a new authorization can be presented, or type: `authorized` along with the `ImplicitAuthorization` field populated.\n\n",
        "operationId": "PatchRsoAuthV2AuthorizationsByClientId",
        "parameters": [
          {
            "in": "path",
            "name": "client-id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthAuthorizationUpdateRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "authorizationUpdateRequest"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorizationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Updates an existing authorization for a client and requests a new authorization.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      },
      "post": {
        "description": "This endpoint refreshes authorization for a given client ID and returns the resultant updated authorization",
        "operationId": "PostRsoAuthV2AuthorizationsByClientId",
        "parameters": [
          {
            "in": "path",
            "name": "client-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorization"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Refresh an authorization for a given client",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v2/config": {
      "delete": {
        "description": "Removes configuration overrides. This removes any provided configuration overrides.",
        "operationId": "DeleteRsoAuthV2Config",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Reset the RSO endpoint configuration.",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      },
      "post": {
        "description": "Overrides the configuration from RSO from the config files, if any. The url should not have a trailing slash and should be the root url for the RSO instance to be used.",
        "operationId": "PostRsoAuthV2Config",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthPublicClientConfig"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "config"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Override the default RSO configuration",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-auth/v2/partner-auth": {
      "post": {
        "description": "Endpoint to be deleted January 2023; Please use '/rso-auth/v3/partner-auth'.",
        "operationId": "PostRsoAuthV2PartnerAuth",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthPartnerCredentials"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "partnerCreds"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorization"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Log the user in with any of the accepted partner credentials",
        "tags": [
          "Plugins",
          "Plugin rso-auth",
          "Deprecated"
        ]
      }
    },
    "/rso-auth/v3/partner-auth": {
      "post": {
        "operationId": "PostRsoAuthV3PartnerAuth",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthPartnerCredentialsV3"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "partnerCreds"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorization"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Log the user in with any of the accepted partner credentials",
        "tags": [
          "Plugins",
          "Plugin rso-auth"
        ]
      }
    },
    "/rso-authenticator/v1/authentication": {
      "delete": {
        "operationId": "DeleteRsoAuthenticatorV1Authentication",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete the current authentication session.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      },
      "get": {
        "operationId": "GetRsoAuthenticatorV1Authentication",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the current state of authentication.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator",
          "Subscribable"
        ]
      },
      "put": {
        "operationId": "PutRsoAuthenticatorV1Authentication",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "authenticationPrompt"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Update the current prompt for authentication.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/apple": {
      "post": {
        "operationId": "PostRsoAuthenticatorV1AuthenticationApple",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateOpenIdConnectInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "openId"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Authenticate a player with apple open id token.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/code": {
      "post": {
        "operationId": "PostRsoAuthenticatorV1AuthenticationCode",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateCodeInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "codeExchange"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Create a new authentication session with code from a previous federated authentication.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/facebook": {
      "post": {
        "operationId": "PostRsoAuthenticatorV1AuthenticationFacebook",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateFacebookInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "facebook"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Authenticate a player with facebook access token.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/gamecenter": {
      "post": {
        "description": "Removing endpoint on Feb 2022 due to dropped support by Apple. Context JIRA ticket: SDKFEAT-633",
        "operationId": "PostRsoAuthenticatorV1AuthenticationGamecenter",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateGameCenterInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "gamecenter"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Authenticate a player with gamecenter credentials.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator",
          "Deprecated"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/google": {
      "post": {
        "operationId": "PostRsoAuthenticatorV1AuthenticationGoogle",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateOpenIdConnectInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "openId"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Authenticate a player with google open id token.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/link/apple": {
      "put": {
        "operationId": "PutRsoAuthenticatorV1AuthenticationLinkApple",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1OpenIdConnectInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "openId"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Link the current authentication with an existing account with apple open id token.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/link/code": {
      "put": {
        "operationId": "PutRsoAuthenticatorV1AuthenticationLinkCode",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "codeExchange"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Link the current authentication with a code from a previous federated authentication.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/link/facebook": {
      "put": {
        "operationId": "PutRsoAuthenticatorV1AuthenticationLinkFacebook",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1FacebookInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "facebook"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Link the current authentication with an existing account with facebook access token.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/link/gamecenter": {
      "put": {
        "operationId": "PutRsoAuthenticatorV1AuthenticationLinkGamecenter",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1GameCenterInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "gamecenter"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Link the current authentication with an existing account with gamecenter credentials.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/link/google": {
      "put": {
        "operationId": "PutRsoAuthenticatorV1AuthenticationLinkGoogle",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1OpenIdConnectInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "openId"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Link the current authentication with an existing account with google open id token.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/link/nintendo": {
      "put": {
        "operationId": "PutRsoAuthenticatorV1AuthenticationLinkNintendo",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1NintendoInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "openId"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Link the current authentication with an existing account with nintendo open id tokens.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/link/resendCode": {
      "put": {
        "operationId": "PutRsoAuthenticatorV1AuthenticationLinkResendCode",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Request that a code for linking be resent.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/link/riot-identity": {
      "put": {
        "operationId": "PutRsoAuthenticatorV1AuthenticationLinkRiotIdentity",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1RiotIdentityInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "riotIdentity"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Link the current authentication with an existing account with riot identity.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/link/status": {
      "delete": {
        "operationId": "DeleteRsoAuthenticatorV1AuthenticationLinkStatus",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete the current web linking code.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      },
      "get": {
        "operationId": "GetRsoAuthenticatorV1AuthenticationLinkStatus",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1WebLinkingStatusResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the current status of web linking.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator",
          "Subscribable"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/multifactor": {
      "post": {
        "operationId": "PostRsoAuthenticatorV1AuthenticationMultifactor",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateMultifactorInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "multifactor"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Linking player's social to their multifactor enabled riot account.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/nintendo": {
      "post": {
        "operationId": "PostRsoAuthenticatorV1AuthenticationNintendo",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateNintendoInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "openId"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Authenticate a player with nintendo open id tokens.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/playstation": {
      "post": {
        "operationId": "PostRsoAuthenticatorV1AuthenticationPlaystation",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticatePlaystationInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "id_token"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Authenticate a player with Playstation id token.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/redirect": {
      "post": {
        "operationId": "PostRsoAuthenticatorV1AuthenticationRedirect",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationRedirectInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "redirect"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Redirect the current authentication to the given url",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/riot-identity": {
      "post": {
        "operationId": "PostRsoAuthenticatorV1AuthenticationRiotIdentity",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateRiotIdentityInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "riotIdentity"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Create a new authentication with riot credentials.",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/authentication/xbox": {
      "post": {
        "operationId": "PostRsoAuthenticatorV1AuthenticationXbox",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateXboxInput"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "xbox"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Authenticate a player with Xbox xsts token and user hash",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/config": {
      "get": {
        "operationId": "GetRsoAuthenticatorV1Config",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorPluginConfigResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the current client config",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator",
          "Subscribable"
        ]
      }
    },
    "/rso-authenticator/v1/login": {
      "post": {
        "operationId": "PostRsoAuthenticatorV1Login",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1LoginRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Completes authentication given a login token",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/rso-authenticator/v1/web-authentication-url": {
      "post": {
        "operationId": "PostRsoAuthenticatorV1WebAuthenticationUrl",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1WebAuthenticationUrlRequest"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Provides a url for performing a web based authentication",
        "tags": [
          "Plugins",
          "Plugin rso-authenticator"
        ]
      }
    },
    "/scd/v1/cookies": {
      "get": {
        "operationId": "GetScdV1Cookies",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScdCookies"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the list of cookies",
        "tags": [
          "Plugins",
          "Plugin scd",
          "Subscribable"
        ]
      }
    },
    "/scd/v1/enabled": {
      "get": {
        "operationId": "GetScdV1Enabled",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScdScdEnabled"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns whether SCD communication is enabled.",
        "tags": [
          "Plugins",
          "Plugin scd",
          "Subscribable"
        ]
      },
      "post": {
        "operationId": "PostScdV1Enabled",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScdScdEnabled"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "enabled"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Activates communication to the SCD service.",
        "tags": [
          "Plugins",
          "Plugin scd"
        ]
      }
    },
    "/scd/v1/enabled-in-config": {
      "get": {
        "description": "This provides an indicator that SCD communication may become available if any requests are made and acts as an emergency kill-switch to disable requests to SCD service. Use /scd/v1/enabled to determine if SCD is currently enabled.",
        "operationId": "GetScdV1EnabledInConfig",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns whether SCD communication is enabled in confguration.",
        "tags": [
          "Plugins",
          "Plugin scd",
          "Subscribable"
        ]
      }
    },
    "/scd/v1/url-patterns/test": {
      "post": {
        "operationId": "PostScdV1UrlPatternsTest",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "url"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns whether a url refers to SCD-protected content",
        "tags": [
          "Plugins",
          "Plugin scd"
        ]
      }
    },
    "/swagger/v1/api-docs": {
      "get": {
        "operationId": "GetSwaggerV1ApiDocs",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves the API documentation",
        "tags": [
          "swagger"
        ]
      }
    },
    "/swagger/v2/swagger.json": {
      "get": {
        "operationId": "GetSwaggerV2SwaggerJson",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves the API documentation",
        "tags": [
          "swagger"
        ]
      }
    },
    "/swagger/v3/openapi.json": {
      "get": {
        "operationId": "GetSwaggerV3OpenapiJson",
        "parameters": [
          {
            "description": "Retrieve only plugin API and do not sanitize URLs",
            "in": "query",
            "name": "plugins_and_core_only",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves the API documentation",
        "tags": [
          "swagger"
        ]
      }
    },
    "/telemetry/v1/application-start-time": {
      "get": {
        "operationId": "GetTelemetryV1ApplicationStartTime",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Gets the millisecond UNIX timestamp of when the application was started.",
        "tags": [
          "telemetry"
        ]
      }
    },
    "/telemetry/v1/availability": {
      "get": {
        "operationId": "GetTelemetryV1Availability",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/CollectorAvailability"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns the availability for each telemetry ingest endpoint. This is not updated dynamically.",
        "tags": [
          "telemetry"
        ]
      }
    },
    "/telemetry/v1/common-data/{key}": {
      "post": {
        "operationId": "PostTelemetryV1CommonDataByKey",
        "parameters": [
          {
            "description": "The name of the common data key",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The value of the common data key",
          "required": true,
          "x-param-name": "value"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Adds/updates a common data key and value to be sent with every subsequent event.",
        "tags": [
          "telemetry"
        ]
      }
    },
    "/telemetry/v1/events/{eventType}": {
      "post": {
        "operationId": "PostTelemetryV1EventsByEventType",
        "parameters": [
          {
            "description": "The name of the event type",
            "in": "path",
            "name": "eventType",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "object"
              }
            }
          },
          "description": "A map of event data",
          "required": true,
          "x-param-name": "eventData"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Adds a new event to be sent to Dradis and/or other analytics/monitoring data sinks. All events will have their eventType prefixed",
        "tags": [
          "telemetry"
        ]
      }
    },
    "/telemetry/v1/metrics/{name}": {
      "put": {
        "operationId": "PutTelemetryV1MetricsByName",
        "parameters": [
          {
            "description": "Name format should indicate the source and context (i.e. 'rso.login') and must be dot-separated terms. A standard prefix for this application will be automatically applied to each sample name.",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "Metric value to report. Must be string, bool, or number.",
          "required": true,
          "x-param-name": "value"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Pushes a metric sample to a public collector endpoint.",
        "tags": [
          "telemetry"
        ]
      }
    },
    "/telemetry/v1/singular/event/{eventName}": {
      "post": {
        "operationId": "PostTelemetryV1SingularEventByEventName",
        "parameters": [
          {
            "description": "The name of the Singular event",
            "in": "path",
            "name": "eventName",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "A map of event data",
          "required": true,
          "x-param-name": "eventData"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Sends an event to Singular (hits a derivative of the Singular s2s 'event' endpoint).",
        "tags": [
          "telemetry"
        ]
      }
    },
    "/telemetry/v1/singular/session": {
      "post": {
        "operationId": "PostTelemetryV1SingularSession",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "object"
              }
            }
          },
          "description": "A map of session data",
          "required": true,
          "x-param-name": "sessionData"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Starts a session with Singular (hits the Singular s2s 'launch' endpoint).",
        "tags": [
          "telemetry"
        ]
      }
    },
    "/telemetry/v1/structured_logs": {
      "put": {
        "operationId": "PutTelemetryV1StructuredLogs",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/StructuredLogRequest"
                },
                "type": "array"
              }
            }
          },
          "description": "A list of structured log requests containing unformatted message and field data",
          "required": true,
          "x-param-name": "log"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Handles a new structured log message for pushing to a public Collector-V1 endpoint. Structured log fields must be of the following types: bool, string, float, int, uint",
        "tags": [
          "telemetry"
        ]
      }
    },
    "/telemetry/v2/events-extended/{id}": {
      "put": {
        "operationId": "PutTelemetryV2EventsExtendedById",
        "parameters": [
          {
            "description": "The ID of the event (32-character GUID or human readable string)",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedEventData"
              }
            }
          },
          "description": "A structure that contains two separate fields:\n- 'data' - A serialized event that conforms to schema specified by 'id'. Metadata field is optional for Analytics Pipeline events.\n- 'additionalFields' - An optional structure that will be sent in addition to the 'data' of the event. This additional data will be attached in a different way for each collector: for events headed to Analytics Platform, the data will be sent as a single string field containing serialized JSON. (The schema of the event must contain a field named 'additionalFields'.) For events headed to New Relic, all of the fields will be sent mixed in with the 'data', with each field name prepended with 'additionalFields.'.",
          "required": true,
          "x-param-name": "eventData"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Sends the event to the Analytics Pipeline CollectorV2 endpoint (https://data.riotgames.com). This backend differs from /v1/events as it requires schemas to be registered in the schema repository.",
        "tags": [
          "telemetry"
        ]
      }
    },
    "/telemetry/v2/events-schemaless/{id}": {
      "put": {
        "operationId": "PutTelemetryV2EventsSchemalessById",
        "parameters": [
          {
            "description": "An AP-schema-like id for this event, in `world__event__version` format.\nThis id does not need to be registered with AP. Using an id with a different format will make it difficult to query across existing data in New Relic.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "A schemaless set of key-value pairs, to be sent to New Relic as JSON. The format of the data must be compatible with New Relic.",
          "required": true,
          "x-param-name": "eventData"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Sends the event directly to New Relic, without sending the data to AP.",
        "tags": [
          "telemetry"
        ]
      }
    },
    "/telemetry/v2/events/{id}": {
      "put": {
        "operationId": "PutTelemetryV2EventsById",
        "parameters": [
          {
            "description": "The ID of the event (32-character GUID or human readable string)",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "A serialized event that conforms to schema specified by 'id'. Metadata field is optional for Analytics Pipeline events.",
          "required": true,
          "x-param-name": "eventData"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Sends the event to the Analytics Pipeline CollectorV2 endpoint (https://data.riotgames.com). This backend differs from /v1/events as it requires schemas to be registered in the schema repository.",
        "tags": [
          "telemetry"
        ]
      }
    },
    "/telemetry/v2/metadata/{schemaPrefix}/{metadataEntity}/{propertyName}": {
      "delete": {
        "operationId": "DeleteTelemetryV2MetadataBySchemaPrefixByMetadataEntityByPropertyName",
        "parameters": [
          {
            "description": "The schema 'world' prefix (i.e. riotclient, rtp, etc) to match against incoming AP events.",
            "in": "path",
            "name": "schemaPrefix",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the metadata entity that exists in every schema for the given prefix (i.e. metadata, riotclientMetadata, etc)",
            "in": "path",
            "name": "metadataEntity",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of a property to remove (i.e. rsoClient, region, locale)",
            "in": "path",
            "name": "propertyName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Deletes a property in the metadata automatically applied to a type of analytics platform event",
        "tags": [
          "telemetry"
        ]
      },
      "post": {
        "operationId": "PostTelemetryV2MetadataBySchemaPrefixByMetadataEntityByPropertyName",
        "parameters": [
          {
            "description": "The schema 'world' prefix (i.e. riotclient, rtp, etc) to match against incoming AP events.",
            "in": "path",
            "name": "schemaPrefix",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the metadata entity that exists in every schema for the given prefix (i.e. metadata, riotclientMetadata, etc)",
            "in": "path",
            "name": "metadataEntity",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of a property to set (i.e. rsoClient, region, locale)",
            "in": "path",
            "name": "propertyName",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "description": "BindingProperty that contains the value to set in the metadata.",
          "required": true,
          "x-param-name": "value"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Sets the metadata to automatically apply to a type of analytics platform event",
        "tags": [
          "telemetry"
        ]
      }
    },
    "/tencent-launcher/v1/debug/force-load": {
      "post": {
        "description": "\n            **Description**\n            A debug API to force-load the ACLSDK, even if configured off.\n            Can only be used internally for testing.\n        ",
        "operationId": "PostTencentLauncherV1DebugForceLoad",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Force-load the ACLSDK",
        "tags": [
          "Plugins",
          "Plugin tencent-launcher",
          "Internal"
        ]
      }
    },
    "/tencent-launcher/v1/login": {
      "post": {
        "description": "**Requirements**\nThis should only be used by products launched via the Tencent Launcher.\n\nThis function is disabled unless the following configuration is passedto the SDK at startup:\n* `publisher`: must be set to `tencent`\n* `auth-via-tencent-launcher`: must be set to `true`\n\nRequires ACLSDK.dll to be present. If absent, calling this functionwill return a `501` error code.\n\n\n            **Description**\n\n            Initializes the ACLSDK, retrieves the player's Tencent credentials\n            from the Tencent Launcher, and uses them to auth with RSO via the\n            partner-auth API.\n\n            **Request Arguments**\n            * `tencentGameId` - The Tencent-supplied game ID\n            * `tencentGameKey` - The Tencent-supplied game key\n\n            **Returns**\n            A successful return indicates that the player has successfully authed\n            with RSO.\n\n            A failed return indicates an error, either with ACLSDK, or the resulting\n            RSO auth.\n        ",
        "operationId": "PostTencentLauncherV1Login",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TencentLauncherTencentLauncherLoginArguments"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "arguments"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TencentLauncherAuthorization"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Initialize RSO login using mSDK credentials from the Tencent Launcher",
        "tags": [
          "Plugins",
          "Plugin tencent-launcher"
        ]
      }
    },
    "/tencent-launcher/v1/login-info": {
      "get": {
        "description": "**Requirements**\nThis should only be used by products launched via the Tencent Launcher.\n\nThis function is disabled unless the following configuration is passedto the SDK at startup:\n* `publisher`: must be set to `tencent`\n* `auth-via-tencent-launcher`: must be set to `true`\n\nRequires ACLSDK.dll to be present. If absent, calling this functionwill return a `501` error code.\n\n\n            **Description**\n            Retrieves the Tencent Launcher LoginInfo (credentials) from the\n            ACLSDK. If logged in, the response will contain the required tokens\n            for RSO auth, or for auth with other Tencent services like Midas.\n\n            This endpoint may be subscribed to, and a notification will be\n            generated when:\n            * `/login` is successfully called, containing the Tencent-specific\n              credentials,\n            * The Tencent Launcher performs a periodic refresh of the credentials.\n\n            **Returns**\n            If `/login` has not yet successfully been called, a `404` error\n            code is returned.\n\n            If the login information is available, a structure is returned\n            containing the fields:\n            * `openid`\n            * `token`\n            * `channel`\n            * `ext`\n\n            These fields should be treated as opaque.\n        ",
        "operationId": "GetTencentLauncherV1LoginInfo",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TencentLauncherTencentLauncherLoginInfo"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieves the mSDK credentials from the Tencent Launcher",
        "tags": [
          "Plugins",
          "Plugin tencent-launcher",
          "Subscribable"
        ]
      }
    },
    "/voice-chat/v1/active-product": {
      "get": {
        "operationId": "GetVoiceChatV1ActiveProduct",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the current active product",
        "tags": [
          "Plugins",
          "Plugin voice-chat"
        ]
      }
    },
    "/voice-chat/v1/audio-properties": {
      "get": {
        "operationId": "GetVoiceChatV1AudioProperties",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatAudioPropertiesResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get current audio properties",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable"
        ]
      }
    },
    "/voice-chat/v1/heartbeat-metrics": {
      "get": {
        "description": "This endpoint retrieves metrics about active sessions and products that are currently using the voice-chat plugin. It is an internal endpoint, intended for use directly by the info-radiator plugin, which manages the heartbeat cadence of the SDK.",
        "operationId": "GetVoiceChatV1HeartbeatMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatVoiceChatHeartbeatMetrics"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a set of metrics about the voice chat plugin.",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Internal"
        ]
      }
    },
    "/voice-chat/v1/initialize-provider/{productName}": {
      "post": {
        "operationId": "PostVoiceChatV1InitializeProviderByProductName",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "provider"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Eagerly initialize a provider. Needed for device settings to update before a first session is established",
        "tags": [
          "Plugins",
          "Plugin voice-chat"
        ]
      }
    },
    "/voice-chat/v1/push-to-talk": {
      "get": {
        "description": "Endpoint deleted March 2021.",
        "operationId": "GetVoiceChatV1PushToTalk",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatPushToTalkResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get voice chat push to talk configuration status",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "put": {
        "description": "Endpoint deleted March 2021.",
        "operationId": "PutVoiceChatV1PushToTalk",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUnnormalizedPushToTalkResource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "pushToTalk"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Set voice chat push to talk configuration",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Deprecated"
        ]
      }
    },
    "/voice-chat/v1/push-to-talk/check-available": {
      "post": {
        "description": "Endpoint deleted March 2021.",
        "operationId": "PostVoiceChatV1PushToTalkCheckAvailable",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "format": "int32",
                "maximum": 2147483647,
                "minimum": -2147483648,
                "type": "integer"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "prompt"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Use to check if we have permissions to start push to talk",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Deprecated"
        ]
      }
    },
    "/voice-chat/v2/devices/capture": {
      "get": {
        "operationId": "GetVoiceChatV2DevicesCapture",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VoiceChatDeviceResource"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the list of available sound capture devices",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable"
        ]
      }
    },
    "/voice-chat/v2/devices/capture/permission": {
      "get": {
        "description": "Use this endpoint to determine if the user has granted access to the microphone for voice. Returns an enum that indicates if permission is denied/granted, or if permission needs to be obtained through the prompt-for-permission endpoint.",
        "operationId": "GetVoiceChatV2DevicesCapturePermission",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatCaptureDevicePermissionStatus"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Returns true if the user has permission to use the microphone.",
        "tags": [
          "Plugins",
          "Plugin voice-chat"
        ]
      }
    },
    "/voice-chat/v2/devices/capture/prompt-for-permission": {
      "put": {
        "description": "On Mac OS, starting from 10.14 (Mojave), we must ask the user for permission to access the microphone. Until they accept the prompt, or if they decline, the microphone will be unavailable, and voice will not be transmitted.\nBefore joining a voice channel, users of this plugin should call PUT on this endpoint while being subscribed for updates to /voice-chat/v2/devices/capture/permission. If 'permission' is updated to 'true', the listener must leave and re-join the voice channel to enable the microphone.\nIf the user has already granted or denied permission, this endpoint does nothing. The endpoint always returns immediately with success.",
        "operationId": "PutVoiceChatV2DevicesCapturePromptForPermission",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Prompts the user for permission to use the microphone, if required.",
        "tags": [
          "Plugins",
          "Plugin voice-chat"
        ]
      }
    },
    "/voice-chat/v2/devices/render": {
      "get": {
        "operationId": "GetVoiceChatV2DevicesRender",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VoiceChatDeviceResource"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the list of available sound render devices",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable"
        ]
      }
    },
    "/voice-chat/v2/push-to-talk/check-available": {
      "post": {
        "operationId": "PostVoiceChatV2PushToTalkCheckAvailable",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "format": "int32",
                "maximum": 2147483647,
                "minimum": -2147483648,
                "type": "integer"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "prompt"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Use to check if we have permissions to start push to talk",
        "tags": [
          "Plugins",
          "Plugin voice-chat"
        ]
      }
    },
    "/voice-chat/v2/push-to-talk/{productName}": {
      "get": {
        "operationId": "GetVoiceChatV2PushToTalkByProductName",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatPushToTalkResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get voice chat push to talk configuration status",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable"
        ]
      },
      "put": {
        "operationId": "PutVoiceChatV2PushToTalkByProductName",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUnnormalizedPushToTalkResource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "pushToTalk"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Set voice chat push to talk configuration",
        "tags": [
          "Plugins",
          "Plugin voice-chat"
        ]
      }
    },
    "/voice-chat/v2/sessions": {
      "delete": {
        "description": "Endpoint deleted March 2021.",
        "operationId": "DeleteVoiceChatV2Sessions",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Leave all joined sessions",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Deprecated"
        ]
      },
      "get": {
        "description": "Endpoint deleted March 2021.",
        "operationId": "GetVoiceChatV2Sessions",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VoiceChatSessionResource"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the list of all current voice sessions",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "post": {
        "description": "Endpoint deleted March 2021.",
        "operationId": "PostVoiceChatV2Sessions",
        "parameters": [
          {
            "in": "header",
            "name": "JWT",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSessionResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Join a session with game-specific JWT token",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Deprecated"
        ]
      },
      "put": {
        "description": "volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n\n\nEndpoint deleted March 2021.",
        "operationId": "PutVoiceChatV2Sessions",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSessionResource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "details"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the properties for all sessions",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Deprecated"
        ]
      }
    },
    "/voice-chat/v2/sessions/{id}": {
      "delete": {
        "description": "Endpoint deleted March 2021.",
        "operationId": "DeleteVoiceChatV2SessionsById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Leave a session",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Deprecated"
        ]
      },
      "get": {
        "description": "Endpoint deleted March 2021.",
        "operationId": "GetVoiceChatV2SessionsById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSessionResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get session details",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "put": {
        "description": "volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n\n\nEndpoint deleted March 2021.",
        "operationId": "PutVoiceChatV2SessionsById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSessionResource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "details"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the properties for a session",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Deprecated"
        ]
      }
    },
    "/voice-chat/v2/sessions/{sessionId}/participants/{participantId}": {
      "get": {
        "description": "Endpoint deleted March 2021.",
        "operationId": "GetVoiceChatV2SessionsBySessionIdParticipantsByParticipantId",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "participantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatParticipantResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get participant details",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "put": {
        "description": "Endpoint deleted March 2021.",
        "operationId": "PutVoiceChatV2SessionsBySessionIdParticipantsByParticipantId",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "participantId",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateParticipantResource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "participant"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update local participant details",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Deprecated"
        ]
      }
    },
    "/voice-chat/v2/settings": {
      "get": {
        "description": "Endpoint deleted March 2021.",
        "operationId": "GetVoiceChatV2Settings",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSettingsResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get current voice chat settings",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "put": {
        "description": "Endpoint deleted March 2021.",
        "operationId": "PutVoiceChatV2Settings",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSettingsResource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "settings"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update current voice chat settings",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Deprecated"
        ]
      }
    },
    "/voice-chat/v2/state": {
      "get": {
        "description": "Always returns true. SDK inititalize/authenticate/authorize is now done when creating/joining a voice session/channel\n\nEndpoint deleted October 2020.",
        "operationId": "GetVoiceChatV2State",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatStateResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the connection state",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable",
          "Deprecated"
        ]
      }
    },
    "/voice-chat/v3/sessions/{productName}": {
      "delete": {
        "description": "Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "operationId": "DeleteVoiceChatV3SessionsByProductName",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Leave all joined sessions",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Deprecated"
        ]
      },
      "get": {
        "description": "Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "operationId": "GetVoiceChatV3SessionsByProductName",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VoiceChatSessionResource"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the list of all current voice sessions",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "post": {
        "description": "Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "operationId": "PostVoiceChatV3SessionsByProductName",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          },
          {
            "in": "header",
            "name": "jwt",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSessionResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Join a session with game-specific JWT token",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Deprecated"
        ]
      },
      "put": {
        "description": "volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n\n\nEndpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "operationId": "PutVoiceChatV3SessionsByProductName",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSessionResource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "details"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the properties for all sessions",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Deprecated"
        ]
      }
    },
    "/voice-chat/v3/sessions/{productName}/{id}": {
      "delete": {
        "description": "Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "operationId": "DeleteVoiceChatV3SessionsByProductNameById",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Leave a session",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Deprecated"
        ]
      },
      "get": {
        "description": "Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}/{id}",
        "operationId": "GetVoiceChatV3SessionsByProductNameById",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSessionResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get session details",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "put": {
        "description": "volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n\n\nEndpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "operationId": "PutVoiceChatV3SessionsByProductNameById",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSessionResource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "details"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the properties for a session",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Deprecated"
        ]
      }
    },
    "/voice-chat/v3/sessions/{productName}/{sessionId}/participants/{participantId}": {
      "get": {
        "description": "Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "operationId": "GetVoiceChatV3SessionsByProductNameBySessionIdParticipantsByParticipantId",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sessionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "participantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatParticipantResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get participant details",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable",
          "Deprecated"
        ]
      },
      "put": {
        "description": "Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "operationId": "PutVoiceChatV3SessionsByProductNameBySessionIdParticipantsByParticipantId",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sessionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "participantId",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateParticipantResource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "participant"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update local participant details",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Deprecated"
        ]
      }
    },
    "/voice-chat/v3/settings/{productName}": {
      "get": {
        "operationId": "GetVoiceChatV3SettingsByProductName",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSettingsResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get current voice chat settings",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable"
        ]
      },
      "put": {
        "operationId": "PutVoiceChatV3SettingsByProductName",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSettingsResource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "settings"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update current voice chat settings",
        "tags": [
          "Plugins",
          "Plugin voice-chat"
        ]
      }
    },
    "/voice-chat/v4/sessions/{productName}": {
      "delete": {
        "operationId": "DeleteVoiceChatV4SessionsByProductName",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Leave all joined sessions",
        "tags": [
          "Plugins",
          "Plugin voice-chat"
        ]
      },
      "get": {
        "operationId": "GetVoiceChatV4SessionsByProductName",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VoiceChatSessionResource"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get the list of all current voice sessions",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable"
        ]
      },
      "post": {
        "operationId": "PostVoiceChatV4SessionsByProductName",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatJoinSession"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "details"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSessionResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Join a session with game-specific JWT token",
        "tags": [
          "Plugins",
          "Plugin voice-chat"
        ]
      },
      "put": {
        "description": "volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n",
        "operationId": "PutVoiceChatV4SessionsByProductName",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSessionResource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "details"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the properties for all sessions",
        "tags": [
          "Plugins",
          "Plugin voice-chat"
        ]
      }
    },
    "/voice-chat/v4/sessions/{productName}/{id}": {
      "delete": {
        "operationId": "DeleteVoiceChatV4SessionsByProductNameById",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Leave a session",
        "tags": [
          "Plugins",
          "Plugin voice-chat"
        ]
      },
      "get": {
        "operationId": "GetVoiceChatV4SessionsByProductNameById",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSessionResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get session details",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable"
        ]
      },
      "put": {
        "description": "volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n",
        "operationId": "PutVoiceChatV4SessionsByProductNameById",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSessionResource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "details"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update the properties for a session",
        "tags": [
          "Plugins",
          "Plugin voice-chat"
        ]
      }
    },
    "/voice-chat/v4/sessions/{productName}/{sessionId}/participants/{participantId}": {
      "get": {
        "operationId": "GetVoiceChatV4SessionsByProductNameBySessionIdParticipantsByParticipantId",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sessionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "participantId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatParticipantResource"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get participant details",
        "tags": [
          "Plugins",
          "Plugin voice-chat",
          "Subscribable"
        ]
      },
      "put": {
        "operationId": "PutVoiceChatV4SessionsByProductNameBySessionIdParticipantsByParticipantId",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sessionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "participantId",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateParticipantResource"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "participant"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update local participant details",
        "tags": [
          "Plugins",
          "Plugin voice-chat"
        ]
      }
    },
    "/xbox-account/v1/authorization": {
      "post": {
        "operationId": "PostXboxAccountV1Authorization",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XboxAccountAuthorizationParameters"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "AuthorizationParameters"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XboxAccountAuthorizationResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Gets authorization from the Xbox Account of the player logged in the Xbox",
        "tags": [
          "Plugins",
          "Plugin xbox-account"
        ]
      }
    },
    "/xbox-account/v1/authorization-consent": {
      "get": {
        "operationId": "GetXboxAccountV1AuthorizationConsent",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Authorization consent status for Xbox",
        "tags": [
          "Plugins",
          "Plugin xbox-account",
          "Subscribable"
        ]
      },
      "put": {
        "operationId": "PutXboxAccountV1AuthorizationConsent",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "AuthorizationConsent"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Update authorization consent status for Xbox",
        "tags": [
          "Plugins",
          "Plugin xbox-account"
        ]
      }
    },
    "/xbox-account/v1/player-nickname": {
      "get": {
        "operationId": "GetXboxAccountV1PlayerNickname",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get user's Xbox gamertag",
        "tags": [
          "Plugins",
          "Plugin xbox-account"
        ]
      }
    },
    "/xbox-account/v1/user": {
      "post": {
        "operationId": "PostXboxAccountV1User",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XboxAccountSelectUserParameters"
              }
            }
          },
          "description": "",
          "required": true,
          "x-param-name": "SelectUserParameters"
        },
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "summary": "Sign in user on Xbox",
        "tags": [
          "Plugins",
          "Plugin xbox-account"
        ]
      }
    }
  }
}
